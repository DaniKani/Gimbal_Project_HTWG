
Test1_Dani.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800a350  0800a350  0001a350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac0c  0800ac0c  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac0c  0800ac0c  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac0c  0800ac0c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac0c  0800ac0c  0001ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ac14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000208  0800ae1c  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800ae1c  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a32  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c6  00000000  00000000  00026c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00028330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00028810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011079  00000000  00000000  00028c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008047  00000000  00000000  00039c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005773d  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00099415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  00099468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a334 	.word	0x0800a334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800a334 	.word	0x0800a334

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <EKF_Init>:
float h1;
float h2;

/*--------------------------------------*/

void EKF_Init(EKF *ekf, float P[2], float Q[2], float R[3]) {
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf->roll_r 	= 0.0f;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
	ekf->pitch_r 	= 0.0f;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
	ekf->yaw_r		= 0.0f;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]

	/* Initialise state covariance matrix */
	ekf->P[0][0] = P[0]; ekf->P[0][1] = 0.0f;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
	ekf->P[1][0] = 0.0f; ekf->P[1][1] = P[1];
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	619a      	str	r2, [r3, #24]

	/* Set process and measurement noise */
	ekf->Q[0] = Q[0];
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	61da      	str	r2, [r3, #28]
	ekf->Q[1] = Q[1];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	621a      	str	r2, [r3, #32]

	ekf->R[0] = R[0];
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
	ekf->R[1] = R[1];
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
	ekf->R[2] = R[2];
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <EKF_Update>:

	ekf->P[0][0] += sampleTime_s * Pnew[0][0]; ekf->P[0][1] += sampleTime_s * Pnew[0][1];
	ekf->P[1][0] += sampleTime_s * Pnew[1][0]; ekf->P[1][1] += sampleTime_s * Pnew[1][1];
}

void EKF_Update(EKF_YAW *ekf, float ax_mps2, float ay_mps2, float az_mps2) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	ed2d 8b02 	vpush	{d8}
 8000d86:	b0c4      	sub	sp, #272	; 0x110
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d92:	6018      	str	r0, [r3, #0]
 8000d94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d9c:	ed83 0a00 	vstr	s0, [r3]
 8000da0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000da4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000da8:	edc3 0a00 	vstr	s1, [r3]
 8000dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000db0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000db4:	ed83 1a00 	vstr	s2, [r3]

	/*1.Calculate Kalman Gain*************************************************************************/
	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sin_roll = sinf(ekf->roll_r);
 8000db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dca:	f008 fad5 	bl	8009378 <sinf>
 8000dce:	ed87 0a41 	vstr	s0, [r7, #260]	; 0x104
	float cos_roll = cosf(ekf->roll_r);
 8000dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	eeb0 0a67 	vmov.f32	s0, s15
 8000de4:	f008 fa84 	bl	80092f0 <cosf>
 8000de8:	ed87 0a40 	vstr	s0, [r7, #256]	; 0x100
	float sin_pitch = sinf(ekf->pitch_r);
 8000dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	f008 fabb 	bl	8009378 <sinf>
 8000e02:	ed87 0a3f 	vstr	s0, [r7, #252]	; 0xfc
	float cos_pitch = cosf(ekf->pitch_r);
 8000e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	f008 fa6a 	bl	80092f0 <cosf>
 8000e1c:	ed87 0a3e 	vstr	s0, [r7, #248]	; 0xf8

	float C[3][2] = {	{				     0.0f,	g*cos_pitch},
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e28:	4bf5      	ldr	r3, [pc, #980]	; (8001200 <EKF_Update+0x480>)
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8000e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e36:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
						{-g* cos_roll * cos_pitch, 	g*sin_roll * sin_pitch},
 8000e3a:	4bf1      	ldr	r3, [pc, #964]	; (8001200 <EKF_Update+0x480>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	eeb1 7a67 	vneg.f32	s14, s15
 8000e44:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e4c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[3][2] = {	{				     0.0f,	g*cos_pitch},
 8000e54:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
						{-g* cos_roll * cos_pitch, 	g*sin_roll * sin_pitch},
 8000e58:	4be9      	ldr	r3, [pc, #932]	; (8001200 <EKF_Update+0x480>)
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e66:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[3][2] = {	{				     0.0f,	g*cos_pitch},
 8000e6e:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
						{ g*sin_roll *  cos_pitch, 	g*cos_roll * sin_pitch} };
 8000e72:	4be3      	ldr	r3, [pc, #908]	; (8001200 <EKF_Update+0x480>)
 8000e74:	ed93 7a00 	vldr	s14, [r3]
 8000e78:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e80:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8000e84:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[3][2] = {	{				     0.0f,	g*cos_pitch},
 8000e88:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
						{ g*sin_roll *  cos_pitch, 	g*cos_roll * sin_pitch} };
 8000e8c:	4bdc      	ldr	r3, [pc, #880]	; (8001200 <EKF_Update+0x480>)
 8000e8e:	ed93 7a00 	vldr	s14, [r3]
 8000e92:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e9a:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8000e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[3][2] = {	{				     0.0f,	g*cos_pitch},
 8000ea2:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { {ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0] + ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0] + ekf->P[0][1] * C[2][1]},
 8000ea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000eb4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8000ec0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ece:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8000ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	edd3 6a04 	vldr	s13, [r3, #16]
 8000ee4:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef0:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 8000ef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f02:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f18:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8000f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f24:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
						{ekf->P[1][1] * C[0][1], ekf->P[1][0] * C[1][0] + ekf->P[1][1] * C[1][1], ekf->P[1][0] * C[2][0] + ekf->P[1][1] * C[2][1]} };
 8000f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f36:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float PCt[2][3] = { {ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0] + ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0] + ekf->P[0][1] * C[2][1]},
 8000f3e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
						{ekf->P[1][1] * C[0][1], ekf->P[1][0] * C[1][0] + ekf->P[1][1] * C[1][1], ekf->P[1][0] * C[2][0] + ekf->P[1][1] * C[2][1]} };
 8000f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f50:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8000f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	edd3 6a07 	vldr	s13, [r3, #28]
 8000f66:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float PCt[2][3] = { {ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0] + ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0] + ekf->P[0][1] * C[2][1]},
 8000f72:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
						{ekf->P[1][1] * C[0][1], ekf->P[1][0] * C[1][0] + ekf->P[1][1] * C[1][1], ekf->P[1][0] * C[2][0] + ekf->P[1][1] * C[2][1]} };
 8000f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f84:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	edd3 6a07 	vldr	s13, [r3, #28]
 8000f9a:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8000f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
	float PCt[2][3] = { {ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0] + ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0] + ekf->P[0][1] * C[2][1]},
 8000fa6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

	/* R + C * P * C' */
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 8000faa:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8000fae:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8000fcc:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8000fd0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
 8000fdc:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8000fe0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8000fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
							{C[1][0] * PCt[0][0] + C[1][1] * PCt[1][0],	C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1] + ekf->R[1],	C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2]},
 8000fec:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8000ff0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8000ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff8:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8000ffc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001004:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 8001008:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
							{C[1][0] * PCt[0][0] + C[1][1] * PCt[1][0],	C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1] + ekf->R[1],	C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2]},
 800100c:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001010:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001018:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800101c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800102c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 800103a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
							{C[1][0] * PCt[0][0] + C[1][1] * PCt[1][0],	C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1] + ekf->R[1],	C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2]},
 800103e:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001042:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800104e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 800105a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
							{C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0],	C[2][0] * PCt[0][1] + C[2][1] * PCt[1][1],				C[2][0] * PCt[0][2] + C[2][1] * PCt[1][2] + ekf->R[2]} };
 800105e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001062:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800106e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 800107a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
							{C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0],	C[2][0] * PCt[0][1] + C[2][1] * PCt[1][1],				C[2][0] * PCt[0][2] + C[2][1] * PCt[1][2] + ekf->R[2]} };
 800107e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001082:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108a:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800108e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 800109a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
							{C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0],	C[2][0] * PCt[0][1] + C[2][1] * PCt[1][1],				C[2][0] * PCt[0][2] + C[2][1] * PCt[1][2] + ekf->R[2]} };
 800109e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80010a2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 80010ae:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float RCPCt[3][3] = { 	{					   C[0][1] * PCt[1][0] + ekf->R[0],			  C[0][1] * PCt[1][1], 									  C[0][1] * PCt[1][2]},
 80010cc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	/* Build invert matrix with Cramscher Alogorithem [inv(R + C * P * C')] */
	float detMatInv = 1.0f / (RCPCt[0][0] * (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 80010d0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80010d4:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80010d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010e0:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 80010e4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80010e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010f0:	ee27 7a27 	vmul.f32	s14, s14, s15
					- RCPCt[1][0] * (RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2])
 80010f4:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80010f8:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 80010fc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001100:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001104:	edd7 5a2c 	vldr	s11, [r7, #176]	; 0xb0
 8001108:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800110c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001110:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001118:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ RCPCt[2][0] * (RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2]));
 800111c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001120:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 8001124:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001128:	ee26 6a27 	vmul.f32	s12, s12, s15
 800112c:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 8001130:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001134:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001138:	ee76 7a67 	vsub.f32	s15, s12, s15
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee37 7a27 	vadd.f32	s14, s14, s15
	float detMatInv = 1.0f / (RCPCt[0][0] * (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 8001144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114c:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4

	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 8001150:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001154:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8001160:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8001170:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001174:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8001180:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	eef1 7a67 	vneg.f32	s15, s15
 8001190:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8001194:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001198:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800119c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a0:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80011a4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80011a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
							{-(	RCPCt[2][2] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][2]), 	RCPCt[2][2] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][2], -(	RCPCt[1][2] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][2]) },
 80011b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80011b8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80011bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80011c4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80011c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d0:	eef1 7a67 	vneg.f32	s15, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 80011d4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
							{-(	RCPCt[2][2] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][2]), 	RCPCt[2][2] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][2], -(	RCPCt[1][2] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][2]) },
 80011d8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80011dc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80011e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80011e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80011ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 80011f4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
							{-(	RCPCt[2][2] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][2]), 	RCPCt[2][2] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][2], -(	RCPCt[1][2] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][2]) },
 80011f8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80011fc:	e002      	b.n	8001204 <EKF_Update+0x484>
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120c:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8001210:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	eef1 7a67 	vneg.f32	s15, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 8001220:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
							{	RCPCt[2][1] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][1], -(	RCPCt[2][1] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][1]), 	RCPCt[1][1] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][1]} };
 8001224:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001228:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001230:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001234:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 8001240:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
							{	RCPCt[2][1] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][1], -(	RCPCt[2][1] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][1]), 	RCPCt[1][1] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][1]} };
 8001244:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001248:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800124c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001250:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001254:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	eef1 7a67 	vneg.f32	s15, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 8001264:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
							{	RCPCt[2][1] * RCPCt[1][0] - RCPCt[2][0] * RCPCt[1][1], -(	RCPCt[2][1] * RCPCt[0][0] - RCPCt[2][0] * RCPCt[0][1]), 	RCPCt[1][1] * RCPCt[0][0] - RCPCt[1][0] * RCPCt[0][1]} };
 8001268:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800126c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8001278:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
	float matInv[3][3] = { 	{	RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2], -(	RCPCt[2][2] * RCPCt[0][1] - RCPCt[2][1] * RCPCt[0][2]), 	RCPCt[1][2] * RCPCt[0][1] - RCPCt[1][1] * RCPCt[0][2] },
 8001284:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	for (unsigned int i = 0; i < 3; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800128e:	e033      	b.n	80012f8 <EKF_Update+0x578>

		for (unsigned int j = 0; j < 3; j++) {
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001296:	e026      	b.n	80012e6 <EKF_Update+0x566>

			matInv[i][j] *= detMatInv;
 8001298:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012ae:	443b      	add	r3, r7
 80012b0:	3ba0      	subs	r3, #160	; 0xa0
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80012ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012d4:	443b      	add	r3, r7
 80012d6:	3ba0      	subs	r3, #160	; 0xa0
 80012d8:	edc3 7a00 	vstr	s15, [r3]
		for (unsigned int j = 0; j < 3; j++) {
 80012dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012e0:	3301      	adds	r3, #1
 80012e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80012e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d9d4      	bls.n	8001298 <EKF_Update+0x518>
	for (unsigned int i = 0; i < 3; i++) {
 80012ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012f2:	3301      	adds	r3, #1
 80012f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80012f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d9c7      	bls.n	8001290 <EKF_Update+0x510>
		}

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { 	{						  C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0], 							C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], 						  C[1][0] * matInv[1][2] + C[2][0] * matInv[2][2]},
 8001300:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001304:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130c:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8001310:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8001320:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001324:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132c:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8001330:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8001340:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001344:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8001350:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
								{C[0][1] * matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0], C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1] + C[2][1] * matInv[2][1], C[0][1] * matInv[0][2] + C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2]} };
 8001360:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8001364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136c:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8001370:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137c:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 8001380:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
	float CtmatInv[2][3] = { 	{						  C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0], 							C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], 						  C[1][0] * matInv[1][2] + C[2][0] * matInv[2][2]},
 800138c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
								{C[0][1] * matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0], C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1] + C[2][1] * matInv[2][1], C[0][1] * matInv[0][2] + C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2]} };
 8001390:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8001394:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 80013a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ac:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 80013b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80013b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float CtmatInv[2][3] = { 	{						  C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0], 							C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], 						  C[1][0] * matInv[1][2] + C[2][0] * matInv[2][2]},
 80013bc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
								{C[0][1] * matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0], C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1] + C[2][1] * matInv[2][1], C[0][1] * matInv[0][2] + C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2]} };
 80013c0:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 80013c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 80013d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 80013e0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float CtmatInv[2][3] = { 	{						  C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0], 							C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], 						  C[1][0] * matInv[1][2] + C[2][0] * matInv[2][2]},
 80013ec:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { 	{ekf->P[0][0] * CtmatInv[0][0] + ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1] + ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2] + ekf->P[0][1] * CtmatInv[1][2]},
 80013f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800140a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	edd3 6a04 	vldr	s13, [r3, #16]
 8001414:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8001424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001432:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800143e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	edd3 6a04 	vldr	s13, [r3, #16]
 8001448:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800144c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001458:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800145c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	ed93 7a03 	vldr	s14, [r3, #12]
 8001466:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800146a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	edd3 6a04 	vldr	s13, [r3, #16]
 800147c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
						{ekf->P[1][0] * CtmatInv[0][0] + ekf->P[1][1] * CtmatInv[1][0], ekf->P[1][0] * CtmatInv[0][1] + ekf->P[1][1] * CtmatInv[1][1], ekf->P[1][0] * CtmatInv[0][2] + ekf->P[1][1] * CtmatInv[1][2]} };
 800148c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	ed93 7a06 	vldr	s14, [r3, #24]
 800149a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800149e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	edd3 6a07 	vldr	s13, [r3, #28]
 80014b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80014b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[2][3] = { 	{ekf->P[0][0] * CtmatInv[0][0] + ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1] + ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2] + ekf->P[0][1] * CtmatInv[1][2]},
 80014bc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
						{ekf->P[1][0] * CtmatInv[0][0] + ekf->P[1][1] * CtmatInv[1][0], ekf->P[1][0] * CtmatInv[0][1] + ekf->P[1][1] * CtmatInv[1][1], ekf->P[1][0] * CtmatInv[0][2] + ekf->P[1][1] * CtmatInv[1][2]} };
 80014c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80014ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80014e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ec:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[2][3] = { 	{ekf->P[0][0] * CtmatInv[0][0] + ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1] + ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2] + ekf->P[0][1] * CtmatInv[1][2]},
 80014f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
						{ekf->P[1][0] * CtmatInv[0][0] + ekf->P[1][1] * CtmatInv[1][0], ekf->P[1][0] * CtmatInv[0][1] + ekf->P[1][1] * CtmatInv[1][1], ekf->P[1][0] * CtmatInv[0][2] + ekf->P[1][1] * CtmatInv[1][2]} };
 80014f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8001502:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800150e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	edd3 6a07 	vldr	s13, [r3, #28]
 8001518:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[2][3] = { 	{ekf->P[0][0] * CtmatInv[0][0] + ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1] + ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2] + ekf->P[0][1] * CtmatInv[1][2]},
 8001524:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	Kalman_Gain_.aa = K[0][0];
 8001528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152a:	4ae0      	ldr	r2, [pc, #896]	; (80018ac <EKF_Update+0xb2c>)
 800152c:	6013      	str	r3, [r2, #0]
	Kalman_Gain_.ab = K[0][1];
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	4ade      	ldr	r2, [pc, #888]	; (80018ac <EKF_Update+0xb2c>)
 8001532:	6053      	str	r3, [r2, #4]
	Kalman_Gain_.ac = K[0][2];
 8001534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001536:	4add      	ldr	r2, [pc, #884]	; (80018ac <EKF_Update+0xb2c>)
 8001538:	6093      	str	r3, [r2, #8]
	Kalman_Gain_.ba = K[1][0];
 800153a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153c:	4adb      	ldr	r2, [pc, #876]	; (80018ac <EKF_Update+0xb2c>)
 800153e:	60d3      	str	r3, [r2, #12]
	Kalman_Gain_.bb = K[1][1];
 8001540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001542:	4ada      	ldr	r2, [pc, #872]	; (80018ac <EKF_Update+0xb2c>)
 8001544:	6113      	str	r3, [r2, #16]
	Kalman_Gain_.bc = K[1][2];
 8001546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001548:	4ad8      	ldr	r2, [pc, #864]	; (80018ac <EKF_Update+0xb2c>)
 800154a:	6153      	str	r3, [r2, #20]

	/****************************************************************************************************************************/
	/* Normalise accelerometer readings */
	//float accNormFactor = 1.0f / sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);

	float ax_norm 		= ax_mps2 ;//* accNormFactor;
 800154c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	float ay_norm 		= ay_mps2 ;//* accNormFactor;
 800155a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800155e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float az_norm 		= az_mps2 ;//* accNormFactor;
 8001568:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800156c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */ //I = [0 0], [0 0]
//	float IminKC[2][2] = { 	{1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]), -(K[0][1] * C[1][1] + K[1][0] * C[2][1])},
//							{- (K[1][1] * C[1][0] + K[1][2] * C[2][0]), 	1.0f-(K[1][1] * C[1][1] + K[1][2] * C[2][1])} };
	// C[0][0] = 0 !!!
	float IminKC[2][2] = { 	{1.0f - (K[0][1] * C[1][0] + K[0][2] * C[2][0]), -(K[0][0] * C[0][1] + K[0][1] * C[1][1] + K[0][2] * C[2][1])},
 8001576:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800157a:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001586:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800159e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015a2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80015a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015aa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80015ae:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80015b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ba:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80015be:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80015c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	eef1 7a67 	vneg.f32	s15, s15
 80015ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
							{- (K[1][1] * C[1][0] + K[1][2] * C[2][0]), 	1.0f-(K[1][0] * C[0][1] + K[1][1] * C[1][1] + K[1][2] * C[2][1])} };
 80015d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015d6:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80015e2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80015e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	eef1 7a67 	vneg.f32	s15, s15
	float IminKC[2][2] = { 	{1.0f - (K[0][1] * C[1][0] + K[0][2] * C[2][0]), -(K[0][0] * C[0][1] + K[0][1] * C[1][1] + K[0][2] * C[2][1])},
 80015f2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
							{- (K[1][1] * C[1][0] + K[1][2] * C[2][0]), 	1.0f-(K[1][0] * C[0][1] + K[1][1] * C[1][1] + K[1][2] * C[2][1])} };
 80015f6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015fa:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80015fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001602:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001606:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001616:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800161a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
	float IminKC[2][2] = { 	{1.0f - (K[0][1] * C[1][0] + K[0][2] * C[2][0]), -(K[0][0] * C[0][1] + K[0][1] * C[1][1] + K[0][2] * C[2][1])},
 800162a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c


	float Pnew[2][2] = { 	{IminKC[0][0] * ekf->P[0][0] + IminKC[0][1] * ekf->P[1][0], IminKC[0][0] * ekf->P[0][1] + IminKC[0][1] * ekf->P[1][1]},
 800162e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800164c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	edd3 7a06 	vldr	s15, [r3, #24]
 8001656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	edc7 7a08 	vstr	s15, [r7, #32]
 8001662:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800166a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	edd3 7a04 	vldr	s15, [r3, #16]
 8001674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001678:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800167c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	edd3 7a07 	vldr	s15, [r3, #28]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
							{IminKC[1][0] * ekf->P[0][0] + IminKC[1][1] * ekf->P[1][0], IminKC[1][0] * ekf->P[0][1] + IminKC[1][1] * ekf->P[1][1]} };
 8001696:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800169a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ac:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80016b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80016be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[2][2] = { 	{IminKC[0][0] * ekf->P[0][0] + IminKC[0][1] * ekf->P[1][0], IminKC[0][0] * ekf->P[0][1] + IminKC[0][1] * ekf->P[1][1]},
 80016c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
							{IminKC[1][0] * ekf->P[0][0] + IminKC[1][1] * ekf->P[1][0], IminKC[1][0] * ekf->P[0][1] + IminKC[1][1] * ekf->P[1][1]} };
 80016ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80016dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80016e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80016f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[2][2] = { 	{IminKC[0][0] * ekf->P[0][0] + IminKC[0][1] * ekf->P[1][0], IminKC[0][0] * ekf->P[0][1] + IminKC[0][1] * ekf->P[1][1]},
 80016fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	ekf->P[0][0] = Pnew[0][0]; ekf->P[0][1] = Pnew[0][1];
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	611a      	str	r2, [r3, #16]
	ekf->P[1][0] = Pnew[1][0]; ekf->P[1][1] = Pnew[1][1];
 800171a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800171c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800172e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61da      	str	r2, [r3, #28]

	/* Compute output function h(x,u) */
	float h[3] = {	 g*sinf(ekf->pitch_r),
 8001736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800173a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	edd3 7a01 	vldr	s15, [r3, #4]
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	f007 fe16 	bl	8009378 <sinf>
 800174c:	eeb0 7a40 	vmov.f32	s14, s0
 8001750:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <EKF_Update+0xb30>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175a:	edc7 7a05 	vstr	s15, [r7, #20]
					-g*cosf(ekf->pitch_r) * sinf(ekf->roll_r),
 800175e:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <EKF_Update+0xb30>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb1 8a67 	vneg.f32	s16, s15
 8001768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800176c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	edd3 7a01 	vldr	s15, [r3, #4]
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	f007 fdb9 	bl	80092f0 <cosf>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800178a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f007 fdee 	bl	8009378 <sinf>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	ee68 7a27 	vmul.f32	s15, s16, s15
	float h[3] = {	 g*sinf(ekf->pitch_r),
 80017a4:	edc7 7a06 	vstr	s15, [r7, #24]
					-g*cosf(ekf->pitch_r) * cosf(ekf->roll_r) };
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <EKF_Update+0xb30>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eeb1 8a67 	vneg.f32	s16, s15
 80017b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c0:	eeb0 0a67 	vmov.f32	s0, s15
 80017c4:	f007 fd94 	bl	80092f0 <cosf>
 80017c8:	eef0 7a40 	vmov.f32	s15, s0
 80017cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80017d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	f007 fd85 	bl	80092f0 <cosf>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	ee68 7a27 	vmul.f32	s15, s16, s15
	float h[3] = {	 g*sinf(ekf->pitch_r),
 80017ee:	edc7 7a07 	vstr	s15, [r7, #28]
	h0 = h[0];
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <EKF_Update+0xb34>)
 80017f6:	6013      	str	r3, [r2, #0]
	h1 = h[1];
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <EKF_Update+0xb38>)
 80017fc:	6013      	str	r3, [r2, #0]
	h2 = h[2];
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <EKF_Update+0xb3c>)
 8001802:	6013      	str	r3, [r2, #0]
//		__asm("BKPT #1\n");
//	}


	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf->roll_r 	+= (K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1]) + K[0][2] * (az_norm - h[2]));
 8001804:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001816:	edd7 7a05 	vldr	s15, [r7, #20]
 800181a:	ed97 6a3c 	vldr	s12, [r7, #240]	; 0xf0
 800181e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001822:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001826:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 800182a:	edd7 7a06 	vldr	s15, [r7, #24]
 800182e:	edd7 5a3b 	vldr	s11, [r7, #236]	; 0xec
 8001832:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001836:	ee66 7a27 	vmul.f32	s15, s12, s15
 800183a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800183e:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8001842:	edd7 7a07 	vldr	s15, [r7, #28]
 8001846:	edd7 5a3a 	vldr	s11, [r7, #232]	; 0xe8
 800184a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800184e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800185e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edc3 7a00 	vstr	s15, [r3]
	ekf->pitch_r 	+= (K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1]) + K[1][2] * (az_norm - h[2]));
 8001868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800186c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	ed93 7a01 	vldr	s14, [r3, #4]
 8001876:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800187a:	edd7 7a05 	vldr	s15, [r7, #20]
 800187e:	ed97 6a3c 	vldr	s12, [r7, #240]	; 0xf0
 8001882:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001886:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188a:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800188e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001892:	edd7 5a3b 	vldr	s11, [r7, #236]	; 0xec
 8001896:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800189a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800189e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018a2:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80018a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018aa:	e009      	b.n	80018c0 <EKF_Update+0xb40>
 80018ac:	20000224 	.word	0x20000224
 80018b0:	20000000 	.word	0x20000000
 80018b4:	2000023c 	.word	0x2000023c
 80018b8:	20000240 	.word	0x20000240
 80018bc:	20000244 	.word	0x20000244
 80018c0:	edd7 5a3a 	vldr	s11, [r7, #232]	; 0xe8
 80018c4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80018c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80018e2:	bf00      	nop
 80018e4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80018e8:	46bd      	mov	sp, r7
 80018ea:	ecbd 8b02 	vpop	{d8}
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <EKF_YAW_Init>:
//
//}
//

/*******************Kalman with Yaw Axis*********************************************/
void EKF_YAW_Init(EKF_YAW *ekf, float P, float Q, float R) {
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80018fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001900:	ed87 1a00 	vstr	s2, [r7]

	/* Reset state estimates */
	ekf->roll_r 	= 0.0f;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
	ekf->pitch_r 	= 0.0f;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	ekf->yaw_r	 	= 0.0f;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	609a      	str	r2, [r3, #8]

	/* Initialise state covariance matrix */
	ekf->P[0][0] = P;     ekf->P[0][1] = 0.0f; ekf->P[0][2] = 0.0f;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
	ekf->P[1][0] = 0.0f;  ekf->P[1][1] = P;    ekf->P[1][2] = 0.0f;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	61da      	str	r2, [r3, #28]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
	ekf->P[2][0] = 0.0f;  ekf->P[2][1] = 0.0f; ekf->P[2][2] = P;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Set process and measurement noise */
	ekf->Q[0] = Q;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
	ekf->Q[1] = Q;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
	ekf->Q[2] = Q;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38

	ekf->R[0] = R;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c
	ekf->R[1] = R;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
	ekf->R[2] = R;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <EKF_YAW_Predict>:

void EKF_YAW_Predict(EKF_YAW *ekf, float p_rps, float q_rps, float r_rps, float sampleTime_s) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b0b4      	sub	sp, #208	; 0xd0
 8001992:	af00      	add	r7, sp, #0
 8001994:	6178      	str	r0, [r7, #20]
 8001996:	ed87 0a04 	vstr	s0, [r7, #16]
 800199a:	edc7 0a03 	vstr	s1, [r7, #12]
 800199e:	ed87 1a02 	vstr	s2, [r7, #8]
 80019a2:	edc7 1a01 	vstr	s3, [r7, #4]

	/* Pre-compute trigonometric quantities */
	float sin_roll = sinf(ekf->roll_r);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f007 fce2 	bl	8009378 <sinf>
 80019b4:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
	float cos_roll = cosf(ekf->roll_r);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f007 fc95 	bl	80092f0 <cosf>
 80019c6:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	float cos_pitch = cosf(ekf->pitch_r);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	f007 fc8c 	bl	80092f0 <cosf>
 80019d8:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
	float tan_pitch = tanf(ekf->pitch_r);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	f007 fd0d 	bl	8009404 <tanf>
 80019ea:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0

	/* Compute state transition function dx/dt = f(x,u) */
	float drolldt	= p_rps + tan_pitch * (q_rps * sin_roll + r_rps * cos_roll);
 80019ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f2:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80019fe:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float dpitchdt	= 					   q_rps * cos_roll - r_rps * sin_roll;
 8001a1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a22:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a2e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	float dyawdt	= 		  	q_rps *(sin_roll/cos_pitch)	+ r_rps * (cos_roll/cos_pitch);
 8001a3e:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 8001a42:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a52:	ed97 6a32 	vldr	s12, [r7, #200]	; 0xc8
 8001a56:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a5a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf->roll_r 	+= sampleTime_s * drolldt;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	ed93 7a00 	vldr	s14, [r3]
 8001a74:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a78:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	edc3 7a00 	vstr	s15, [r3]
	ekf->pitch_r	+= sampleTime_s * dpitchdt;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a90:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a94:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	edc3 7a01 	vstr	s15, [r3, #4]
	ekf->yaw_r		+= sampleTime_s * dyawdt;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aac:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ab0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Re-compute trigonometric quantities */
	sin_roll 			= sinf(ekf->roll_r);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	f007 fc54 	bl	8009378 <sinf>
 8001ad0:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
	cos_roll 			= cosf(ekf->roll_r);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	f007 fc07 	bl	80092f0 <cosf>
 8001ae2:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	tan_pitch 			= tanf(ekf->pitch_r);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	f007 fc88 	bl	8009404 <tanf>
 8001af4:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	float cos_pitch_inv = 1.0f / cosf(ekf->pitch_r);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f007 fbf5 	bl	80092f0 <cosf>
 8001b06:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b12:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float sin_pitch_inv = 1.0f /sinf(ekf->pitch_r);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	f007 fc2a 	bl	8009378 <sinf>
 8001b24:	eeb0 7a40 	vmov.f32	s14, s0
 8001b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b30:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[3][3] =	{
		{ tan_pitch * (q_rps * cos_roll - r_rps * sin_roll) 			, (q_rps * sin_roll + r_rps * cos_roll) * cos_pitch_inv * cos_pitch_inv	,	0.0f },
 8001b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b38:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b40:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b44:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b50:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001b54:	ee67 7a27 	vmul.f32	s15, s14, s15
	float A[3][3] =	{
 8001b58:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		{ tan_pitch * (q_rps * cos_roll - r_rps * sin_roll) 			, (q_rps * sin_roll + r_rps * cos_roll) * cos_pitch_inv * cos_pitch_inv	,	0.0f },
 8001b5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b60:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b68:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b6c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
	float A[3][3] =	{
 8001b88:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		{ -(q_rps * sin_roll + r_rps * cos_roll)						, 	  0.0f																,	0.0f },
 8001b94:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b98:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ba4:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	eef1 7a67 	vneg.f32	s15, s15
	float A[3][3] =	{
 8001bb4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		{ (q_rps*cos_roll*cos_pitch_inv - r_rps*sin_roll*cos_pitch_inv)	,(-q_rps*sin_roll*sin_pitch_inv-r_rps*cos_roll*sin_pitch_inv)			,	0.0f }};
 8001bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bcc:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bdc:	edd7 6a02 	vldr	s13, [r7, #8]
 8001be0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001be8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
	float A[3][3] =	{
 8001bf4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		{ (q_rps*cos_roll*cos_pitch_inv - r_rps*sin_roll*cos_pitch_inv)	,(-q_rps*sin_roll*sin_pitch_inv-r_rps*cos_roll*sin_pitch_inv)			,	0.0f }};
 8001bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bfc:	eeb1 7a67 	vneg.f32	s14, s15
 8001c00:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c08:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c14:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001c18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c1c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
	float A[3][3] =	{
 8001c28:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */

	/**1.**A*P(n)**************************************************************/
	/**0= A[0][2] & A[1][2] & A[2][2] & A[1][1]*/
	float A_P[3][3]={
		{A[0][0]*ekf->P[0][0]+A[0][1]*ekf->P[1][0]	, A[0][0]*ekf->P[0][1]+A[0][1]*ekf->P[1][1]	, A[0][0]*ekf->P[0][2]+A[0][1]*ekf->P[1][2]	},
 8001c34:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c42:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001c54:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		{A[0][0]*ekf->P[0][0]+A[0][1]*ekf->P[1][0]	, A[0][0]*ekf->P[0][1]+A[0][1]*ekf->P[1][1]	, A[0][0]*ekf->P[0][2]+A[0][1]*ekf->P[1][2]	},
 8001c58:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c66:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001c78:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		{A[0][0]*ekf->P[0][0]+A[0][1]*ekf->P[1][0]	, A[0][0]*ekf->P[0][1]+A[0][1]*ekf->P[1][1]	, A[0][0]*ekf->P[0][2]+A[0][1]*ekf->P[1][2]	},
 8001c7c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001c9c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		{A[1][0]*ekf->P[0][0]						, A[1][0]*ekf->P[0][1]						, A[1][0]*ekf->P[0][2]						},
 8001ca0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
	float A_P[3][3]={
 8001cae:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		{A[1][0]*ekf->P[0][0]						, A[1][0]*ekf->P[0][1]						, A[1][0]*ekf->P[0][2]						},
 8001cb2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
	float A_P[3][3]={
 8001cc0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		{A[1][0]*ekf->P[0][0]						, A[1][0]*ekf->P[0][1]						, A[1][0]*ekf->P[0][2]						},
 8001cc4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
	float A_P[3][3]={
 8001cd2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		{A[2][0]*ekf->P[0][0]+A[2][1]*ekf->P[1][0]	, A[2][0]*ekf->P[0][1]+A[2][1]*ekf->P[1][1]	, A[2][0]*ekf->P[0][2]+A[2][1]*ekf->P[1][2]	},
 8001cd6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001cf6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		{A[2][0]*ekf->P[0][0]+A[2][1]*ekf->P[1][0]	, A[2][0]*ekf->P[0][1]+A[2][1]*ekf->P[1][1]	, A[2][0]*ekf->P[0][2]+A[2][1]*ekf->P[1][2]	},
 8001cfa:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d16:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001d1a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		{A[2][0]*ekf->P[0][0]+A[2][1]*ekf->P[1][0]	, A[2][0]*ekf->P[0][1]+A[2][1]*ekf->P[1][1]	, A[2][0]*ekf->P[0][2]+A[2][1]*ekf->P[1][2]	},
 8001d1e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	float A_P[3][3]={
 8001d3e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	};
	/**2.**P(n)*A'**************************************************************/
		/**0= A[0][2] & A[1][2] & A[2][2] & A[1][1]*/
	float P_At[3][3] ={
		{ekf->P[0][0]*A[0][0]+ekf->P[0][1]*A[1][0]+ekf->P[0][2]*A[2][0], ekf->P[1][0]*A[0][0]+ekf->P[1][1]*A[1][0]+ekf->P[1][2]*A[2][0], ekf->P[2][0]*A[0][0]+ekf->P[2][1]*A[1][0]+ekf->P[2][2]*A[2][0]	 },
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d48:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d56:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d68:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001d74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		{ekf->P[0][0]*A[0][0]+ekf->P[0][1]*A[1][0]+ekf->P[0][2]*A[2][0], ekf->P[1][0]*A[0][0]+ekf->P[1][1]*A[1][0]+ekf->P[1][2]*A[2][0], ekf->P[2][0]*A[0][0]+ekf->P[2][1]*A[1][0]+ekf->P[2][2]*A[2][0]	 },
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d7e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	edd3 6a07 	vldr	s13, [r3, #28]
 8001d8c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001d9e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001daa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		{ekf->P[0][0]*A[0][0]+ekf->P[0][1]*A[1][0]+ekf->P[0][2]*A[2][0], ekf->P[1][0]*A[0][0]+ekf->P[1][1]*A[1][0]+ekf->P[1][2]*A[2][0], ekf->P[2][0]*A[0][0]+ekf->P[2][1]*A[1][0]+ekf->P[2][2]*A[2][0]	 },
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001db4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001dc2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001dd4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001de0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		{ekf->P[0][0]*A[0][1]+ekf->P[0][2]*A[2][1]					   , ekf->P[1][0]*A[0][1]+ekf->P[1][2]*A[2][1]					   , ekf->P[2][0]*A[0][1]+ekf->P[2][2]*A[2][1]						 },
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dea:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001df8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001e04:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		{ekf->P[0][0]*A[0][1]+ekf->P[0][2]*A[2][1]					   , ekf->P[1][0]*A[0][1]+ekf->P[1][2]*A[2][1]					   , ekf->P[2][0]*A[0][1]+ekf->P[2][2]*A[2][1]						 },
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e1c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001e28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		{ekf->P[0][0]*A[0][1]+ekf->P[0][2]*A[2][1]					   , ekf->P[1][0]*A[0][1]+ekf->P[1][2]*A[2][1]					   , ekf->P[2][0]*A[0][1]+ekf->P[2][2]*A[2][1]						 },
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001e32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001e40:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
	float P_At[3][3] ={
 8001e4c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	663b      	str	r3, [r7, #96]	; 0x60
	};

	/**3.**(A * P(n) + P(n) * A' + Q)'**************************************************************/
			/**0= Q[0][1] & Q[0][2] & Q[1][0] & Q[0][2] & Q[2][0] & Q[2][1]*/
	float Pnew[3][3] ={
			{A_P[0][0]+P_At[0][0]+ekf->Q[0] , A_P[0][1]+P_At[0][1]				,A_P[0][2]+P_At[0][2]			},
 8001e62:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001e66:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001e78:	edc7 7a07 	vstr	s15, [r7, #28]
			{A_P[0][0]+P_At[0][0]+ekf->Q[0] , A_P[0][1]+P_At[0][1]				,A_P[0][2]+P_At[0][2]			},
 8001e7c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001e80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e84:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001e88:	edc7 7a08 	vstr	s15, [r7, #32]
			{A_P[0][0]+P_At[0][0]+ekf->Q[0] , A_P[0][1]+P_At[0][1]				,A_P[0][2]+P_At[0][2]			},
 8001e8c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001e90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001e98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			{A_P[1][0]+P_At[1][0]			, A_P[1][1]+P_At[1][1]+ekf->Q[1]	,A_P[1][2]+P_At[1][2]			},
 8001e9c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001ea0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001ea8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			{A_P[1][0]+P_At[1][0]			, A_P[1][1]+P_At[1][1]+ekf->Q[1]	,A_P[1][2]+P_At[1][2]			},
 8001eac:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001eb0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001ec2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			{A_P[1][0]+P_At[1][0]			, A_P[1][1]+P_At[1][1]+ekf->Q[1]	,A_P[1][2]+P_At[1][2]			},
 8001ec6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001eca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001ed2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			{A_P[2][0]+P_At[2][0]			, A_P[2][1]+P_At[2][1]				,A_P[2][2]+P_At[2][2]+ekf->Q[2]	},
 8001ed6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001eda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001ee2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			{A_P[2][0]+P_At[2][0]			, A_P[2][1]+P_At[2][1]				,A_P[2][2]+P_At[2][2]+ekf->Q[2]	},
 8001ee6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001eea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001ef2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			{A_P[2][0]+P_At[2][0]			, A_P[2][1]+P_At[2][1]				,A_P[2][2]+P_At[2][2]+ekf->Q[2]	},
 8001ef6:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001efa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
	float Pnew[3][3] ={
 8001f0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	};

//	{	{A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0] + ekf->P[0][0] * A[0][0] + ekf->P[0][1] * A[0][1] + ekf->Q[0], A[0][0] * ekf->P[0][1] + A[0][1] * ekf->P[1][1] + ekf->P[0][0] * A[1][0]},
//		{A[1][0] * ekf->P[0][0] + 						   ekf->P[1][0] * A[0][0] + ekf->P[1][1] * A[0][1], 			A[1][0] * ekf->P[0][1] + 						  ekf->P[1][0] * A[1][0] + ekf->Q[1]} };

	ekf->P[0][0] += sampleTime_s * Pnew[0][0]; ekf->P[0][1] += sampleTime_s * Pnew[0][1]; ekf->P[0][2] += sampleTime_s * Pnew[0][2];
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f32:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	edc3 7a04 	vstr	s15, [r3, #16]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f4e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	edc3 7a05 	vstr	s15, [r3, #20]
	ekf->P[1][0] += sampleTime_s * Pnew[1][0]; ekf->P[1][1] += sampleTime_s * Pnew[1][1]; ekf->P[1][2] += sampleTime_s * Pnew[1][2];
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f6a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	edc3 7a06 	vstr	s15, [r3, #24]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f86:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	edc3 7a07 	vstr	s15, [r3, #28]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001fa2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	edc3 7a08 	vstr	s15, [r3, #32]
	ekf->P[2][0] += sampleTime_s * Pnew[2][0]; ekf->P[2][1] += sampleTime_s * Pnew[2][1]; ekf->P[2][2] += sampleTime_s * Pnew[2][2];
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001fbe:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fda:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ff6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


}
 800200c:	bf00      	nop
 800200e:	37d0      	adds	r7, #208	; 0xd0
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <GY511_init>:
float magOffset_mT[3];
float yaw_offset_kompensiert;


void GY511_init(uint8_t mode, uint8_t gain, uint8_t rate)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
	switch(gain)
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	2be0      	cmp	r3, #224	; 0xe0
 800202a:	d040      	beq.n	80020ae <GY511_init+0x9a>
 800202c:	2be0      	cmp	r3, #224	; 0xe0
 800202e:	dc45      	bgt.n	80020bc <GY511_init+0xa8>
 8002030:	2bc0      	cmp	r3, #192	; 0xc0
 8002032:	d035      	beq.n	80020a0 <GY511_init+0x8c>
 8002034:	2bc0      	cmp	r3, #192	; 0xc0
 8002036:	dc41      	bgt.n	80020bc <GY511_init+0xa8>
 8002038:	2ba0      	cmp	r3, #160	; 0xa0
 800203a:	d02a      	beq.n	8002092 <GY511_init+0x7e>
 800203c:	2ba0      	cmp	r3, #160	; 0xa0
 800203e:	dc3d      	bgt.n	80020bc <GY511_init+0xa8>
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d01f      	beq.n	8002084 <GY511_init+0x70>
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	dc39      	bgt.n	80020bc <GY511_init+0xa8>
 8002048:	2b60      	cmp	r3, #96	; 0x60
 800204a:	d014      	beq.n	8002076 <GY511_init+0x62>
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	dc35      	bgt.n	80020bc <GY511_init+0xa8>
 8002050:	2b20      	cmp	r3, #32
 8002052:	d002      	beq.n	800205a <GY511_init+0x46>
 8002054:	2b40      	cmp	r3, #64	; 0x40
 8002056:	d007      	beq.n	8002068 <GY511_init+0x54>
			Mag_Gauss_LSB_XY = 230.0f;
			Mag_Gauss_LSB_Z = 205.0f;
			break;

		default:
			break;
 8002058:	e030      	b.n	80020bc <GY511_init+0xa8>
			Mag_Gauss_LSB_XY = 1100.0f;
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <GY511_init+0xf4>)
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <GY511_init+0xf8>)
 800205e:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 980.0f;
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <GY511_init+0xfc>)
 8002062:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <GY511_init+0x100>)
 8002064:	601a      	str	r2, [r3, #0]
			break;
 8002066:	e02a      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 855.0f;
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <GY511_init+0xf4>)
 800206a:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <GY511_init+0x104>)
 800206c:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 760.0f;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <GY511_init+0xfc>)
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <GY511_init+0x108>)
 8002072:	601a      	str	r2, [r3, #0]
			break;
 8002074:	e023      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 670.0f;
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <GY511_init+0xf4>)
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <GY511_init+0x10c>)
 800207a:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 600.0f;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <GY511_init+0xfc>)
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <GY511_init+0x110>)
 8002080:	601a      	str	r2, [r3, #0]
			break;
 8002082:	e01c      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 450.0f;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <GY511_init+0xf4>)
 8002086:	4a28      	ldr	r2, [pc, #160]	; (8002128 <GY511_init+0x114>)
 8002088:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 400.0f;
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <GY511_init+0xfc>)
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <GY511_init+0x118>)
 800208e:	601a      	str	r2, [r3, #0]
			break;
 8002090:	e015      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 400.0f;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <GY511_init+0xf4>)
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <GY511_init+0x118>)
 8002096:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 355.0f;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <GY511_init+0xfc>)
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <GY511_init+0x11c>)
 800209c:	601a      	str	r2, [r3, #0]
			break;
 800209e:	e00e      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 330.0f;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <GY511_init+0xf4>)
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <GY511_init+0x120>)
 80020a4:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 295.0f;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <GY511_init+0xfc>)
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <GY511_init+0x124>)
 80020aa:	601a      	str	r2, [r3, #0]
			break;
 80020ac:	e007      	b.n	80020be <GY511_init+0xaa>
			Mag_Gauss_LSB_XY = 230.0f;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <GY511_init+0xf4>)
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <GY511_init+0x128>)
 80020b2:	601a      	str	r2, [r3, #0]
			Mag_Gauss_LSB_Z = 205.0f;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <GY511_init+0xfc>)
 80020b6:	4a22      	ldr	r2, [pc, #136]	; (8002140 <GY511_init+0x12c>)
 80020b8:	601a      	str	r2, [r3, #0]
			break;
 80020ba:	e000      	b.n	80020be <GY511_init+0xaa>
			break;
 80020bc:	bf00      	nop
	}

	/*Magneto Config*/
	i2c_data_buff[0] = CRA_REG_M;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <GY511_init+0x130>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
	i2c_data_buff[1] = rate;
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <GY511_init+0x130>)
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	7053      	strb	r3, [r2, #1]
	i2c_dma_write(GY511_addr,i2c_data_buff,I2C_DATA_BUFF_LEN);
 80020ca:	2203      	movs	r2, #3
 80020cc:	491d      	ldr	r1, [pc, #116]	; (8002144 <GY511_init+0x130>)
 80020ce:	201e      	movs	r0, #30
 80020d0:	f000 fe6a 	bl	8002da8 <i2c_dma_write>

	i2c_data_buff[0] = CRB_REG_M;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <GY511_init+0x130>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
	i2c_data_buff[1] = gain;
 80020da:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <GY511_init+0x130>)
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	7053      	strb	r3, [r2, #1]
	i2c_dma_write(GY511_addr,i2c_data_buff,I2C_DATA_BUFF_LEN);
 80020e0:	2203      	movs	r2, #3
 80020e2:	4918      	ldr	r1, [pc, #96]	; (8002144 <GY511_init+0x130>)
 80020e4:	201e      	movs	r0, #30
 80020e6:	f000 fe5f 	bl	8002da8 <i2c_dma_write>

	i2c_data_buff[0] = MR_REG_M;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <GY511_init+0x130>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
	i2c_data_buff[1] = mode;
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <GY511_init+0x130>)
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	7053      	strb	r3, [r2, #1]
	i2c_dma_write(GY511_addr,i2c_data_buff,I2C_DATA_BUFF_LEN);
 80020f6:	2203      	movs	r2, #3
 80020f8:	4912      	ldr	r1, [pc, #72]	; (8002144 <GY511_init+0x130>)
 80020fa:	201e      	movs	r0, #30
 80020fc:	f000 fe54 	bl	8002da8 <i2c_dma_write>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000254 	.word	0x20000254
 800210c:	44898000 	.word	0x44898000
 8002110:	20000258 	.word	0x20000258
 8002114:	44750000 	.word	0x44750000
 8002118:	4455c000 	.word	0x4455c000
 800211c:	443e0000 	.word	0x443e0000
 8002120:	44278000 	.word	0x44278000
 8002124:	44160000 	.word	0x44160000
 8002128:	43e10000 	.word	0x43e10000
 800212c:	43c80000 	.word	0x43c80000
 8002130:	43b18000 	.word	0x43b18000
 8002134:	43a50000 	.word	0x43a50000
 8002138:	43938000 	.word	0x43938000
 800213c:	43660000 	.word	0x43660000
 8002140:	434d0000 	.word	0x434d0000
 8002144:	20000250 	.word	0x20000250

08002148 <GY_511_update>:


void GY_511_update(lsm303MagData *data, int8_t *Offset)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]

	// Data Ready Bit
	i2c_dma_read(GY511_addr,SR_REG_Mg,&DRDY,I2C_DATA_BUFF_LEN);
 8002152:	2303      	movs	r3, #3
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <GY_511_update+0x1b0>)
 8002156:	2109      	movs	r1, #9
 8002158:	201e      	movs	r0, #30
 800215a:	f000 fe5d 	bl	8002e18 <i2c_dma_read>



	if(DRDY & 0x01)
 800215e:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <GY_511_update+0x1b0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80be 	beq.w	80022e8 <GY_511_update+0x1a0>
	{
		i2c_dma_read(GY511_addr,GY_511_MAGNETO_OUT_X_H_M,(uint8_t *)magnetometer_buff,MAX_TRANSFER_LEN);
 800216c:	2306      	movs	r3, #6
 800216e:	4a63      	ldr	r2, [pc, #396]	; (80022fc <GY_511_update+0x1b4>)
 8002170:	2103      	movs	r1, #3
 8002172:	201e      	movs	r0, #30
 8002174:	f000 fe50 	bl	8002e18 <i2c_dma_read>
	{
		return;
	}


	data->Raw_Buffer16[0] = ((int16_t)((magnetometer_buff[0] << 8) | magnetometer_buff[1]))- (int16_t)Offset[0]-(int16_t)4;		//x-Wert
 8002178:	4b60      	ldr	r3, [pc, #384]	; (80022fc <GY_511_update+0x1b4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <GY_511_update+0x1b4>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	b29a      	uxth	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f993 3000 	ldrsb.w	r3, [r3]
 8002192:	b29b      	uxth	r3, r3
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b04      	subs	r3, #4
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	80da      	strh	r2, [r3, #6]
	data->Raw_Buffer16[1] = ((int16_t)((magnetometer_buff[2] << 8) | magnetometer_buff[3]))- (int16_t)Offset[2];//-(int16_t)84;		//z-Wert
 80021a2:	4b56      	ldr	r3, [pc, #344]	; (80022fc <GY_511_update+0x1b4>)
 80021a4:	789b      	ldrb	r3, [r3, #2]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <GY_511_update+0x1b4>)
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	3302      	adds	r3, #2
 80021ba:	f993 3000 	ldrsb.w	r3, [r3]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	811a      	strh	r2, [r3, #8]
	data->Raw_Buffer16[2] = ((int16_t)((magnetometer_buff[4] << 8) | magnetometer_buff[5]))- (int16_t)Offset[1]-(int16_t)6;		//y-Wert
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <GY_511_update+0x1b4>)
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <GY_511_update+0x1b4>)
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	b29a      	uxth	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	f993 3000 	ldrsb.w	r3, [r3]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b06      	subs	r3, #6
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	815a      	strh	r2, [r3, #10]


	data->x = ((float)data->Raw_Buffer16[0] / Mag_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA);//-0.0297826082f;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002204:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <GY_511_update+0x1b8>)
 8002206:	ed93 7a00 	vldr	s14, [r3]
 800220a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002304 <GY_511_update+0x1bc>
 8002212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	edc3 7a03 	vstr	s15, [r3, #12]
	data->z = ((float)data->Raw_Buffer16[1] / Mag_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <GY_511_update+0x1c0>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002234:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002304 <GY_511_update+0x1bc>
 8002238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	edc3 7a05 	vstr	s15, [r3, #20]
	data->y = ((float)data->Raw_Buffer16[2] / Mag_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA);//-0.00478260964f;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <GY_511_update+0x1b8>)
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002304 <GY_511_update+0x1bc>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edc3 7a04 	vstr	s15, [r3, #16]
	//Mag_y_raw = ((float)((int16_t)((magnetometer_buff[4] << 8) | magnetometer_buff[5])) / Mag_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA);

	magOffset_mT[0] =Offset_Kalibrierung(&data->x);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	330c      	adds	r3, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f855 	bl	800231c <Offset_Kalibrierung>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <GY_511_update+0x1c4>)
 8002278:	edc3 7a00 	vstr	s15, [r3]
//	magOffset_mT[1] =Offset_Kalibrierung(&data->y);
//	magOffset_mT[2] =Offset_Kalibrierung(&data->z);
	float yawAngle = atan2f(data->y, data->x) * 180.0f / M_PI;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	ed93 7a03 	vldr	s14, [r3, #12]
 8002288:	eef0 0a47 	vmov.f32	s1, s14
 800228c:	eeb0 0a67 	vmov.f32	s0, s15
 8002290:	f007 f8e4 	bl	800945c <atan2f>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
 8002298:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002310 <GY_511_update+0x1c8>
 800229c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a0:	ee17 0a90 	vmov	r0, s15
 80022a4:	f7fe f958 	bl	8000558 <__aeabi_f2d>
 80022a8:	a311      	add	r3, pc, #68	; (adr r3, 80022f0 <GY_511_update+0x1a8>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe fad5 	bl	800085c <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc9d 	bl	8000bf8 <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	60fb      	str	r3, [r7, #12]
//
	// Yaw-Winkel auf den Bereich von 0 bis 360 Grad anpassen
	if (yawAngle < 0)
 80022c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d507      	bpl.n	80022e0 <GY_511_update+0x198>
	{
		yawAngle += 360.0f;
 80022d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002314 <GY_511_update+0x1cc>
 80022d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022dc:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	yaw_offset_kompensiert = yawAngle;
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <GY_511_update+0x1d0>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e000      	b.n	80022ea <GY_511_update+0x1a2>
		return;
 80022e8:	bf00      	nop
}
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	54442d18 	.word	0x54442d18
 80022f4:	400921fb 	.word	0x400921fb
 80022f8:	2000024f 	.word	0x2000024f
 80022fc:	20000248 	.word	0x20000248
 8002300:	20000254 	.word	0x20000254
 8002304:	3dcccccd 	.word	0x3dcccccd
 8002308:	20000258 	.word	0x20000258
 800230c:	2000025c 	.word	0x2000025c
 8002310:	43340000 	.word	0x43340000
 8002314:	43b40000 	.word	0x43b40000
 8002318:	20000268 	.word	0x20000268

0800231c <Offset_Kalibrierung>:

float Offset_Kalibrierung(float *data)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	float Data_new = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
	static float Data_max;
	static float Data_min;
	float Offset;

	Data_new = *data;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

	if(Data_new > Data_max){
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <Offset_Kalibrierung+0x78>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ed97 7a03 	vldr	s14, [r7, #12]
 800233a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	dd02      	ble.n	800234a <Offset_Kalibrierung+0x2e>
		Data_max = Data_new;
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <Offset_Kalibrierung+0x78>)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6013      	str	r3, [r2, #0]
	}
	if(Data_new < Data_min){
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <Offset_Kalibrierung+0x7c>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ed97 7a03 	vldr	s14, [r7, #12]
 8002354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	d502      	bpl.n	8002364 <Offset_Kalibrierung+0x48>
		Data_min = Data_new;
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <Offset_Kalibrierung+0x7c>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6013      	str	r3, [r2, #0]
	}

	return Offset = (Data_max + Data_min)/2;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <Offset_Kalibrierung+0x78>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <Offset_Kalibrierung+0x7c>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237c:	edc7 7a02 	vstr	s15, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	ee07 3a90 	vmov	s15, r3
}
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	2000026c 	.word	0x2000026c
 8002398:	20000270 	.word	0x20000270
 800239c:	00000000 	.word	0x00000000

080023a0 <YAW_Init_Mag>:


float YAW_Init_Mag(lsm303MagData *data, int8_t *Offset)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
	static float yaw_sum;

	i2c_dma_read(GY511_addr,SR_REG_Mg,&DRDY,I2C_DATA_BUFF_LEN);
 80023aa:	2303      	movs	r3, #3
 80023ac:	4a66      	ldr	r2, [pc, #408]	; (8002548 <YAW_Init_Mag+0x1a8>)
 80023ae:	2109      	movs	r1, #9
 80023b0:	201e      	movs	r0, #30
 80023b2:	f000 fd31 	bl	8002e18 <i2c_dma_read>


		if(DRDY & 0x01)
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <YAW_Init_Mag+0x1a8>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <YAW_Init_Mag+0x2e>
		{
			i2c_dma_read(GY511_addr,GY_511_MAGNETO_OUT_X_H_M,(uint8_t *)magnetometer_buff,MAX_TRANSFER_LEN);
 80023c2:	2306      	movs	r3, #6
 80023c4:	4a61      	ldr	r2, [pc, #388]	; (800254c <YAW_Init_Mag+0x1ac>)
 80023c6:	2103      	movs	r1, #3
 80023c8:	201e      	movs	r0, #30
 80023ca:	f000 fd25 	bl	8002e18 <i2c_dma_read>
		{

		}


		data->Raw_Buffer16[0] = ((int16_t)((magnetometer_buff[0] << 8) | magnetometer_buff[1]))- (int16_t)Offset[0]-(int16_t)4;		//x-Wert
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <YAW_Init_Mag+0x1ac>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <YAW_Init_Mag+0x1ac>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21b      	sxth	r3, r3
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f993 3000 	ldrsb.w	r3, [r3]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b04      	subs	r3, #4
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	80da      	strh	r2, [r3, #6]
		data->Raw_Buffer16[1] = ((int16_t)((magnetometer_buff[2] << 8) | magnetometer_buff[3]))- (int16_t)Offset[2]+(int16_t)0;		//z-Wert
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <YAW_Init_Mag+0x1ac>)
 80023fa:	789b      	ldrb	r3, [r3, #2]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b21a      	sxth	r2, r3
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <YAW_Init_Mag+0x1ac>)
 8002402:	78db      	ldrb	r3, [r3, #3]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	b29a      	uxth	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3302      	adds	r3, #2
 8002410:	f993 3000 	ldrsb.w	r3, [r3]
 8002414:	b29b      	uxth	r3, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21a      	sxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	811a      	strh	r2, [r3, #8]
		data->Raw_Buffer16[2] = ((int16_t)((magnetometer_buff[4] << 8) | magnetometer_buff[5]))- (int16_t)Offset[1]-(int16_t)6;		//y-Wert
 8002420:	4b4a      	ldr	r3, [pc, #296]	; (800254c <YAW_Init_Mag+0x1ac>)
 8002422:	791b      	ldrb	r3, [r3, #4]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	4b48      	ldr	r3, [pc, #288]	; (800254c <YAW_Init_Mag+0x1ac>)
 800242a:	795b      	ldrb	r3, [r3, #5]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	b29a      	uxth	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	f993 3000 	ldrsb.w	r3, [r3]
 800243c:	b29b      	uxth	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b06      	subs	r3, #6
 8002444:	b29b      	uxth	r3, r3
 8002446:	b21a      	sxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	815a      	strh	r2, [r3, #10]



		data->x = ((float)data->Raw_Buffer16[0] / Mag_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <YAW_Init_Mag+0x1b0>)
 800245c:	ed93 7a00 	vldr	s14, [r3]
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002554 <YAW_Init_Mag+0x1b4>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	edc3 7a03 	vstr	s15, [r3, #12]
		data->z = ((float)data->Raw_Buffer16[1] / Mag_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <YAW_Init_Mag+0x1b8>)
 8002482:	ed93 7a00 	vldr	s14, [r3]
 8002486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002554 <YAW_Init_Mag+0x1b4>
 800248e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	edc3 7a05 	vstr	s15, [r3, #20]
		data->y = ((float)data->Raw_Buffer16[2] / Mag_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <YAW_Init_Mag+0x1b0>)
 80024a8:	ed93 7a00 	vldr	s14, [r3]
 80024ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002554 <YAW_Init_Mag+0x1b4>
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	edc3 7a04 	vstr	s15, [r3, #16]



		float yawAngle = (atan2f((float)data->Raw_Buffer16[2], (float)data->Raw_Buffer16[0]));// * 180.0f) / M_PI;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024d2:	ee07 3a10 	vmov	s14, r3
 80024d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024da:	eef0 0a47 	vmov.f32	s1, s14
 80024de:	eeb0 0a67 	vmov.f32	s0, s15
 80024e2:	f006 ffbb 	bl	800945c <atan2f>
 80024e6:	ed87 0a03 	vstr	s0, [r7, #12]

		// Yaw-Winkel auf den Bereich von 0 bis 360 Grad anpassen
		if (yawAngle < 0)
 80024ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d50f      	bpl.n	8002518 <YAW_Init_Mag+0x178>
		{
			yawAngle += 2*M_PI;
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7fe f82d 	bl	8000558 <__aeabi_f2d>
 80024fe:	a310      	add	r3, pc, #64	; (adr r3, 8002540 <YAW_Init_Mag+0x1a0>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fd feca 	bl	800029c <__adddf3>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fb72 	bl	8000bf8 <__aeabi_d2f>
 8002514:	4603      	mov	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]
		}

		yaw_sum += yawAngle;
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <YAW_Init_Mag+0x1bc>)
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <YAW_Init_Mag+0x1bc>)
 8002528:	edc3 7a00 	vstr	s15, [r3]

		return yaw_sum;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <YAW_Init_Mag+0x1bc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	ee07 3a90 	vmov	s15, r3
}
 8002534:	eeb0 0a67 	vmov.f32	s0, s15
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	54442d18 	.word	0x54442d18
 8002544:	401921fb 	.word	0x401921fb
 8002548:	2000024f 	.word	0x2000024f
 800254c:	20000248 	.word	0x20000248
 8002550:	20000254 	.word	0x20000254
 8002554:	3dcccccd 	.word	0x3dcccccd
 8002558:	20000258 	.word	0x20000258
 800255c:	20000274 	.word	0x20000274

08002560 <Offset_Calibration_gyro>:


}

void Offset_Calibration_gyro(Offset_value_gyro* data, float gyro_x, float gyro_y, float gyro_z, uint16_t cnt_gyro_measure_points, uint16_t Measurement_cnt)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6178      	str	r0, [r7, #20]
 8002568:	ed87 0a04 	vstr	s0, [r7, #16]
 800256c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002570:	ed87 1a02 	vstr	s2, [r7, #8]
 8002574:	460b      	mov	r3, r1
 8002576:	80fb      	strh	r3, [r7, #6]
 8002578:	4613      	mov	r3, r2
 800257a:	80bb      	strh	r3, [r7, #4]
	static uint8_t mode = 1;

	switch (mode){
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <Offset_Calibration_gyro+0x10c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d033      	beq.n	80025ec <Offset_Calibration_gyro+0x8c>
 8002584:	2b02      	cmp	r3, #2
 8002586:	dc6b      	bgt.n	8002660 <Offset_Calibration_gyro+0x100>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <Offset_Calibration_gyro+0x32>
 800258c:	2b01      	cmp	r3, #1
 800258e:	d004      	beq.n	800259a <Offset_Calibration_gyro+0x3a>

	default:;


	}
}
 8002590:	e066      	b.n	8002660 <Offset_Calibration_gyro+0x100>
			mode=1;
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <Offset_Calibration_gyro+0x10c>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
	break;
 8002598:	e062      	b.n	8002660 <Offset_Calibration_gyro+0x100>
			sum_x += gyro_x;
 800259a:	4b35      	ldr	r3, [pc, #212]	; (8002670 <Offset_Calibration_gyro+0x110>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <Offset_Calibration_gyro+0x110>)
 80025aa:	edc3 7a00 	vstr	s15, [r3]
			sum_y += gyro_y;
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <Offset_Calibration_gyro+0x114>)
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <Offset_Calibration_gyro+0x114>)
 80025be:	edc3 7a00 	vstr	s15, [r3]
			sum_z += gyro_z;
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <Offset_Calibration_gyro+0x118>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <Offset_Calibration_gyro+0x118>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
			cnt_gyro_measure_points++;
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	3301      	adds	r3, #1
 80025da:	80fb      	strh	r3, [r7, #6]
		if(cnt_gyro_measure_points == Measurement_cnt)
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d13c      	bne.n	800265e <Offset_Calibration_gyro+0xfe>
				mode = 2;
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <Offset_Calibration_gyro+0x10c>)
 80025e6:	2202      	movs	r2, #2
 80025e8:	701a      	strb	r2, [r3, #0]
	break;
 80025ea:	e038      	b.n	800265e <Offset_Calibration_gyro+0xfe>
		 data->x_offset_gyro = sum_x/Measurement_cnt;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <Offset_Calibration_gyro+0x110>)
 80025ee:	edd3 6a00 	vldr	s13, [r3]
 80025f2:	88bb      	ldrh	r3, [r7, #4]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	edc3 7a00 	vstr	s15, [r3]
		 data->y_offset_gyro = sum_y/Measurement_cnt;
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <Offset_Calibration_gyro+0x114>)
 8002608:	edd3 6a00 	vldr	s13, [r3]
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	edc3 7a01 	vstr	s15, [r3, #4]
		 data->z_offset_gyro = sum_z/Measurement_cnt;
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <Offset_Calibration_gyro+0x118>)
 8002622:	edd3 6a00 	vldr	s13, [r3]
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	edc3 7a02 	vstr	s15, [r3, #8]
		 cnt_gyro_measure_points=0;
 800263a:	2300      	movs	r3, #0
 800263c:	80fb      	strh	r3, [r7, #6]
		 mode = 0;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <Offset_Calibration_gyro+0x10c>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		 sum_x=0;
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <Offset_Calibration_gyro+0x110>)
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
		 sum_y=0;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <Offset_Calibration_gyro+0x114>)
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
		 sum_z=0;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <Offset_Calibration_gyro+0x118>)
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
	break;
 800265c:	e000      	b.n	8002660 <Offset_Calibration_gyro+0x100>
	break;
 800265e:	bf00      	nop
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	20000004 	.word	0x20000004
 8002670:	20000278 	.word	0x20000278
 8002674:	2000027c 	.word	0x2000027c
 8002678:	20000280 	.word	0x20000280
 800267c:	00000000 	.word	0x00000000

08002680 <Offset_Calibration_acc>:

void Offset_Calibration_acc(values_acc* data, Offset_Scale_value_acc* solution, float acc_x, float acc_y, float acc_z, uint16_t number_measure_points)
{
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6178      	str	r0, [r7, #20]
 8002688:	6139      	str	r1, [r7, #16]
 800268a:	ed87 0a03 	vstr	s0, [r7, #12]
 800268e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002692:	ed87 1a01 	vstr	s2, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	807b      	strh	r3, [r7, #2]
	switch(start)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	f000 80ca 	beq.w	8002838 <Offset_Calibration_acc+0x1b8>
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f300 81b5 	bgt.w	8002a14 <Offset_Calibration_acc+0x394>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <Offset_Calibration_acc+0x34>
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00e      	beq.n	80026d0 <Offset_Calibration_acc+0x50>
			break;

		default:

			//do something
			break;
 80026b2:	e1af      	b.n	8002a14 <Offset_Calibration_acc+0x394>
			if(!(GPIOC->IDR & BTN_PIN))
 80026b4:	4b5d      	ldr	r3, [pc, #372]	; (800282c <Offset_Calibration_acc+0x1ac>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 81ab 	bne.w	8002a18 <Offset_Calibration_acc+0x398>
				start = 1;
 80026c2:	4b59      	ldr	r3, [pc, #356]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
				cnt_acc_measure_points=0;
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
			break;
 80026ce:	e1a3      	b.n	8002a18 <Offset_Calibration_acc+0x398>
			cnt_acc_measure_points++;
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 80026da:	801a      	strh	r2, [r3, #0]
					switch(axis)
 80026dc:	4b55      	ldr	r3, [pc, #340]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	f200 8093 	bhi.w	800280c <Offset_Calibration_acc+0x18c>
 80026e6:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <Offset_Calibration_acc+0x6c>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	08002705 	.word	0x08002705
 80026f0:	08002731 	.word	0x08002731
 80026f4:	0800275d 	.word	0x0800275d
 80026f8:	08002789 	.word	0x08002789
 80026fc:	080027b5 	.word	0x080027b5
 8002700:	080027e1 	.word	0x080027e1
								data->x1_data += acc_x ;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	edd7 7a03 	vldr	s15, [r7, #12]
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	edc3 7a00 	vstr	s15, [r3]
								if(cnt_acc_measure_points == number_measure_points)
 8002718:	4b45      	ldr	r3, [pc, #276]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	887a      	ldrh	r2, [r7, #2]
 800271e:	429a      	cmp	r2, r3
 8002720:	d176      	bne.n	8002810 <Offset_Calibration_acc+0x190>
									axis = 1;
 8002722:	4b44      	ldr	r3, [pc, #272]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
									start = 0;
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
								break;
 800272e:	e06f      	b.n	8002810 <Offset_Calibration_acc+0x190>
								data->x2_data += acc_x ;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	ed93 7a01 	vldr	s14, [r3, #4]
 8002736:	edd7 7a03 	vldr	s15, [r7, #12]
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	edc3 7a01 	vstr	s15, [r3, #4]
								if(cnt_acc_measure_points == number_measure_points)
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	429a      	cmp	r2, r3
 800274c:	d162      	bne.n	8002814 <Offset_Calibration_acc+0x194>
									axis = 2;
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
									start = 0;
 8002754:	4b34      	ldr	r3, [pc, #208]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
								break;
 800275a:	e05b      	b.n	8002814 <Offset_Calibration_acc+0x194>
								data->y1_data += acc_y ;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	edc3 7a02 	vstr	s15, [r3, #8]
								if(cnt_acc_measure_points == number_measure_points)
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	429a      	cmp	r2, r3
 8002778:	d14e      	bne.n	8002818 <Offset_Calibration_acc+0x198>
									axis = 3;
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 800277c:	2203      	movs	r2, #3
 800277e:	701a      	strb	r2, [r3, #0]
									start = 0;
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
								break;
 8002786:	e047      	b.n	8002818 <Offset_Calibration_acc+0x198>
								data->y2_data += acc_y ;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	ed93 7a03 	vldr	s14, [r3, #12]
 800278e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	edc3 7a03 	vstr	s15, [r3, #12]
								if(cnt_acc_measure_points == number_measure_points)
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d13a      	bne.n	800281c <Offset_Calibration_acc+0x19c>
									axis = 4;
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 80027a8:	2204      	movs	r2, #4
 80027aa:	701a      	strb	r2, [r3, #0]
									start = 0;
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
								break;
 80027b2:	e033      	b.n	800281c <Offset_Calibration_acc+0x19c>
								data->z1_data += acc_z ;;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80027ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	edc3 7a04 	vstr	s15, [r3, #16]
								if(cnt_acc_measure_points == number_measure_points)
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d126      	bne.n	8002820 <Offset_Calibration_acc+0x1a0>
									axis = 5;
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 80027d4:	2205      	movs	r2, #5
 80027d6:	701a      	strb	r2, [r3, #0]
									start = 0;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
								break;
 80027de:	e01f      	b.n	8002820 <Offset_Calibration_acc+0x1a0>
								data->z2_data += acc_z ;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80027e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	edc3 7a05 	vstr	s15, [r3, #20]
								if(cnt_acc_measure_points == number_measure_points)
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <Offset_Calibration_acc+0x1b0>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d112      	bne.n	8002824 <Offset_Calibration_acc+0x1a4>
									axis = 0;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <Offset_Calibration_acc+0x1b4>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
									start = 2;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <Offset_Calibration_acc+0x1a8>)
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
								break;
 800280a:	e00b      	b.n	8002824 <Offset_Calibration_acc+0x1a4>
								break;
 800280c:	bf00      	nop
 800280e:	e104      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 8002810:	bf00      	nop
 8002812:	e102      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 8002814:	bf00      	nop
 8002816:	e100      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 8002818:	bf00      	nop
 800281a:	e0fe      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 800281c:	bf00      	nop
 800281e:	e0fc      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 8002820:	bf00      	nop
 8002822:	e0fa      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
								break;
 8002824:	bf00      	nop
			break;
 8002826:	e0f8      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
 8002828:	20000284 	.word	0x20000284
 800282c:	40020800 	.word	0x40020800
 8002830:	20000286 	.word	0x20000286
 8002834:	20000285 	.word	0x20000285
			solution->x_offset_acc = (data->x1_data + data->x2_data)/(2*number_measure_points);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	edd3 7a01 	vldr	s15, [r3, #4]
 8002844:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	edc3 7a00 	vstr	s15, [r3]
			solution->y_offset_acc = (data->y1_data + data->y2_data)/(2*number_measure_points);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	ed93 7a02 	vldr	s14, [r3, #8]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	edd3 7a03 	vldr	s15, [r3, #12]
 800286a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800287a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	edc3 7a02 	vstr	s15, [r3, #8]
			solution->z_offset_acc = (data->z1_data + data->z2_data)/(2*number_measure_points);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	ed93 7a04 	vldr	s14, [r3, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002890:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	edc3 7a04 	vstr	s15, [r3, #16]
			solution->x_scale_acc = (fabs(data->x1_data) + fabs(data->x2_data))/(2*number_measure_points)/9.81f;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eef0 7ae7 	vabs.f32	s15, s15
 80028b4:	ee17 0a90 	vmov	r0, s15
 80028b8:	f7fd fe4e 	bl	8000558 <__aeabi_f2d>
 80028bc:	4604      	mov	r4, r0
 80028be:	460d      	mov	r5, r1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028c6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ca:	ee17 0a90 	vmov	r0, s15
 80028ce:	f7fd fe43 	bl	8000558 <__aeabi_f2d>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fcdf 	bl	800029c <__adddf3>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe22 	bl	8000534 <__aeabi_i2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd ffb0 	bl	800085c <__aeabi_ddiv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	a349      	add	r3, pc, #292	; (adr r3, 8002a2c <Offset_Calibration_acc+0x3ac>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd ffa7 	bl	800085c <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f96f 	bl	8000bf8 <__aeabi_d2f>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	605a      	str	r2, [r3, #4]
			solution->y_scale_acc = (fabs(data->y1_data) + fabs(data->y2_data))/(2*number_measure_points)/9.81f;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	edd3 7a02 	vldr	s15, [r3, #8]
 8002926:	eef0 7ae7 	vabs.f32	s15, s15
 800292a:	ee17 0a90 	vmov	r0, s15
 800292e:	f7fd fe13 	bl	8000558 <__aeabi_f2d>
 8002932:	4604      	mov	r4, r0
 8002934:	460d      	mov	r5, r1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	edd3 7a03 	vldr	s15, [r3, #12]
 800293c:	eef0 7ae7 	vabs.f32	s15, s15
 8002940:	ee17 0a90 	vmov	r0, s15
 8002944:	f7fd fe08 	bl	8000558 <__aeabi_f2d>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4620      	mov	r0, r4
 800294e:	4629      	mov	r1, r5
 8002950:	f7fd fca4 	bl	800029c <__adddf3>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4614      	mov	r4, r2
 800295a:	461d      	mov	r5, r3
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fde7 	bl	8000534 <__aeabi_i2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4620      	mov	r0, r4
 800296c:	4629      	mov	r1, r5
 800296e:	f7fd ff75 	bl	800085c <__aeabi_ddiv>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	a32c      	add	r3, pc, #176	; (adr r3, 8002a2c <Offset_Calibration_acc+0x3ac>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd ff6c 	bl	800085c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f934 	bl	8000bf8 <__aeabi_d2f>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	60da      	str	r2, [r3, #12]
			solution->z_scale_acc = (fabs(data->z1_data) + fabs(data->z2_data))/(2*number_measure_points)/9.81f;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	edd3 7a04 	vldr	s15, [r3, #16]
 800299c:	eef0 7ae7 	vabs.f32	s15, s15
 80029a0:	ee17 0a90 	vmov	r0, s15
 80029a4:	f7fd fdd8 	bl	8000558 <__aeabi_f2d>
 80029a8:	4604      	mov	r4, r0
 80029aa:	460d      	mov	r5, r1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80029b2:	eef0 7ae7 	vabs.f32	s15, s15
 80029b6:	ee17 0a90 	vmov	r0, s15
 80029ba:	f7fd fdcd 	bl	8000558 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4620      	mov	r0, r4
 80029c4:	4629      	mov	r1, r5
 80029c6:	f7fd fc69 	bl	800029c <__adddf3>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4614      	mov	r4, r2
 80029d0:	461d      	mov	r5, r3
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdac 	bl	8000534 <__aeabi_i2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd ff3a 	bl	800085c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	a30e      	add	r3, pc, #56	; (adr r3, 8002a2c <Offset_Calibration_acc+0x3ac>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fd ff31 	bl	800085c <__aeabi_ddiv>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f8f9 	bl	8000bf8 <__aeabi_d2f>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
			start =0;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <Offset_Calibration_acc+0x3a8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
			break;
 8002a12:	e002      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
			break;
 8002a14:	bf00      	nop
 8002a16:	e000      	b.n	8002a1a <Offset_Calibration_acc+0x39a>
			break;
 8002a18:	bf00      	nop
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bdb0      	pop	{r4, r5, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	f3af 8000 	nop.w
 8002a28:	20000284 	.word	0x20000284
 8002a2c:	60000000 	.word	0x60000000
 8002a30:	40239eb8 	.word	0x40239eb8

08002a34 <BTN_init>:

void BTN_init(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	/*Set Peripheral bus AHB1*/
	RCC->AHB1ENR |= GPIOCEN;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <BTN_init+0x34>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <BTN_init+0x34>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set Pin13 as Input*/
	GPIOC->MODER &=~(1U<<26);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <BTN_init+0x38>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <BTN_init+0x38>)
 8002a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <BTN_init+0x38>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <BTN_init+0x38>)
 8002a56:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002a5a:	6013      	str	r3, [r2, #0]
//	GPIOC->OTYPER |= (1U<<13);
//
//	/*Set Pull-Down*/
//	GPIOC->PUPDR &=~(1U<<26);
//	GPIOC->PUPDR |= (1U<<27);
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020800 	.word	0x40020800

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <i2c1_init>:

uint8_t g_rx__cmplt;
uint8_t g_tx__cmplt;

void i2c1_init(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
	/********I2C GPIO Configuration*************/
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <i2c1_init+0x138>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <i2c1_init+0x138>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB8 and PB9 mode to alternate function mode*/
	/*PB8*/
	GPIOB->MODER &= ~(1U<<16);
 8002abc:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <i2c1_init+0x13c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a49      	ldr	r2, [pc, #292]	; (8002be8 <i2c1_init+0x13c>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 8002ac8:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <i2c1_init+0x13c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <i2c1_init+0x13c>)
 8002ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad2:	6013      	str	r3, [r2, #0]


	/*PB9*/
	GPIOB->MODER &= ~(1U<<18);
 8002ad4:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <i2c1_init+0x13c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <i2c1_init+0x13c>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <i2c1_init+0x13c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <i2c1_init+0x13c>)
 8002ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aea:	6013      	str	r3, [r2, #0]


	/*Set PB8 and PB9 alternate function type to I2C1 (AF4)  */
	/*PB8*/
	GPIOB->AFR[1] &=~(1U<<0);
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <i2c1_init+0x13c>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	4a3d      	ldr	r2, [pc, #244]	; (8002be8 <i2c1_init+0x13c>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <i2c1_init+0x13c>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <i2c1_init+0x13c>)
 8002afe:	f023 0302 	bic.w	r3, r3, #2
 8002b02:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(1U<<2);
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <i2c1_init+0x13c>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <i2c1_init+0x13c>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <i2c1_init+0x13c>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <i2c1_init+0x13c>)
 8002b16:	f023 0308 	bic.w	r3, r3, #8
 8002b1a:	6253      	str	r3, [r2, #36]	; 0x24

	/*PB9*/
	GPIOB->AFR[1] &=~(1U<<4);
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <i2c1_init+0x13c>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <i2c1_init+0x13c>)
 8002b22:	f023 0310 	bic.w	r3, r3, #16
 8002b26:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 8002b28:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <i2c1_init+0x13c>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <i2c1_init+0x13c>)
 8002b2e:	f023 0320 	bic.w	r3, r3, #32
 8002b32:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(1U<<6);
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <i2c1_init+0x13c>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <i2c1_init+0x13c>)
 8002b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <i2c1_init+0x13c>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <i2c1_init+0x13c>)
 8002b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4a:	6253      	str	r3, [r2, #36]	; 0x24

	/*SCL and SDA respectively*/
	/*Set output type of PB8 and PB9 to open-drain*/
	GPIOB->OTYPER |=(1U<<8);
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <i2c1_init+0x13c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <i2c1_init+0x13c>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<9);
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <i2c1_init+0x13c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <i2c1_init+0x13c>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	6053      	str	r3, [r2, #4]

	/********I2C  Configuration*************/
	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <i2c1_init+0x138>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <i2c1_init+0x138>)
 8002b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Reset I2C module*/
	I2C1->CR1 = CR1_SWRST;
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <i2c1_init+0x140>)
 8002b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b76:	601a      	str	r2, [r3, #0]


	/*Release the reset*/
	I2C1->CR1 &= ~CR1_SWRST;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <i2c1_init+0x140>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <i2c1_init+0x140>)
 8002b7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b82:	6013      	str	r3, [r2, #0]

	/*Enable clock stretching*/
	I2C1->CR1 &=~CR1_NOSTRETCH;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <i2c1_init+0x140>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <i2c1_init+0x140>)
 8002b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8e:	6013      	str	r3, [r2, #0]

	/*Disable General Call*/
	I2C1->CR1 &=~CR1_ENGC;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <i2c1_init+0x140>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <i2c1_init+0x140>)
 8002b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9a:	6013      	str	r3, [r2, #0]

	/*Select to use DMA*/
	I2C1->CR2 |=CR2_DMAEN;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <i2c1_init+0x140>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a12      	ldr	r2, [pc, #72]	; (8002bec <i2c1_init+0x140>)
 8002ba2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ba6:	6053      	str	r3, [r2, #4]

	/*Enable LAST*/
	I2C1->CR2 |=CR2_LAST;
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <i2c1_init+0x140>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <i2c1_init+0x140>)
 8002bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb2:	6053      	str	r3, [r2, #4]

	/*Set source clock speed*/
	I2C1->CR2 |=PERIPH_CLK;
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <i2c1_init+0x140>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <i2c1_init+0x140>)
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	6053      	str	r3, [r2, #4]

	 /*Set I2C to standard mode, 100kHz clock*/
	I2C1->CCR = I2C_100KHZ; /*Based on Computation*/
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <i2c1_init+0x140>)
 8002bc2:	2250      	movs	r2, #80	; 0x50
 8002bc4:	61da      	str	r2, [r3, #28]

	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <i2c1_init+0x140>)
 8002bc8:	2211      	movs	r2, #17
 8002bca:	621a      	str	r2, [r3, #32]

	/*Enable I2C module*/
	I2C1->CR1 |=CR1_PE;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <i2c1_init+0x140>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a06      	ldr	r2, [pc, #24]	; (8002bec <i2c1_init+0x140>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]

}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40005400 	.word	0x40005400

08002bf0 <dma1_stream6_i2c1_tx_init>:


void dma1_stream6_i2c1_tx_init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	/*Enable clock access DMA*/
	RCC->AHB1ENR |=DMA1EN;
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <dma1_stream6_i2c1_tx_init+0x84>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <dma1_stream6_i2c1_tx_init+0x84>)
 8002bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bfe:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA stream*/
	DMA1_Stream6->CR = 0;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

	/*Wait till DMA Stream is disabled*/
	while((DMA1_Stream6->CR & DMA_SCR_EN)){}
 8002c06:	bf00      	nop
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <dma1_stream6_i2c1_tx_init+0x18>


	/*Select DMA channel : CH1*/
	DMA1_Stream6->CR |=(1U<<25);
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &=~(1U<<26);
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c2a:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &=~(1U<<27);
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c32:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002c36:	6013      	str	r3, [r2, #0]

	/*Enable Mem Addr increment*/
	DMA1_Stream6->CR |=DMA_SCR_MINC;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	6013      	str	r3, [r2, #0]

	/*Enable Transfer Complete Interrupt*/
	DMA1_Stream6->CR |=DMA_SCR_TCIE;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	6013      	str	r3, [r2, #0]

	/*Set Transfer direction :  Mem to Periph*/
	DMA1_Stream6->CR |=(1U<<6);
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5a:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &=~(1U<<7);
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <dma1_stream6_i2c1_tx_init+0x88>)
 8002c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c66:	6013      	str	r3, [r2, #0]

	/*Enable Stream Interrupt in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c68:	2011      	movs	r0, #17
 8002c6a:	f7ff ff01 	bl	8002a70 <__NVIC_EnableIRQ>

}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	400260a0 	.word	0x400260a0

08002c7c <dma1_stream5_i2c1_rx_init>:

void dma1_stream5_i2c1_rx_init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	/*Enable clock access DMA*/
	RCC->AHB1ENR |=DMA1EN;
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <dma1_stream5_i2c1_rx_init+0x84>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <dma1_stream5_i2c1_rx_init+0x84>)
 8002c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA stream*/
	DMA1_Stream5->CR = 0;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

	/*Wait till DMA Stream is disabled*/
	while((DMA1_Stream5->CR & DMA_SCR_EN)){}
 8002c92:	bf00      	nop
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f9      	bne.n	8002c94 <dma1_stream5_i2c1_rx_init+0x18>

	/*Select DMA channel : CH1*/
	DMA1_Stream5->CR |=(1U<<25);
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002caa:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &=~(1U<<26);
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb6:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &=~(1U<<27);
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cbe:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002cc2:	6013      	str	r3, [r2, #0]

	/*Enable Mem Addr increment*/
	DMA1_Stream5->CR |=DMA_SCR_MINC;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	6013      	str	r3, [r2, #0]

	/*Enable Transfer Complete Interrupt*/
	DMA1_Stream5->CR |=DMA_SCR_TCIE;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6013      	str	r3, [r2, #0]

	/*Set Transfer direction :   Periph to Mem*/
	DMA1_Stream5->CR &=~(1U<<6);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &=~(1U<<7);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <dma1_stream5_i2c1_rx_init+0x88>)
 8002cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf2:	6013      	str	r3, [r2, #0]

	/*Enable Stream Interrupt in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	f7ff febb 	bl	8002a70 <__NVIC_EnableIRQ>

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40026088 	.word	0x40026088

08002d08 <dma1_stream6_i2c1_transfer>:

void dma1_stream6_i2c1_transfer(uint8_t *msg_to_send, uint32_t msg_len)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	if( NULL != msg_to_send )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <dma1_stream6_i2c1_transfer+0x36>
	{

		/*Clear interrupt flags*/
		DMA1->HIFCR = HIFCR_CTCIF6;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <dma1_stream6_i2c1_transfer+0x44>)
 8002d1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d1e:	60da      	str	r2, [r3, #12]

		/*Set Peripheral address*/
		DMA1_Stream6->PAR =	(uint32_t)(&(I2C1->DR));
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <dma1_stream6_i2c1_transfer+0x48>)
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <dma1_stream6_i2c1_transfer+0x4c>)
 8002d24:	609a      	str	r2, [r3, #8]

		/*Set Memory address*/
		DMA1_Stream6->M0AR = (uint32_t)msg_to_send;
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <dma1_stream6_i2c1_transfer+0x48>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60d3      	str	r3, [r2, #12]

		/*Set transfer length*/
		DMA1_Stream6->NDTR = msg_len;
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <dma1_stream6_i2c1_transfer+0x48>)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6053      	str	r3, [r2, #4]

		/*Enable the DMA Stream*/
		DMA1_Stream6->CR |= DMA_SCR_EN;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <dma1_stream6_i2c1_transfer+0x48>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <dma1_stream6_i2c1_transfer+0x48>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		//Do something...
	}
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40026000 	.word	0x40026000
 8002d50:	400260a0 	.word	0x400260a0
 8002d54:	40005410 	.word	0x40005410

08002d58 <dma1_stream5_i2c1_receive>:


void dma1_stream5_i2c1_receive(uint8_t * received_msg, uint32_t msg_len)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	if( NULL != received_msg )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <dma1_stream5_i2c1_receive+0x36>
	{

		/*Clear interrupt flags*/
		DMA1->HIFCR = HIFCR_CTCIF5;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <dma1_stream5_i2c1_receive+0x44>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	60da      	str	r2, [r3, #12]

		/*Set Peripheral address*/
		DMA1_Stream5->PAR =	(uint32_t)(&(I2C1->DR));
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <dma1_stream5_i2c1_receive+0x48>)
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <dma1_stream5_i2c1_receive+0x4c>)
 8002d74:	609a      	str	r2, [r3, #8]

		/*Set Memory address*/
		DMA1_Stream5->M0AR = (uint32_t)received_msg;
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <dma1_stream5_i2c1_receive+0x48>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60d3      	str	r3, [r2, #12]

		/*Set transfer length*/
		DMA1_Stream5->NDTR = msg_len;
 8002d7c:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <dma1_stream5_i2c1_receive+0x48>)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6053      	str	r3, [r2, #4]

		/*Enable the DMA Stream*/
		DMA1_Stream5->CR |= DMA_SCR_EN;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <dma1_stream5_i2c1_receive+0x48>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <dma1_stream5_i2c1_receive+0x48>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]

	else
	{
		//Do something...
	}
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40026000 	.word	0x40026000
 8002da0:	40026088 	.word	0x40026088
 8002da4:	40005410 	.word	0x40005410

08002da8 <i2c_dma_write>:


void i2c_dma_write(uint8_t slave_addr, uint8_t *p_write_buff, uint16_t num_of_bytes)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
 8002db4:	4613      	mov	r3, r2
 8002db6:	80bb      	strh	r3, [r7, #4]
	/*Wait while BUSY flag is set*/
	while((I2C1->SR2 & SR2_BUSY)){}
 8002db8:	bf00      	nop
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <i2c_dma_write+0x6c>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <i2c_dma_write+0x12>

	/*Generate START condition*/
	I2C1->CR1 |= CR1_START;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <i2c_dma_write+0x6c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <i2c_dma_write+0x6c>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

	/*Wait until the SB flag  is set*/
	while(!(I2C1->SR1 & SR1_SB)){}
 8002dd2:	bf00      	nop
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <i2c_dma_write+0x6c>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f9      	beq.n	8002dd4 <i2c_dma_write+0x2c>

	/*Read SR1*/
	 I2C1->SR1;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <i2c_dma_write+0x6c>)
 8002de2:	695b      	ldr	r3, [r3, #20]

	/*Send Slave Addr "Write"*/
	 I2C1->DR = (slave_addr<<1|0);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	005a      	lsls	r2, r3, #1
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <i2c_dma_write+0x6c>)
 8002dea:	611a      	str	r2, [r3, #16]

	/*Wait for Addr Flag to be set*/
	 while(!((I2C1->SR1)& SR1_ADDR)){}
 8002dec:	bf00      	nop
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <i2c_dma_write+0x6c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f9      	beq.n	8002dee <i2c_dma_write+0x46>

	/*Call DMA transfer function*/
	 dma1_stream6_i2c1_transfer(p_write_buff,num_of_bytes);
 8002dfa:	88bb      	ldrh	r3, [r7, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f7ff ff82 	bl	8002d08 <dma1_stream6_i2c1_transfer>

	/*Read SR1*/
	 I2C1->SR1;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <i2c_dma_write+0x6c>)
 8002e06:	695b      	ldr	r3, [r3, #20]

	/*Read SR2*/
	 I2C1->SR2;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <i2c_dma_write+0x6c>)
 8002e0a:	699b      	ldr	r3, [r3, #24]


}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40005400 	.word	0x40005400

08002e18 <i2c_dma_read>:

void i2c_dma_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t *p_read_buff, uint16_t num_of_bytes)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	603a      	str	r2, [r7, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	460b      	mov	r3, r1
 8002e28:	71bb      	strb	r3, [r7, #6]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80bb      	strh	r3, [r7, #4]
	/*Wait while BUSY flag is set*/
	while((I2C1->SR2 & SR2_BUSY)){}
 8002e2e:	bf00      	nop
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f9      	bne.n	8002e30 <i2c_dma_read+0x18>

	/*Generate START condition*/
	I2C1->CR1 |= CR1_START;
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]

	/*Wait until the SB flag  is set*/
	while(!(I2C1->SR1 & SR1_SB)){}
 8002e48:	bf00      	nop
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f9      	beq.n	8002e4a <i2c_dma_read+0x32>

	/*Read SR1*/
	 I2C1->SR1;
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e58:	695b      	ldr	r3, [r3, #20]

	/*Send Slave Addr "Write"*/
	 I2C1->DR = (slave_addr<<1|0);
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	005a      	lsls	r2, r3, #1
 8002e5e:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e60:	611a      	str	r2, [r3, #16]

	/*Wait for Addr Flag to be set*/
	 while(!((I2C1->SR1)& SR1_ADDR)){}
 8002e62:	bf00      	nop
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f9      	beq.n	8002e64 <i2c_dma_read+0x4c>

	/*Read SR1*/
	 I2C1->SR1;
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e72:	695b      	ldr	r3, [r3, #20]

    /*Read SR2*/
	 I2C1->SR2;
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e76:	699b      	ldr	r3, [r3, #24]

	/*Wait for TXE flag to be set*/
	while(!(I2C1->SR1 & SR1_TXE)){}
 8002e78:	bf00      	nop
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f9      	beq.n	8002e7a <i2c_dma_read+0x62>

	/*Send RegAddr*/
	if(num_of_bytes >= 2)
 8002e86:	88bb      	ldrh	r3, [r7, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d909      	bls.n	8002ea0 <i2c_dma_read+0x88>
	{
		/*Enable ACK*/
		I2C1->CR1 |=CR1_ACK;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e96:	6013      	str	r3, [r2, #0]

		/*Send register address to read*/
		I2C1->DR = reg_addr;
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <i2c_dma_read+0xfc>)
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	6113      	str	r3, [r2, #16]
 8002e9e:	e008      	b.n	8002eb2 <i2c_dma_read+0x9a>

	}
	else
	{
		/*Disable ACK*/
		I2C1->CR1 &=~CR1_ACK;
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eaa:	6013      	str	r3, [r2, #0]

		/*Send register address to read*/
		I2C1->DR = reg_addr;
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <i2c_dma_read+0xfc>)
 8002eae:	79bb      	ldrb	r3, [r7, #6]
 8002eb0:	6113      	str	r3, [r2, #16]
	}

	/*Wait for BTF flag*/
	while(!(I2C1->SR1 & SR1_BTF)){}
 8002eb2:	bf00      	nop
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <i2c_dma_read+0xfc>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f9      	beq.n	8002eb4 <i2c_dma_read+0x9c>

	/*Generate RESTART*/
	I2C1->CR1 |= CR1_START;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]

	/*Wait until the SB flag is set*/
	while(!(I2C1->SR1 & SR1_SB)){}
 8002ecc:	bf00      	nop
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f9      	beq.n	8002ece <i2c_dma_read+0xb6>

	/*Read SR1*/
	I2C1->SR1;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <i2c_dma_read+0xfc>)
 8002edc:	695b      	ldr	r3, [r3, #20]

	/*Send Slave Addr with "read"*/
	 I2C1->DR = (slave_addr<<1|1);
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <i2c_dma_read+0xfc>)
 8002ee8:	611a      	str	r2, [r3, #16]

	/*Wait for the Addr flag to be set*/
	 while(!((I2C1->SR1)& SR1_ADDR)){}
 8002eea:	bf00      	nop
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <i2c_dma_read+0xfc>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f9      	beq.n	8002eec <i2c_dma_read+0xd4>

	/*Call DMA receive function*/
	 dma1_stream5_i2c1_receive(p_read_buff,num_of_bytes);
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f7ff ff2b 	bl	8002d58 <dma1_stream5_i2c1_receive>

	/*Read SR1*/
	I2C1->SR1;
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <i2c_dma_read+0xfc>)
 8002f04:	695b      	ldr	r3, [r3, #20]

	/*Read SR2*/
	I2C1->SR2;
 8002f06:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <i2c_dma_read+0xfc>)
 8002f08:	699b      	ldr	r3, [r3, #24]

}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40005400 	.word	0x40005400

08002f18 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF6)
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <DMA1_Stream6_IRQHandler+0x38>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <DMA1_Stream6_IRQHandler+0x2e>
	{
		//do_ssomething
		g_tx__cmplt = 1;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <DMA1_Stream6_IRQHandler+0x3c>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]

		/*Generate STOP condition*/
		 I2C1->CR1 |= CR1_STOP;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <DMA1_Stream6_IRQHandler+0x40>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <DMA1_Stream6_IRQHandler+0x40>)
 8002f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f38:	6013      	str	r3, [r2, #0]

		/*Clear the flag*/
		DMA1->HIFCR |= HIFCR_CTCIF6;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <DMA1_Stream6_IRQHandler+0x38>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <DMA1_Stream6_IRQHandler+0x38>)
 8002f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f44:	60d3      	str	r3, [r2, #12]
	}
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40026000 	.word	0x40026000
 8002f54:	20000289 	.word	0x20000289
 8002f58:	40005400 	.word	0x40005400

08002f5c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF5)
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <DMA1_Stream5_IRQHandler+0x38>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <DMA1_Stream5_IRQHandler+0x2e>
	{

		g_rx__cmplt = 1;
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <DMA1_Stream5_IRQHandler+0x3c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]

		//do_ssomething

		/*Generate STOP condition*/
		I2C1->CR1 |= CR1_STOP;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <DMA1_Stream5_IRQHandler+0x40>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <DMA1_Stream5_IRQHandler+0x40>)
 8002f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7c:	6013      	str	r3, [r2, #0]

		/*Clear the flag*/
		DMA1->HIFCR |= HIFCR_CTCIF5;
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <DMA1_Stream5_IRQHandler+0x38>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <DMA1_Stream5_IRQHandler+0x38>)
 8002f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f88:	60d3      	str	r3, [r2, #12]

	}
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40026000 	.word	0x40026000
 8002f98:	20000288 	.word	0x20000288
 8002f9c:	40005400 	.word	0x40005400

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	; (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <GPIO_PA8_Init>:
int8_t Magneto_offset[3]={0, 0, 0};
uint8_t r = 0;

float yaw_raw = 0;

void GPIO_PA8_Init(void){
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

	/*1.Enable clk to PORT A*/
	RCC->AHB1ENR |= 1U<<0;
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <GPIO_PA8_Init+0x3c>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <GPIO_PA8_Init+0x3c>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PIN to Output*/
	GPIOA->MODER |= (1U<<16);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <GPIO_PA8_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <GPIO_PA8_Init+0x40>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<17);
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <GPIO_PA8_Init+0x40>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <GPIO_PA8_Init+0x40>)
 8003016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800301a:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR = (1U<<24);		//Reset PA8
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <GPIO_PA8_Init+0x40>)
 800301e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003022:	619a      	str	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40020000 	.word	0x40020000

08003038 <main>:


int main(void)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
	GPIO_PA8_Init();
 800303e:	f7ff ffd9 	bl	8002ff4 <GPIO_PA8_Init>

	/*create start conditions for the Kalman-Filter*/
	float P[2]={KALMAN_P_INIT, KALMAN_P_INIT};			//Kovarianzmatrix
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <main+0xec>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <main+0xec>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61fb      	str	r3, [r7, #28]
	float Q[2]={KALMAN_Q, KALMAN_Q}; 					//Kovarianzmatrix Prozessrauschen
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <main+0xf0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <main+0xf0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]
	float R[3]={KALMAN_R,KALMAN_R,KALMAN_R};			//Kovarianzmatrix Messrauschen
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <main+0xf4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <main+0xf4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <main+0xf4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
	/*create start conditions for the Kalman-Filter*/
//	float P_Yaw[2]={KALMAN_P_INIT, KALMAN_P_INIT};			//Kovarianzmatrix
//	float Q_Yaw[2]={KALMAN_Q, KALMAN_Q, KALMAN_Q}; 			//Kovarianzmatrix Prozessrauschen
//	float R_Yaw[3]={KALMAN_R,KALMAN_R,KALMAN_R};			//Kovarianzmatrix Messrauschen

	EKF_Init(&Start_Conditions, P, Q, R);
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	f107 0210 	add.w	r2, r7, #16
 8003072:	f107 0118 	add.w	r1, r7, #24
 8003076:	482e      	ldr	r0, [pc, #184]	; (8003130 <main+0xf8>)
 8003078:	f7fd fe44 	bl	8000d04 <EKF_Init>
	EKF_YAW_Init(&Start_Conditions_ALL, KALMAN_P_INIT, KALMAN_Q, KALMAN_R);
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <main+0xec>)
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <main+0xf0>)
 8003084:	ed93 7a00 	vldr	s14, [r3]
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <main+0xf4>)
 800308a:	edd3 6a00 	vldr	s13, [r3]
 800308e:	eeb0 1a66 	vmov.f32	s2, s13
 8003092:	eef0 0a47 	vmov.f32	s1, s14
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	4826      	ldr	r0, [pc, #152]	; (8003134 <main+0xfc>)
 800309c:	f7fe fc28 	bl	80018f0 <EKF_YAW_Init>
	//Offset_value_gyro  measurements_gyro_mpu9250 = {-0.17926,0.06552,0.01092};
	//Offset_value_gyro  measurements_gyro_mpu9250 = {0,0,0};	//calibration gets executed at the beginning
	//Offset_Scale_value_acc measurements_acc_mpu9250 = {0.03552, 9.81508/9.81f,0.01730,9.82851/9.81f,0.08203,9.97796/9.81f};

	/*Enable User Button*/
	BTN_init();
 80030a0:	f7ff fcc8 	bl	8002a34 <BTN_init>

	/*SysTick Timer init*/
	systick_counter_init();
 80030a4:	f001 faae 	bl	8004604 <systick_counter_init>

	/***MPU*config***************************************/
	/*Enable SPI*/
	spi1_dma_init();
 80030a8:	f000 ff9a 	bl	8003fe0 <spi1_dma_init>

	/*Enable Floating Point Unit*/
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <main+0x100>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <main+0x100>)
 80030b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/*Config NCS pin*/
	mpu9250_ncs_pin_config();
 80030bc:	f000 fc6a 	bl	8003994 <mpu9250_ncs_pin_config>

	/*Enable tx stream*/
	dma2_stream3_spi_tx_init();
 80030c0:	f001 f844 	bl	800414c <dma2_stream3_spi_tx_init>

	/*Enable rx stream*/
	dma2_stream2_spi_rx_init();
 80030c4:	f001 f8a0 	bl	8004208 <dma2_stream2_spi_rx_init>
	/******************************************************/

	/*ACCELEROMETER+Gyroskope****START SPI********/
	/*Reset NCS pin*/
	mpu9250_ncs_pin_reset();
 80030c8:	f000 fc92 	bl	80039f0 <mpu9250_ncs_pin_reset>

	/*Config accel & gyro*/
	mpu9250_accel_config(ACC_FULL_SCALE_2_G);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 fc9f 	bl	8003a10 <mpu9250_accel_config>

	mpu9250_gyro_config(GYRO_FULL_SCALE_250);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 fe54 	bl	8003d80 <mpu9250_gyro_config>

	/*Set NCS pin to high-level*/
	mpu9250_ncs_pin_set();
 80030d8:	f000 fc7a 	bl	80039d0 <mpu9250_ncs_pin_set>
// delta_t_gyro = tim2_500hz_interrupt_init();
//	delta_t_gyro = tim2_100hz_interrupt_init();


	//SystemClock_Config();
	SystemCoreClockUpdate(); //Used to read the HCLK frequency
 80030dc:	f001 fa12 	bl	8004504 <SystemCoreClockUpdate>

	 core_clock = SystemCoreClock;
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <main+0x104>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	461c      	mov	r4, r3
 80030e8:	4615      	mov	r5, r2
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <main+0x108>)
 80030ec:	e9c3 4500 	strd	r4, r5, [r3]

	/***Magnetometer*config********************************/
	/*Enable I2C*/
	i2c1_init();
 80030f0:	f7ff fcdc 	bl	8002aac <i2c1_init>

	/*Enable Floating Point Unit*/
	//SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));

	/*Enable tx stream*/
	dma1_stream6_i2c1_tx_init();
 80030f4:	f7ff fd7c 	bl	8002bf0 <dma1_stream6_i2c1_tx_init>

	/*Enable rx stream*/
	dma1_stream5_i2c1_rx_init();
 80030f8:	f7ff fdc0 	bl	8002c7c <dma1_stream5_i2c1_rx_init>
	/*******************************************************/
	/*Config Magnetometer*/
	GY511_init(LSM303_CONTIMODE, LSM303_MAGGAIN_4_0, LSM303_MAGRATE_220);
 80030fc:	221c      	movs	r2, #28
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe ff87 	bl	8002014 <GY511_init>
	uart2_rx_interrupt_init();
 8003106:	f001 fb0b 	bl	8004720 <uart2_rx_interrupt_init>
	/******************************************************/

	/*Enable Timer 1kHz*/
	delta_t_gyro = tim2_1khz_interrupt_init();
 800310a:	f001 faaf 	bl	800466c <tim2_1khz_interrupt_init>
 800310e:	eef0 7a40 	vmov.f32	s15, s0
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <main+0x10c>)
 8003114:	edc3 7a00 	vstr	s15, [r3]
	NVIC_SetPriority(TIM2_IRQn,70);
 8003118:	2146      	movs	r1, #70	; 0x46
 800311a:	201c      	movs	r0, #28
 800311c:	f7ff ff40 	bl	8002fa0 <__NVIC_SetPriority>



	while(1)
 8003120:	e7fe      	b.n	8003120 <main+0xe8>
 8003122:	bf00      	nop
 8003124:	20000008 	.word	0x20000008
 8003128:	2000000c 	.word	0x2000000c
 800312c:	20000010 	.word	0x20000010
 8003130:	20000308 	.word	0x20000308
 8003134:	20000338 	.word	0x20000338
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	20000030 	.word	0x20000030
 8003140:	200002b8 	.word	0x200002b8
 8003144:	20000304 	.word	0x20000304

08003148 <TIM2_IRQHandler>:
/*FUNCTIONS***********************************/


/*INTERRUPTS**********************************/
void TIM2_IRQHandler(void) // jede 1ms Interrupt
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
	/*Clear update interrupt flag*/
	TIM2->SR &=~SR_UIF;
 800314e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6113      	str	r3, [r2, #16]
	static uint8_t g = 0;
	static uint16_t calibration_cycles = 1000;



	switch(Zustand){
 800315e:	4b60      	ldr	r3, [pc, #384]	; (80032e0 <TIM2_IRQHandler+0x198>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	f200 80b8 	bhi.w	80032d8 <TIM2_IRQHandler+0x190>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <TIM2_IRQHandler+0x28>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003185 	.word	0x08003185
 8003174:	080031f5 	.word	0x080031f5
 8003178:	0800323f 	.word	0x0800323f
 800317c:	08003295 	.word	0x08003295
 8003180:	080032c5 	.word	0x080032c5

		case 0:
			timer_cnt_Z0++;
 8003184:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <TIM2_IRQHandler+0x19c>)
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800318e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <TIM2_IRQHandler+0x19c>)
 8003194:	edc3 7a00 	vstr	s15, [r3]
			res_time_Z0 = delta_t_gyro*timer_cnt_Z0;
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <TIM2_IRQHandler+0x1a0>)
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <TIM2_IRQHandler+0x19c>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <TIM2_IRQHandler+0x1a4>)
 80031aa:	edc3 7a00 	vstr	s15, [r3]

			if(!(GPIOC->IDR & BTN_PIN) && res_time_Z0 < 5)
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <TIM2_IRQHandler+0x1a8>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <TIM2_IRQHandler+0x8c>
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <TIM2_IRQHandler+0x1a4>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80031c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d502      	bpl.n	80031d4 <TIM2_IRQHandler+0x8c>
			{
				Zustand = 4;
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <TIM2_IRQHandler+0x198>)
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
			}

			if (res_time_Z0 >= 5)
 80031d4:	4b45      	ldr	r3, [pc, #276]	; (80032ec <TIM2_IRQHandler+0x1a4>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80031de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	da00      	bge.n	80031ea <TIM2_IRQHandler+0xa2>
			{
				timer_cnt_Z0 = 0;
				//Zustand = 4; //direkt zur EKF Berechnung
			}

		break;
 80031e8:	e076      	b.n	80032d8 <TIM2_IRQHandler+0x190>
				timer_cnt_Z0 = 0;
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <TIM2_IRQHandler+0x19c>)
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
		break;
 80031f2:	e071      	b.n	80032d8 <TIM2_IRQHandler+0x190>
		case 1:															// Magnetometer Kalibrierung
			// Zuerst GUI starten
//			if((!(GPIOC->IDR & BTN_PIN)) || g==1)
//			{
//				g = 1;
				GY_511_update(&MagnetometerData, Magneto_offset);
 80031f4:	493f      	ldr	r1, [pc, #252]	; (80032f4 <TIM2_IRQHandler+0x1ac>)
 80031f6:	4840      	ldr	r0, [pc, #256]	; (80032f8 <TIM2_IRQHandler+0x1b0>)
 80031f8:	f7fe ffa6 	bl	8002148 <GY_511_update>
				uart_send_Magneto(&MagnetometerData);
 80031fc:	483e      	ldr	r0, [pc, #248]	; (80032f8 <TIM2_IRQHandler+0x1b0>)
 80031fe:	f001 fb47 	bl	8004890 <uart_send_Magneto>
				uart_send_yaw(&MagnetometerData);
 8003202:	483d      	ldr	r0, [pc, #244]	; (80032f8 <TIM2_IRQHandler+0x1b0>)
 8003204:	f001 fb7c 	bl	8004900 <uart_send_yaw>

				int allNonZero = 1;  // Annahme, dass alle Werte ungleich Null sind
 8003208:	2301      	movs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]

				    for(int i = 0; i < 3; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e00b      	b.n	800322a <TIM2_IRQHandler+0xe2>
				    {
				        if(Magneto_offset[i] == 0)
 8003212:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <TIM2_IRQHandler+0x1ac>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4413      	add	r3, r2
 8003218:	f993 3000 	ldrsb.w	r3, [r3]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <TIM2_IRQHandler+0xdc>
				        {
				            allNonZero = 0;  // Wenn ein Wert gleich Null ist, setzen Sie allNonZero auf 0
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
				    for(int i = 0; i < 3; i++)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3301      	adds	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b02      	cmp	r3, #2
 800322e:	ddf0      	ble.n	8003212 <TIM2_IRQHandler+0xca>

				        }
				    }


				if(allNonZero)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04d      	beq.n	80032d2 <TIM2_IRQHandler+0x18a>
				{
					Zustand = 2;
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <TIM2_IRQHandler+0x198>)
 8003238:	2202      	movs	r2, #2
 800323a:	701a      	strb	r2, [r3, #0]
				}
//			}

			break;
 800323c:	e049      	b.n	80032d2 <TIM2_IRQHandler+0x18a>

		case 2:	//Gyro Kalibrierung
			set_gyro_offset(cnt_gyro_cali, calibration_cycles);
 800323e:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <TIM2_IRQHandler+0x1b4>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <TIM2_IRQHandler+0x1b8>)
 8003244:	8812      	ldrh	r2, [r2, #0]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f9ff 	bl	800364c <set_gyro_offset>
			float yaw_sum = YAW_Init_Mag(&MagnetometerData, Magneto_offset);
 800324e:	4929      	ldr	r1, [pc, #164]	; (80032f4 <TIM2_IRQHandler+0x1ac>)
 8003250:	4829      	ldr	r0, [pc, #164]	; (80032f8 <TIM2_IRQHandler+0x1b0>)
 8003252:	f7ff f8a5 	bl	80023a0 <YAW_Init_Mag>
 8003256:	ed87 0a01 	vstr	s0, [r7, #4]


			cnt_gyro_cali++;
 800325a:	4b28      	ldr	r3, [pc, #160]	; (80032fc <TIM2_IRQHandler+0x1b4>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <TIM2_IRQHandler+0x1b4>)
 8003264:	801a      	strh	r2, [r3, #0]

			if(cnt_gyro_cali > calibration_cycles)
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <TIM2_IRQHandler+0x1b4>)
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <TIM2_IRQHandler+0x1b8>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d931      	bls.n	80032d6 <TIM2_IRQHandler+0x18e>
			{
				//Zustand = 3;
//				Start_Conditions.pitch_r = pitch_avg;
//				Start_Conditions.roll_r = roll_avg;
				Start_Conditions_ALL.yaw_r = yaw_sum/cnt_gyro_cali;
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <TIM2_IRQHandler+0x1b4>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003286:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <TIM2_IRQHandler+0x1bc>)
 8003288:	edc3 7a02 	vstr	s15, [r3, #8]
				Zustand = 4;
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <TIM2_IRQHandler+0x198>)
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]





			break;
 8003292:	e020      	b.n	80032d6 <TIM2_IRQHandler+0x18e>

		case 3:	//Acc Kalibrierung

			get_camera_position_calibration();
 8003294:	f000 f9b4 	bl	8003600 <get_camera_position_calibration>
			Offset_Calibration_acc(&Values_acc,&measurements_acc_mpu9250, acc_x, acc_y, acc_z, (uint16_t) 1000);
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <TIM2_IRQHandler+0x1c0>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <TIM2_IRQHandler+0x1c4>)
 80032a0:	ed93 7a00 	vldr	s14, [r3]
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <TIM2_IRQHandler+0x1c8>)
 80032a6:	edd3 6a00 	vldr	s13, [r3]
 80032aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ae:	eeb0 1a66 	vmov.f32	s2, s13
 80032b2:	eef0 0a47 	vmov.f32	s1, s14
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	4916      	ldr	r1, [pc, #88]	; (8003314 <TIM2_IRQHandler+0x1cc>)
 80032bc:	4816      	ldr	r0, [pc, #88]	; (8003318 <TIM2_IRQHandler+0x1d0>)
 80032be:	f7ff f9df 	bl	8002680 <Offset_Calibration_acc>

			break;
 80032c2:	e009      	b.n	80032d8 <TIM2_IRQHandler+0x190>

		case 4: //EKF mit Complementary Filter
			get_camera_position(&MagnetometerData, &measurements_acc_mpu9250, &measurements_gyro_mpu9250, Magneto_offset);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <TIM2_IRQHandler+0x1ac>)
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <TIM2_IRQHandler+0x1d4>)
 80032c8:	4912      	ldr	r1, [pc, #72]	; (8003314 <TIM2_IRQHandler+0x1cc>)
 80032ca:	480b      	ldr	r0, [pc, #44]	; (80032f8 <TIM2_IRQHandler+0x1b0>)
 80032cc:	f000 f828 	bl	8003320 <get_camera_position>

			break;
 80032d0:	e002      	b.n	80032d8 <TIM2_IRQHandler+0x190>
			break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <TIM2_IRQHandler+0x190>
			break;
 80032d6:	bf00      	nop
	}


}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000002c 	.word	0x2000002c
 80032e4:	200003a0 	.word	0x200003a0
 80032e8:	20000304 	.word	0x20000304
 80032ec:	200003a4 	.word	0x200003a4
 80032f0:	40020800 	.word	0x40020800
 80032f4:	2000039c 	.word	0x2000039c
 80032f8:	20000380 	.word	0x20000380
 80032fc:	20000300 	.word	0x20000300
 8003300:	2000002e 	.word	0x2000002e
 8003304:	20000338 	.word	0x20000338
 8003308:	20000298 	.word	0x20000298
 800330c:	2000029c 	.word	0x2000029c
 8003310:	200002a0 	.word	0x200002a0
 8003314:	20000014 	.word	0x20000014
 8003318:	200002dc 	.word	0x200002dc
 800331c:	200002f4 	.word	0x200002f4

08003320 <get_camera_position>:



void static get_camera_position(lsm303MagData *MagnetometerData,Offset_Scale_value_acc* acc_offset_scale, Offset_value_gyro* gyro_offset, int8_t *Magneto_offset)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
		static uint8_t enable = 0;
		/*Set NCS pin to low-level*/
		mpu9250_ncs_pin_reset();
 800332e:	f000 fb5f 	bl	80039f0 <mpu9250_ncs_pin_reset>
		/*Update accel values*/
		mpu9250_accel_gyro_update();
 8003332:	f000 fc29 	bl	8003b88 <mpu9250_accel_gyro_update>
		/*Set NCS pin to high-level*/
		mpu9250_ncs_pin_set();
 8003336:	f000 fb4b 	bl	80039d0 <mpu9250_ncs_pin_set>

		/*Get accel data*/
		acc_x =  mpu9250_get_acc_x()/acc_offset_scale->x_scale_acc - acc_offset_scale->x_offset_acc;
 800333a:	f000 fcff 	bl	8003d3c <mpu9250_get_acc_x>
 800333e:	eef0 6a40 	vmov.f32	s13, s0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	edd3 7a01 	vldr	s15, [r3, #4]
 8003348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003356:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <get_camera_position+0x2a0>)
 8003358:	edc3 7a00 	vstr	s15, [r3]
		acc_y =  mpu9250_get_acc_y()/acc_offset_scale->y_scale_acc - acc_offset_scale->y_offset_acc;
 800335c:	f000 fcf9 	bl	8003d52 <mpu9250_get_acc_y>
 8003360:	eef0 6a40 	vmov.f32	s13, s0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	edd3 7a03 	vldr	s15, [r3, #12]
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	edd3 7a02 	vldr	s15, [r3, #8]
 8003374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <get_camera_position+0x2a4>)
 800337a:	edc3 7a00 	vstr	s15, [r3]
		acc_z =  mpu9250_get_acc_z()/acc_offset_scale->z_scale_acc - acc_offset_scale->z_offset_acc;
 800337e:	f000 fcf3 	bl	8003d68 <mpu9250_get_acc_z>
 8003382:	eef0 6a40 	vmov.f32	s13, s0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	edd3 7a05 	vldr	s15, [r3, #20]
 800338c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	edd3 7a04 	vldr	s15, [r3, #16]
 8003396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339a:	4b8b      	ldr	r3, [pc, #556]	; (80035c8 <get_camera_position+0x2a8>)
 800339c:	edc3 7a00 	vstr	s15, [r3]

		/*Get accel data*/
		gyro_x =  mpu9250_get_gyro_x()-gyro_offset->x_offset_gyro;
 80033a0:	f000 fd6e 	bl	8003e80 <mpu9250_get_gyro_x>
 80033a4:	eeb0 7a40 	vmov.f32	s14, s0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	4b86      	ldr	r3, [pc, #536]	; (80035cc <get_camera_position+0x2ac>)
 80033b4:	edc3 7a00 	vstr	s15, [r3]
		gyro_y =  mpu9250_get_gyro_y()-gyro_offset->y_offset_gyro;
 80033b8:	f000 fd6d 	bl	8003e96 <mpu9250_get_gyro_y>
 80033bc:	eeb0 7a40 	vmov.f32	s14, s0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ca:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <get_camera_position+0x2b0>)
 80033cc:	edc3 7a00 	vstr	s15, [r3]
		gyro_z =  mpu9250_get_gyro_z()-gyro_offset->z_offset_gyro;
 80033d0:	f000 fd6c 	bl	8003eac <mpu9250_get_gyro_z>
 80033d4:	eeb0 7a40 	vmov.f32	s14, s0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	edd3 7a02 	vldr	s15, [r3, #8]
 80033de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e2:	4b7c      	ldr	r3, [pc, #496]	; (80035d4 <get_camera_position+0x2b4>)
 80033e4:	edc3 7a00 	vstr	s15, [r3]

		/* 2. Roll und Pitch in "YAW_Init_Mag" um den Yaw zu berechnen und Referenzkoordinatensystem zu erhalten */


		//EKF_Predict(&Start_Conditions, gyro_x, gyro_y, gyro_z, delta_t_gyro);
		EKF_YAW_Predict(&Start_Conditions_ALL, gyro_x, gyro_y, gyro_z, delta_t_gyro);
 80033e8:	4b78      	ldr	r3, [pc, #480]	; (80035cc <get_camera_position+0x2ac>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	4b78      	ldr	r3, [pc, #480]	; (80035d0 <get_camera_position+0x2b0>)
 80033f0:	ed93 7a00 	vldr	s14, [r3]
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <get_camera_position+0x2b4>)
 80033f6:	edd3 6a00 	vldr	s13, [r3]
 80033fa:	4b77      	ldr	r3, [pc, #476]	; (80035d8 <get_camera_position+0x2b8>)
 80033fc:	ed93 6a00 	vldr	s12, [r3]
 8003400:	eef0 1a46 	vmov.f32	s3, s12
 8003404:	eeb0 1a66 	vmov.f32	s2, s13
 8003408:	eef0 0a47 	vmov.f32	s1, s14
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	4872      	ldr	r0, [pc, #456]	; (80035dc <get_camera_position+0x2bc>)
 8003412:	f7fe fabc 	bl	800198e <EKF_YAW_Predict>

		roll_angle_pr	= Start_Conditions_ALL.roll_r 	*180.0f/M_PI;
 8003416:	4b71      	ldr	r3, [pc, #452]	; (80035dc <get_camera_position+0x2bc>)
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80035e0 <get_camera_position+0x2c0>
 8003420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003424:	ee17 0a90 	vmov	r0, s15
 8003428:	f7fd f896 	bl	8000558 <__aeabi_f2d>
 800342c:	a362      	add	r3, pc, #392	; (adr r3, 80035b8 <get_camera_position+0x298>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd fa13 	bl	800085c <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f7fd fbdb 	bl	8000bf8 <__aeabi_d2f>
 8003442:	4603      	mov	r3, r0
 8003444:	4a67      	ldr	r2, [pc, #412]	; (80035e4 <get_camera_position+0x2c4>)
 8003446:	6013      	str	r3, [r2, #0]
		pitch_angle_pr	= Start_Conditions_ALL.pitch_r 	*180.0f/M_PI;
 8003448:	4b64      	ldr	r3, [pc, #400]	; (80035dc <get_camera_position+0x2bc>)
 800344a:	edd3 7a01 	vldr	s15, [r3, #4]
 800344e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80035e0 <get_camera_position+0x2c0>
 8003452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003456:	ee17 0a90 	vmov	r0, s15
 800345a:	f7fd f87d 	bl	8000558 <__aeabi_f2d>
 800345e:	a356      	add	r3, pc, #344	; (adr r3, 80035b8 <get_camera_position+0x298>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd f9fa 	bl	800085c <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fbc2 	bl	8000bf8 <__aeabi_d2f>
 8003474:	4603      	mov	r3, r0
 8003476:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <get_camera_position+0x2c8>)
 8003478:	6013      	str	r3, [r2, #0]
		yaw_angle_pr	= Start_Conditions_ALL.yaw_r 	*180.0f/M_PI;
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <get_camera_position+0x2bc>)
 800347c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003480:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80035e0 <get_camera_position+0x2c0>
 8003484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003488:	ee17 0a90 	vmov	r0, s15
 800348c:	f7fd f864 	bl	8000558 <__aeabi_f2d>
 8003490:	a349      	add	r3, pc, #292	; (adr r3, 80035b8 <get_camera_position+0x298>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fd f9e1 	bl	800085c <__aeabi_ddiv>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fd fba9 	bl	8000bf8 <__aeabi_d2f>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4a50      	ldr	r2, [pc, #320]	; (80035ec <get_camera_position+0x2cc>)
 80034aa:	6013      	str	r3, [r2, #0]
//		after = SysTick->VAL;
//		time_taken = (before - after)*0.0000000625;

		if (ii==10)
 80034ac:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <get_camera_position+0x2d0>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b0a      	cmp	r3, #10
 80034b2:	d175      	bne.n	80035a0 <get_camera_position+0x280>
		{
			// update Roll, Pitch
			EKF_Update(&Start_Conditions_ALL, acc_x, acc_y, acc_z);
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <get_camera_position+0x2a0>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <get_camera_position+0x2a4>)
 80034bc:	ed93 7a00 	vldr	s14, [r3]
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <get_camera_position+0x2a8>)
 80034c2:	edd3 6a00 	vldr	s13, [r3]
 80034c6:	eeb0 1a66 	vmov.f32	s2, s13
 80034ca:	eef0 0a47 	vmov.f32	s1, s14
 80034ce:	eeb0 0a67 	vmov.f32	s0, s15
 80034d2:	4842      	ldr	r0, [pc, #264]	; (80035dc <get_camera_position+0x2bc>)
 80034d4:	f7fd fc54 	bl	8000d80 <EKF_Update>
			roll_angle_up	= Start_Conditions_ALL.roll_r 	*180.0f/M_PI;
 80034d8:	4b40      	ldr	r3, [pc, #256]	; (80035dc <get_camera_position+0x2bc>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80035e0 <get_camera_position+0x2c0>
 80034e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e6:	ee17 0a90 	vmov	r0, s15
 80034ea:	f7fd f835 	bl	8000558 <__aeabi_f2d>
 80034ee:	a332      	add	r3, pc, #200	; (adr r3, 80035b8 <get_camera_position+0x298>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fd f9b2 	bl	800085c <__aeabi_ddiv>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f7fd fb7a 	bl	8000bf8 <__aeabi_d2f>
 8003504:	4603      	mov	r3, r0
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <get_camera_position+0x2d4>)
 8003508:	6013      	str	r3, [r2, #0]
			pitch_angle_up	= Start_Conditions_ALL.pitch_r 	*180.0f/M_PI;
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <get_camera_position+0x2bc>)
 800350c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003510:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80035e0 <get_camera_position+0x2c0>
 8003514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003518:	ee17 0a90 	vmov	r0, s15
 800351c:	f7fd f81c 	bl	8000558 <__aeabi_f2d>
 8003520:	a325      	add	r3, pc, #148	; (adr r3, 80035b8 <get_camera_position+0x298>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f7fd f999 	bl	800085c <__aeabi_ddiv>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb61 	bl	8000bf8 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <get_camera_position+0x2d8>)
 800353a:	6013      	str	r3, [r2, #0]
			// update Yaw
			GY_511_update(MagnetometerData, Magneto_offset);
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7fe fe02 	bl	8002148 <GY_511_update>
			MagYaw_RollKompensated(&Start_Conditions_ALL, MagnetometerData->x, MagnetometerData->y, MagnetometerData->z);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	edd3 7a03 	vldr	s15, [r3, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	edd3 6a05 	vldr	s13, [r3, #20]
 8003556:	eeb0 1a66 	vmov.f32	s2, s13
 800355a:	eef0 0a47 	vmov.f32	s1, s14
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	481e      	ldr	r0, [pc, #120]	; (80035dc <get_camera_position+0x2bc>)
 8003564:	f000 f8fc 	bl	8003760 <MagYaw_RollKompensated>
			//MagYaw_to_RefKoordinate(&Start_Conditions,MagnetometerData);
			//YAW_Complementary(&Start_Conditions_ALL, 1);
			yaw_angle_up	= Start_Conditions_ALL.yaw_r *180.0f/M_PI;
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <get_camera_position+0x2bc>)
 800356a:	edd3 7a02 	vldr	s15, [r3, #8]
 800356e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80035e0 <get_camera_position+0x2c0>
 8003572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003576:	ee17 0a90 	vmov	r0, s15
 800357a:	f7fc ffed 	bl	8000558 <__aeabi_f2d>
 800357e:	a30e      	add	r3, pc, #56	; (adr r3, 80035b8 <get_camera_position+0x298>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fd f96a 	bl	800085c <__aeabi_ddiv>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f7fd fb32 	bl	8000bf8 <__aeabi_d2f>
 8003594:	4603      	mov	r3, r0
 8003596:	4a19      	ldr	r2, [pc, #100]	; (80035fc <get_camera_position+0x2dc>)
 8003598:	6013      	str	r3, [r2, #0]

			ii=0;
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <get_camera_position+0x2d0>)
 800359c:	2200      	movs	r2, #0
 800359e:	801a      	strh	r2, [r3, #0]
		}
		ii++;
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <get_camera_position+0x2d0>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <get_camera_position+0x2d0>)
 80035aa:	801a      	strh	r2, [r3, #0]
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	f3af 8000 	nop.w
 80035b8:	54442d18 	.word	0x54442d18
 80035bc:	400921fb 	.word	0x400921fb
 80035c0:	20000298 	.word	0x20000298
 80035c4:	2000029c 	.word	0x2000029c
 80035c8:	200002a0 	.word	0x200002a0
 80035cc:	200002a4 	.word	0x200002a4
 80035d0:	200002a8 	.word	0x200002a8
 80035d4:	200002ac 	.word	0x200002ac
 80035d8:	20000304 	.word	0x20000304
 80035dc:	20000338 	.word	0x20000338
 80035e0:	43340000 	.word	0x43340000
 80035e4:	200002d0 	.word	0x200002d0
 80035e8:	200002d4 	.word	0x200002d4
 80035ec:	200002d8 	.word	0x200002d8
 80035f0:	200002c0 	.word	0x200002c0
 80035f4:	200002c4 	.word	0x200002c4
 80035f8:	200002c8 	.word	0x200002c8
 80035fc:	200002cc 	.word	0x200002cc

08003600 <get_camera_position_calibration>:

void static get_camera_position_calibration(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
		/*Set NCS pin to low-level*/
		mpu9250_ncs_pin_reset();
 8003604:	f000 f9f4 	bl	80039f0 <mpu9250_ncs_pin_reset>
		/*Update accel values*/
		mpu9250_accel_gyro_update();
 8003608:	f000 fabe 	bl	8003b88 <mpu9250_accel_gyro_update>
		/*Set NCS pin to high-level*/
		mpu9250_ncs_pin_set();
 800360c:	f000 f9e0 	bl	80039d0 <mpu9250_ncs_pin_set>

		/*Get accel data*/
		acc_x =  mpu9250_get_acc_x();
 8003610:	f000 fb94 	bl	8003d3c <mpu9250_get_acc_x>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <get_camera_position_calibration+0x40>)
 800361a:	edc3 7a00 	vstr	s15, [r3]
		acc_y =  mpu9250_get_acc_y();
 800361e:	f000 fb98 	bl	8003d52 <mpu9250_get_acc_y>
 8003622:	eef0 7a40 	vmov.f32	s15, s0
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <get_camera_position_calibration+0x44>)
 8003628:	edc3 7a00 	vstr	s15, [r3]
		acc_z =  mpu9250_get_acc_z();
 800362c:	f000 fb9c 	bl	8003d68 <mpu9250_get_acc_z>
 8003630:	eef0 7a40 	vmov.f32	s15, s0
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <get_camera_position_calibration+0x48>)
 8003636:	edc3 7a00 	vstr	s15, [r3]

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000298 	.word	0x20000298
 8003644:	2000029c 	.word	0x2000029c
 8003648:	200002a0 	.word	0x200002a0

0800364c <set_gyro_offset>:

void static set_gyro_offset(uint16_t counter, uint16_t cycle_times)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	80bb      	strh	r3, [r7, #4]
		/*Set NCS pin to low-level*/
		mpu9250_ncs_pin_reset();
 800365c:	f000 f9c8 	bl	80039f0 <mpu9250_ncs_pin_reset>
		/*Update accel values*/
		mpu9250_accel_gyro_update();
 8003660:	f000 fa92 	bl	8003b88 <mpu9250_accel_gyro_update>
		/*Set NCS pin to high-level*/
		mpu9250_ncs_pin_set();
 8003664:	f000 f9b4 	bl	80039d0 <mpu9250_ncs_pin_set>
		counter_pb++;
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <set_gyro_offset+0xb0>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <set_gyro_offset+0xb0>)
 8003672:	801a      	strh	r2, [r3, #0]
		/*Get accel data*/
		gyro_x =  mpu9250_get_gyro_x();
 8003674:	f000 fc04 	bl	8003e80 <mpu9250_get_gyro_x>
 8003678:	eef0 7a40 	vmov.f32	s15, s0
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <set_gyro_offset+0xb4>)
 800367e:	edc3 7a00 	vstr	s15, [r3]
		gyro_y =  mpu9250_get_gyro_y();
 8003682:	f000 fc08 	bl	8003e96 <mpu9250_get_gyro_y>
 8003686:	eef0 7a40 	vmov.f32	s15, s0
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <set_gyro_offset+0xb8>)
 800368c:	edc3 7a00 	vstr	s15, [r3]
		gyro_z =  mpu9250_get_gyro_z();
 8003690:	f000 fc0c 	bl	8003eac <mpu9250_get_gyro_z>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <set_gyro_offset+0xbc>)
 800369a:	edc3 7a00 	vstr	s15, [r3]

		acc_x =  mpu9250_get_acc_x();
 800369e:	f000 fb4d 	bl	8003d3c <mpu9250_get_acc_x>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <set_gyro_offset+0xc0>)
 80036a8:	edc3 7a00 	vstr	s15, [r3]
		acc_y =  mpu9250_get_acc_y();
 80036ac:	f000 fb51 	bl	8003d52 <mpu9250_get_acc_y>
 80036b0:	eef0 7a40 	vmov.f32	s15, s0
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <set_gyro_offset+0xc4>)
 80036b6:	edc3 7a00 	vstr	s15, [r3]
		acc_z =  mpu9250_get_acc_z();
 80036ba:	f000 fb55 	bl	8003d68 <mpu9250_get_acc_z>
 80036be:	eef0 7a40 	vmov.f32	s15, s0
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <set_gyro_offset+0xc8>)
 80036c4:	edc3 7a00 	vstr	s15, [r3]

		Offset_Calibration_gyro(&measurements_gyro_mpu9250, gyro_x, gyro_y, gyro_z, counter, cycle_times);
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <set_gyro_offset+0xb4>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <set_gyro_offset+0xb8>)
 80036d0:	ed93 7a00 	vldr	s14, [r3]
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <set_gyro_offset+0xbc>)
 80036d6:	edd3 6a00 	vldr	s13, [r3]
 80036da:	88ba      	ldrh	r2, [r7, #4]
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	4619      	mov	r1, r3
 80036e0:	eeb0 1a66 	vmov.f32	s2, s13
 80036e4:	eef0 0a47 	vmov.f32	s1, s14
 80036e8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ec:	480a      	ldr	r0, [pc, #40]	; (8003718 <set_gyro_offset+0xcc>)
 80036ee:	f7fe ff37 	bl	8002560 <Offset_Calibration_gyro>
		//PitchRollInit(acc_x, acc_y, acc_z, counter, cycle_times);
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000302 	.word	0x20000302
 8003700:	200002a4 	.word	0x200002a4
 8003704:	200002a8 	.word	0x200002a8
 8003708:	200002ac 	.word	0x200002ac
 800370c:	20000298 	.word	0x20000298
 8003710:	2000029c 	.word	0x2000029c
 8003714:	200002a0 	.word	0x200002a0
 8003718:	200002f4 	.word	0x200002f4

0800371c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800371c:	b598      	push	{r3, r4, r7, lr}
 800371e:	af00      	add	r7, sp, #0
	/*ChecK if RXNE is set*/
	if(USART2->SR & SR_RXNE)
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <USART2_IRQHandler+0x34>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <USART2_IRQHandler+0x2e>
	{
		Magneto_offset[r] = uart2_read();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <USART2_IRQHandler+0x38>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461c      	mov	r4, r3
 8003732:	f001 f905 	bl	8004940 <uart2_read>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <USART2_IRQHandler+0x3c>)
 800373c:	551a      	strb	r2, [r3, r4]
		r++;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <USART2_IRQHandler+0x38>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b03      	ldr	r3, [pc, #12]	; (8003754 <USART2_IRQHandler+0x38>)
 8003748:	701a      	strb	r2, [r3, #0]
	}
}
 800374a:	bf00      	nop
 800374c:	bd98      	pop	{r3, r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	40004400 	.word	0x40004400
 8003754:	2000039f 	.word	0x2000039f
 8003758:	2000039c 	.word	0x2000039c
 800375c:	00000000 	.word	0x00000000

08003760 <MagYaw_RollKompensated>:

		//ekf->yaw_r = yawAngle;
}

void MagYaw_RollKompensated (EKF_YAW *data, float Bx, float By, float Bz)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b093      	sub	sp, #76	; 0x4c
 8003764:	af04      	add	r7, sp, #16
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	ed87 0a02 	vstr	s0, [r7, #8]
 800376c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003770:	ed87 1a00 	vstr	s2, [r7]
	//yaw_raw = atan2f (By,Bx)*180.f / M_PI;
	float cos_r = cosf(data->roll_r);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	f005 fdb7 	bl	80092f0 <cosf>
 8003782:	eef0 7a40 	vmov.f32	s15, s0
 8003786:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float sin_r = sinf(data->roll_r);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	eeb0 0a67 	vmov.f32	s0, s15
 8003794:	f005 fdf0 	bl	8009378 <sinf>
 8003798:	eef0 7a40 	vmov.f32	s15, s0
 800379c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float cos_p = cosf(data->pitch_r);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037a6:	eeb0 0a67 	vmov.f32	s0, s15
 80037aa:	f005 fda1 	bl	80092f0 <cosf>
 80037ae:	eef0 7a40 	vmov.f32	s15, s0
 80037b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float sin_p = sinf(data->pitch_r);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80037bc:	eeb0 0a67 	vmov.f32	s0, s15
 80037c0:	f005 fdda 	bl	8009378 <sinf>
 80037c4:	eef0 7a40 	vmov.f32	s15, s0
 80037c8:	edc7 7a08 	vstr	s15, [r7, #32]
	float cos_y = cosf(data->yaw_r);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80037d2:	eeb0 0a67 	vmov.f32	s0, s15
 80037d6:	f005 fd8b 	bl	80092f0 <cosf>
 80037da:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float sin_y = sinf(data->yaw_r);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80037e4:	eeb0 0a67 	vmov.f32	s0, s15
 80037e8:	f005 fdc6 	bl	8009378 <sinf>
 80037ec:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

  float Bx_corrected = By;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	61fb      	str	r3, [r7, #28]
  float Bz_corrected = Bz;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	61bb      	str	r3, [r7, #24]
  float By_corrected = -Bx;
 80037f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fc:	eef1 7a67 	vneg.f32	s15, s15
 8003800:	edc7 7a05 	vstr	s15, [r7, #20]

  //Roll_Pitch_transformation(&Bx_corrected, &By_corrected, &Bz_corrected, &cos_r, &sin_r, &cos_p, &sin_p);
  Pitch_Roll_transfomration(&Bx_corrected, &By_corrected, &Bz_corrected, &cos_r, &sin_r, &cos_p, &sin_p);
 8003804:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003808:	f107 0218 	add.w	r2, r7, #24
 800380c:	f107 0114 	add.w	r1, r7, #20
 8003810:	f107 001c 	add.w	r0, r7, #28
 8003814:	f107 0320 	add.w	r3, r7, #32
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	4623      	mov	r3, r4
 8003828:	f000 f83a 	bl	80038a0 <Pitch_Roll_transfomration>
  //Roll_transfomration(&Bx_corrected, &By_corrected, &Bz_corrected, &cos_r, &sin_r);
  //R1_R2_R3_transformation(&Bx_corrected, &By_corrected, &Bz_corrected, &cos_r, &sin_r, &cos_p, &sin_p, &sin_y, &cos_y);
  //R3_R2_R1_transfomration(&Bx_corrected, &By_corrected, &Bz_corrected, &cos_r, &sin_r, &cos_p, &sin_p, &sin_y, &cos_y);
  yawRefMag_pr = atan2f(B_pr[1], B_pr[0]);// *180.0f / M_PI;
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <MagYaw_RollKompensated+0x130>)
 800382e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <MagYaw_RollKompensated+0x130>)
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	eef0 0a47 	vmov.f32	s1, s14
 800383c:	eeb0 0a67 	vmov.f32	s0, s15
 8003840:	f005 fe0c 	bl	800945c <atan2f>
 8003844:	eef0 7a40 	vmov.f32	s15, s0
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <MagYaw_RollKompensated+0x134>)
 800384a:	edc3 7a00 	vstr	s15, [r3]
  yawRefMag_pr_deg = yawRefMag_pr*180/M_PI;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <MagYaw_RollKompensated+0x134>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003898 <MagYaw_RollKompensated+0x138>
 8003858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385c:	ee17 0a90 	vmov	r0, s15
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_f2d>
 8003864:	a308      	add	r3, pc, #32	; (adr r3, 8003888 <MagYaw_RollKompensated+0x128>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fff7 	bl	800085c <__aeabi_ddiv>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	f7fd f9bf 	bl	8000bf8 <__aeabi_d2f>
 800387a:	4603      	mov	r3, r0
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <MagYaw_RollKompensated+0x13c>)
 800387e:	6013      	str	r3, [r2, #0]
  //yawRefMag_roll = atan2f(B_roll[1], B_roll[0]) *180.0f / M_PI;
  //yawRefMag_raw = atan2f(By_corrected,Bx_corrected)*180.0f / M_PI;
//  yawRefMag_r1r2r3 = atan2f(B_r1r2r3[1], B_r1r2r3[0]);// *180.0f / M_PI;
//  yawRefMag_r3r2r1 = atan2f(B_r3r2r1[1], B_r3r2r1[0]);

 }
 8003880:	bf00      	nop
 8003882:	373c      	adds	r7, #60	; 0x3c
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	54442d18 	.word	0x54442d18
 800388c:	400921fb 	.word	0x400921fb
 8003890:	2000028c 	.word	0x2000028c
 8003894:	200002b0 	.word	0x200002b0
 8003898:	43340000 	.word	0x43340000
 800389c:	200002b4 	.word	0x200002b4

080038a0 <Pitch_Roll_transfomration>:
};



void Pitch_Roll_transfomration(float *Bx_corrected, float *By_corrected, float *Bz_corrected, float *cos_r, float *sin_r, float *cos_p, float *sin_p)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
 B_pr[0] = (*Bx_corrected) * (*cos_p)   + (*By_corrected) * ((*sin_p)*(*sin_r))  + (*Bz_corrected) * ((*sin_p)*(*cos_r));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	edd3 6a00 	vldr	s13, [r3]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	ed93 6a00 	vldr	s12, [r3]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	edd3 7a00 	vldr	s15, [r3]
 80038d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edd3 6a00 	vldr	s13, [r3]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	ed93 6a00 	vldr	s12, [r3]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fa:	4b25      	ldr	r3, [pc, #148]	; (8003990 <Pitch_Roll_transfomration+0xf0>)
 80038fc:	edc3 7a00 	vstr	s15, [r3]
 B_pr[1] =                        + (*By_corrected) * (*cos_r)          + (*Bz_corrected) * -(*sin_r);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	ed93 7a00 	vldr	s14, [r3]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	edd3 6a00 	vldr	s13, [r3]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eef1 7a67 	vneg.f32	s15, s15
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <Pitch_Roll_transfomration+0xf0>)
 800392a:	edc3 7a01 	vstr	s15, [r3, #4]
 B_pr[2] = (*Bx_corrected) * -(*sin_p)  + (*By_corrected) * (*cos_p)*(*sin_r)    + (*Bz_corrected) * ((*cos_r) * (*cos_p));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	ed93 7a00 	vldr	s14, [r3]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	eef1 7a67 	vneg.f32	s15, s15
 800393e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	edd3 6a00 	vldr	s13, [r3]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	edd3 6a00 	vldr	s13, [r3]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	ed93 6a00 	vldr	s12, [r3]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <Pitch_Roll_transfomration+0xf0>)
 8003980:	edc3 7a02 	vstr	s15, [r3, #8]
};
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	2000028c 	.word	0x2000028c

08003994 <mpu9250_ncs_pin_config>:




void mpu9250_ncs_pin_config(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <mpu9250_ncs_pin_config+0x34>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <mpu9250_ncs_pin_config+0x34>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 as output pin*/
	GPIOA->MODER |= (1U<<0);
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <mpu9250_ncs_pin_config+0x38>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <mpu9250_ncs_pin_config+0x38>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<1);
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <mpu9250_ncs_pin_config+0x38>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a05      	ldr	r2, [pc, #20]	; (80039cc <mpu9250_ncs_pin_config+0x38>)
 80039b6:	f023 0302 	bic.w	r3, r3, #2
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020000 	.word	0x40020000

080039d0 <mpu9250_ncs_pin_set>:

void mpu9250_ncs_pin_set(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1U<<0);
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <mpu9250_ncs_pin_set+0x1c>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <mpu9250_ncs_pin_set+0x1c>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6153      	str	r3, [r2, #20]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40020000 	.word	0x40020000

080039f0 <mpu9250_ncs_pin_reset>:

void mpu9250_ncs_pin_reset(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1U<<0);
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <mpu9250_ncs_pin_reset+0x1c>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <mpu9250_ncs_pin_reset+0x1c>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6153      	str	r3, [r2, #20]
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40020000 	.word	0x40020000

08003a10 <mpu9250_accel_config>:
}


/******************ACCEL**********************/
void mpu9250_accel_config(uint8_t mode)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]

	switch(mode)
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b18      	cmp	r3, #24
 8003a1e:	d852      	bhi.n	8003ac6 <mpu9250_accel_config+0xb6>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <mpu9250_accel_config+0x18>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003ac7 	.word	0x08003ac7
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003ac7 	.word	0x08003ac7
 8003a38:	08003ac7 	.word	0x08003ac7
 8003a3c:	08003ac7 	.word	0x08003ac7
 8003a40:	08003ac7 	.word	0x08003ac7
 8003a44:	08003ac7 	.word	0x08003ac7
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003ac7 	.word	0x08003ac7
 8003a50:	08003ac7 	.word	0x08003ac7
 8003a54:	08003ac7 	.word	0x08003ac7
 8003a58:	08003ac7 	.word	0x08003ac7
 8003a5c:	08003ac7 	.word	0x08003ac7
 8003a60:	08003ac7 	.word	0x08003ac7
 8003a64:	08003ac7 	.word	0x08003ac7
 8003a68:	08003aab 	.word	0x08003aab
 8003a6c:	08003ac7 	.word	0x08003ac7
 8003a70:	08003ac7 	.word	0x08003ac7
 8003a74:	08003ac7 	.word	0x08003ac7
 8003a78:	08003ac7 	.word	0x08003ac7
 8003a7c:	08003ac7 	.word	0x08003ac7
 8003a80:	08003ac7 	.word	0x08003ac7
 8003a84:	08003ac7 	.word	0x08003ac7
 8003a88:	08003ab9 	.word	0x08003ab9
	{
		case ACC_FULL_SCALE_2_G:
			g_accel_range = 2.0;
 8003a8c:	4938      	ldr	r1, [pc, #224]	; (8003b70 <mpu9250_accel_config+0x160>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a96:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003a9a:	e015      	b.n	8003ac8 <mpu9250_accel_config+0xb8>

		case ACC_FULL_SCALE_4_G:
			g_accel_range = 4.0;
 8003a9c:	4934      	ldr	r1, [pc, #208]	; (8003b70 <mpu9250_accel_config+0x160>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <mpu9250_accel_config+0x164>)
 8003aa4:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003aa8:	e00e      	b.n	8003ac8 <mpu9250_accel_config+0xb8>

		case ACC_FULL_SCALE_8_G:
			g_accel_range = 8.0;
 8003aaa:	4931      	ldr	r1, [pc, #196]	; (8003b70 <mpu9250_accel_config+0x160>)
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <mpu9250_accel_config+0x168>)
 8003ab2:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003ab6:	e007      	b.n	8003ac8 <mpu9250_accel_config+0xb8>

		case ACC_FULL_SCALE_16_G:
			g_accel_range = 16.0;
 8003ab8:	492d      	ldr	r1, [pc, #180]	; (8003b70 <mpu9250_accel_config+0x160>)
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <mpu9250_accel_config+0x16c>)
 8003ac0:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003ac4:	e000      	b.n	8003ac8 <mpu9250_accel_config+0xb8>
		default:
			break;
 8003ac6:	bf00      	nop
	}
	/************************************/
		//Ab hier eingefügter CODE

		/*H_RESET: Reset the PWR_MGMT_1 Register */
		spi_data_buff[0] = 0x6B;
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003aca:	226b      	movs	r2, #107	; 0x6b
 8003acc:	701a      	strb	r2, [r3, #0]
		spi_data_buff[1] = (1U<<7);
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	705a      	strb	r2, [r3, #1]

		dma2_stream3_spi_transfer((uint32_t) spi_data_buff, (uint32_t) SPI_DATA_BUFF_LEN);
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fbf3 	bl	80042c4 <dma2_stream3_spi_transfer>

		/*Wait for transfer completion*/
		while(!g_tx_cmplt){}
 8003ade:	bf00      	nop
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0fb      	beq.n	8003ae0 <mpu9250_accel_config+0xd0>

		/*Reset flag*/
		g_tx_cmplt = 0;
 8003ae8:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]

		/*Disable Sleep Mode */
		spi_data_buff[0] = 0x6B;
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003af0:	226b      	movs	r2, #107	; 0x6b
 8003af2:	701a      	strb	r2, [r3, #0]
		spi_data_buff[1] &= ~(1U<<6);
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b00:	705a      	strb	r2, [r3, #1]

		dma2_stream3_spi_transfer((uint32_t) spi_data_buff, (uint32_t) SPI_DATA_BUFF_LEN);
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fbdc 	bl	80042c4 <dma2_stream3_spi_transfer>

		/*Wait for transfer completion*/
		while(!g_tx_cmplt){}
 8003b0c:	bf00      	nop
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0fb      	beq.n	8003b0e <mpu9250_accel_config+0xfe>

		/*Reset flag*/
		g_tx_cmplt = 0;
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
	/************************************/

	/*Set to SPI mode only*/
	spi_data_buff[0] = MPU9250_ADDR_USER_CTRL;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b1e:	226a      	movs	r2, #106	; 0x6a
 8003b20:	701a      	strb	r2, [r3, #0]
	spi_data_buff[1] = USER_CTRL_I2C_IF_DIS;
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b24:	2210      	movs	r2, #16
 8003b26:	705a      	strb	r2, [r3, #1]

	dma2_stream3_spi_transfer((uint32_t) spi_data_buff, (uint32_t) SPI_DATA_BUFF_LEN);
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fbc9 	bl	80042c4 <dma2_stream3_spi_transfer>

	/*Wait for transfer completion*/
	while(!g_tx_cmplt){}
 8003b32:	bf00      	nop
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0fb      	beq.n	8003b34 <mpu9250_accel_config+0x124>

	/*Reset flag*/
	g_tx_cmplt = 0;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]


	/*Configure the ACCEL Range*/
	spi_data_buff[0] = MPU9250_ADDR_ACCELCONFIG;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b44:	221c      	movs	r2, #28
 8003b46:	701a      	strb	r2, [r3, #0]
	spi_data_buff[1] = mode;
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	7053      	strb	r3, [r2, #1]

	dma2_stream3_spi_transfer((uint32_t) spi_data_buff, (uint32_t) SPI_DATA_BUFF_LEN);
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <mpu9250_accel_config+0x170>)
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fbb6 	bl	80042c4 <dma2_stream3_spi_transfer>

	/*Wait for transfer completion*/
	while(!g_tx_cmplt){}
 8003b58:	bf00      	nop
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0fb      	beq.n	8003b5a <mpu9250_accel_config+0x14a>

	/*Reset flag*/
	g_tx_cmplt = 0;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <mpu9250_accel_config+0x174>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200003d8 	.word	0x200003d8
 8003b74:	40100000 	.word	0x40100000
 8003b78:	40200000 	.word	0x40200000
 8003b7c:	40300000 	.word	0x40300000
 8003b80:	200003cc 	.word	0x200003cc
 8003b84:	200003ce 	.word	0x200003ce

08003b88 <mpu9250_accel_gyro_update>:

void mpu9250_accel_gyro_update(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	dummy_buff[0] =  MPU9250_ACCEL_XOUT_H |READ_FLAG;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <mpu9250_accel_gyro_update+0x40>)
 8003b8e:	22bb      	movs	r2, #187	; 0xbb
 8003b90:	701a      	strb	r2, [r3, #0]

	dma2_stream3_spi_transfer((uint32_t) dummy_buff, (uint32_t)(MAX_TRANSFER_LEN + 1));
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <mpu9250_accel_gyro_update+0x40>)
 8003b94:	210f      	movs	r1, #15
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb94 	bl	80042c4 <dma2_stream3_spi_transfer>

	dma2_stream2_spi_receive((uint32_t)accel_gyro_buff,(uint32_t)(MAX_TRANSFER_LEN + 1));
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <mpu9250_accel_gyro_update+0x44>)
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fbb3 	bl	800430c <dma2_stream2_spi_receive>

	Array_len_accel = sizeof(accel_gyro_buff)/sizeof(uint8_t);
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <mpu9250_accel_gyro_update+0x48>)
 8003ba8:	220f      	movs	r2, #15
 8003baa:	701a      	strb	r2, [r3, #0]
	Array_len_dummy =  sizeof(dummy_buff)/sizeof(uint8_t);
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <mpu9250_accel_gyro_update+0x4c>)
 8003bae:	220f      	movs	r2, #15
 8003bb0:	701a      	strb	r2, [r3, #0]

	/*Wait for reception completion*/
	while(!g_rx_cmplt){}
 8003bb2:	bf00      	nop
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <mpu9250_accel_gyro_update+0x50>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0fb      	beq.n	8003bb4 <mpu9250_accel_gyro_update+0x2c>

	/*Reset flag*/
	g_rx_cmplt = 0;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <mpu9250_accel_gyro_update+0x50>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200003a8 	.word	0x200003a8
 8003bcc:	200003b8 	.word	0x200003b8
 8003bd0:	200003c7 	.word	0x200003c7
 8003bd4:	200003c8 	.word	0x200003c8
 8003bd8:	200003cf 	.word	0x200003cf
 8003bdc:	00000000 	.word	0x00000000

08003be0 <mpu9250_accel_get>:

float mpu9250_accel_get(uint8_t high_idx, uint8_t low_idx)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	460a      	mov	r2, r1
 8003bea:	71fb      	strb	r3, [r7, #7]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71bb      	strb	r3, [r7, #6]
	int16_t rslt;
	rslt  =  accel_gyro_buff[high_idx] << 8 | accel_gyro_buff[low_idx];
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <mpu9250_accel_get+0xa0>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b21a      	sxth	r2, r3
 8003bfa:	79bb      	ldrb	r3, [r7, #6]
 8003bfc:	4920      	ldr	r1, [pc, #128]	; (8003c80 <mpu9250_accel_get+0xa0>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	81fb      	strh	r3, [r7, #14]

	if(rslt)
 8003c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d029      	beq.n	8003c62 <mpu9250_accel_get+0x82>
	{
		return ((float)- rslt) * g_accel_range / (float)0x8000 *9.81f;
 8003c0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c12:	425b      	negs	r3, r3
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1c:	ee17 0a90 	vmov	r0, s15
 8003c20:	f7fc fc9a 	bl	8000558 <__aeabi_f2d>
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <mpu9250_accel_get+0xa4>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f7fc fced 	bl	8000608 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <mpu9250_accel_get+0xa8>)
 8003c3c:	f7fc fe0e 	bl	800085c <__aeabi_ddiv>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	a30b      	add	r3, pc, #44	; (adr r3, 8003c78 <mpu9250_accel_get+0x98>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f7fc fcdb 	bl	8000608 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ffcd 	bl	8000bf8 <__aeabi_d2f>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	e001      	b.n	8003c66 <mpu9250_accel_get+0x86>
	}
	else
	{
		return 0.0;
 8003c62:	f04f 0300 	mov.w	r3, #0
	}
}
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	f3af 8000 	nop.w
 8003c78:	60000000 	.word	0x60000000
 8003c7c:	40239eb8 	.word	0x40239eb8
 8003c80:	200003b8 	.word	0x200003b8
 8003c84:	200003d8 	.word	0x200003d8
 8003c88:	40e00000 	.word	0x40e00000
 8003c8c:	00000000 	.word	0x00000000

08003c90 <mpu9250_gyro_get>:

float mpu9250_gyro_get(uint8_t high_idx, uint8_t low_idx)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	460a      	mov	r2, r1
 8003c9a:	71fb      	strb	r3, [r7, #7]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71bb      	strb	r3, [r7, #6]
	int16_t rslt;
	rslt  =  accel_gyro_buff[high_idx] << 8 | accel_gyro_buff[low_idx];
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <mpu9250_gyro_get+0xa0>)
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	79bb      	ldrb	r3, [r7, #6]
 8003cac:	4920      	ldr	r1, [pc, #128]	; (8003d30 <mpu9250_gyro_get+0xa0>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	81fb      	strh	r3, [r7, #14]

	if(rslt)
 8003cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d029      	beq.n	8003d12 <mpu9250_gyro_get+0x82>
	{
 		return ((float)- rslt) * g_gyro_range / (float)0x8000 *(M_PI/180);
 8003cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cc2:	425b      	negs	r3, r3
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ccc:	ee17 0a90 	vmov	r0, s15
 8003cd0:	f7fc fc42 	bl	8000558 <__aeabi_f2d>
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <mpu9250_gyro_get+0xa4>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc fc95 	bl	8000608 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <mpu9250_gyro_get+0xa8>)
 8003cec:	f7fc fdb6 	bl	800085c <__aeabi_ddiv>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	a30b      	add	r3, pc, #44	; (adr r3, 8003d28 <mpu9250_gyro_get+0x98>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc83 	bl	8000608 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f7fc ff75 	bl	8000bf8 <__aeabi_d2f>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	e001      	b.n	8003d16 <mpu9250_gyro_get+0x86>
	}
	else
	{
		return 0.0;
 8003d12:	f04f 0300 	mov.w	r3, #0
	}
}
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	f3af 8000 	nop.w
 8003d28:	a2529d39 	.word	0xa2529d39
 8003d2c:	3f91df46 	.word	0x3f91df46
 8003d30:	200003b8 	.word	0x200003b8
 8003d34:	200003e0 	.word	0x200003e0
 8003d38:	40e00000 	.word	0x40e00000

08003d3c <mpu9250_get_acc_x>:
}



float mpu9250_get_acc_x(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	return mpu9250_accel_get(1,2);
 8003d40:	2102      	movs	r1, #2
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7ff ff4c 	bl	8003be0 <mpu9250_accel_get>
 8003d48:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <mpu9250_get_acc_y>:

float mpu9250_get_acc_y(void)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	af00      	add	r7, sp, #0
	return mpu9250_accel_get(3,4);
 8003d56:	2104      	movs	r1, #4
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f7ff ff41 	bl	8003be0 <mpu9250_accel_get>
 8003d5e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <mpu9250_get_acc_z>:

float mpu9250_get_acc_z(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
	return mpu9250_accel_get(5,6);
 8003d6c:	2106      	movs	r1, #6
 8003d6e:	2005      	movs	r0, #5
 8003d70:	f7ff ff36 	bl	8003be0 <mpu9250_accel_get>
 8003d74:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <mpu9250_gyro_config>:
	return mpu9250_accel_get(7,8);
}

/******************GYRO**********************/
void mpu9250_gyro_config(uint8_t mode)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]

	switch(mode)
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b18      	cmp	r3, #24
 8003d8e:	d851      	bhi.n	8003e34 <mpu9250_gyro_config+0xb4>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <mpu9250_gyro_config+0x18>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dfd 	.word	0x08003dfd
 8003d9c:	08003e35 	.word	0x08003e35
 8003da0:	08003e35 	.word	0x08003e35
 8003da4:	08003e35 	.word	0x08003e35
 8003da8:	08003e35 	.word	0x08003e35
 8003dac:	08003e35 	.word	0x08003e35
 8003db0:	08003e35 	.word	0x08003e35
 8003db4:	08003e35 	.word	0x08003e35
 8003db8:	08003e0b 	.word	0x08003e0b
 8003dbc:	08003e35 	.word	0x08003e35
 8003dc0:	08003e35 	.word	0x08003e35
 8003dc4:	08003e35 	.word	0x08003e35
 8003dc8:	08003e35 	.word	0x08003e35
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003e35 	.word	0x08003e35
 8003dd4:	08003e35 	.word	0x08003e35
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e35 	.word	0x08003e35
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003e35 	.word	0x08003e35
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e27 	.word	0x08003e27
	{
		case GYRO_FULL_SCALE_250:
			g_gyro_range = 250;
 8003dfc:	4919      	ldr	r1, [pc, #100]	; (8003e64 <mpu9250_gyro_config+0xe4>)
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <mpu9250_gyro_config+0xe8>)
 8003e04:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003e08:	e015      	b.n	8003e36 <mpu9250_gyro_config+0xb6>

		case GYRO_FULL_SCALE_500:
			g_gyro_range = 500;
 8003e0a:	4916      	ldr	r1, [pc, #88]	; (8003e64 <mpu9250_gyro_config+0xe4>)
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <mpu9250_gyro_config+0xec>)
 8003e12:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003e16:	e00e      	b.n	8003e36 <mpu9250_gyro_config+0xb6>

		case GYRO_FULL_SCALE_1000:
			g_gyro_range = 1000;
 8003e18:	4912      	ldr	r1, [pc, #72]	; (8003e64 <mpu9250_gyro_config+0xe4>)
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <mpu9250_gyro_config+0xf0>)
 8003e20:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003e24:	e007      	b.n	8003e36 <mpu9250_gyro_config+0xb6>

		case GYRO_FULL_SCALE_2000:
			g_gyro_range = 2000;
 8003e26:	490f      	ldr	r1, [pc, #60]	; (8003e64 <mpu9250_gyro_config+0xe4>)
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <mpu9250_gyro_config+0xf4>)
 8003e2e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003e32:	e000      	b.n	8003e36 <mpu9250_gyro_config+0xb6>
		default:
			break;
 8003e34:	bf00      	nop
	}
	/*Configure the GYRO Range*/
	spi_data_buff[0] = MPU9250_ADDR_GYROCONFIG;
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <mpu9250_gyro_config+0xf8>)
 8003e38:	221b      	movs	r2, #27
 8003e3a:	701a      	strb	r2, [r3, #0]
	spi_data_buff[1] = mode;
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <mpu9250_gyro_config+0xf8>)
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	7053      	strb	r3, [r2, #1]

	dma2_stream3_spi_transfer((uint32_t) spi_data_buff, (uint32_t) SPI_DATA_BUFF_LEN);
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <mpu9250_gyro_config+0xf8>)
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa3c 	bl	80042c4 <dma2_stream3_spi_transfer>

	/*Wait for transfer completion*/
	while(!g_tx_cmplt){}
 8003e4c:	bf00      	nop
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <mpu9250_gyro_config+0xfc>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0fb      	beq.n	8003e4e <mpu9250_gyro_config+0xce>

	/*Reset flag*/
	g_tx_cmplt = 0;
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <mpu9250_gyro_config+0xfc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]

}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200003e0 	.word	0x200003e0
 8003e68:	406f4000 	.word	0x406f4000
 8003e6c:	407f4000 	.word	0x407f4000
 8003e70:	408f4000 	.word	0x408f4000
 8003e74:	409f4000 	.word	0x409f4000
 8003e78:	200003cc 	.word	0x200003cc
 8003e7c:	200003ce 	.word	0x200003ce

08003e80 <mpu9250_get_gyro_x>:
	Array_len_dummy =  sizeof(dummy_buff)/sizeof(uint8_t);

}

float mpu9250_get_gyro_x(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	return mpu9250_gyro_get(9,10);
 8003e84:	210a      	movs	r1, #10
 8003e86:	2009      	movs	r0, #9
 8003e88:	f7ff ff02 	bl	8003c90 <mpu9250_gyro_get>
 8003e8c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <mpu9250_get_gyro_y>:

float mpu9250_get_gyro_y(void)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	af00      	add	r7, sp, #0
	return mpu9250_gyro_get(11,12);
 8003e9a:	210c      	movs	r1, #12
 8003e9c:	200b      	movs	r0, #11
 8003e9e:	f7ff fef7 	bl	8003c90 <mpu9250_gyro_get>
 8003ea2:	eef0 7a40 	vmov.f32	s15, s0
}
 8003ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <mpu9250_get_gyro_z>:

float mpu9250_get_gyro_z(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	return mpu9250_gyro_get(13,14);
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	200d      	movs	r0, #13
 8003eb4:	f7ff feec 	bl	8003c90 <mpu9250_gyro_get>
 8003eb8:	eef0 7a40 	vmov.f32	s15, s0
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <DMA2_Stream3_IRQHandler>:

/********************************************/

/*****************ISR************************/
void DMA2_Stream3_IRQHandler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	if((DMA2->LISR) & LISR_TCIF3)
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <DMA2_Stream3_IRQHandler+0x30>
	{
		//do something...
		g_tx_cmplt = 1;
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <DMA2_Stream3_IRQHandler+0x64>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
		//DMA2_Stream3->CR &= ~DMA_SxCR_EN;
		//Clear the flag
		DMA2->LIFCR |=LIFCR_CTCIF3;
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003ee0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	6093      	str	r3, [r2, #8]
		data_tx++;
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <DMA2_Stream3_IRQHandler+0x68>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <DMA2_Stream3_IRQHandler+0x68>)
 8003ef0:	801a      	strh	r2, [r3, #0]
        //do something...
		error_tx++;
		//Clear the flag
		DMA2->LIFCR |=LIFCR_CTEIF3;
	}
}
 8003ef2:	e011      	b.n	8003f18 <DMA2_Stream3_IRQHandler+0x54>
	else if((DMA2->LISR) & LISR_TEIF3)
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <DMA2_Stream3_IRQHandler+0x54>
		error_tx++;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <DMA2_Stream3_IRQHandler+0x6c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <DMA2_Stream3_IRQHandler+0x6c>)
 8003f0a:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |=LIFCR_CTEIF3;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <DMA2_Stream3_IRQHandler+0x60>)
 8003f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f16:	6093      	str	r3, [r2, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40026400 	.word	0x40026400
 8003f28:	200003ce 	.word	0x200003ce
 8003f2c:	200003d0 	.word	0x200003d0
 8003f30:	200003d4 	.word	0x200003d4

08003f34 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
	if((DMA2->LISR) & LISR_TCIF2)
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <DMA2_Stream2_IRQHandler+0x30>
	{
		//do something...
		g_rx_cmplt = 1;
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <DMA2_Stream2_IRQHandler+0x64>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
		//DMA2_Stream2->CR&=~DMA_SxCR_EN;
		//Clear the flag
		DMA2->LIFCR |=LIFCR_CTCIF2;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f54:	6093      	str	r3, [r2, #8]
		data_rx++;
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <DMA2_Stream2_IRQHandler+0x68>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <DMA2_Stream2_IRQHandler+0x68>)
 8003f60:	801a      	strh	r2, [r3, #0]
        //do something...
		error_rx++;
		//Clear the flag
		DMA2->LIFCR |=LIFCR_CTEIF2;
	}
}
 8003f62:	e011      	b.n	8003f88 <DMA2_Stream2_IRQHandler+0x54>
	else if((DMA2->LISR) & LISR_TEIF2)
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <DMA2_Stream2_IRQHandler+0x54>
		error_rx++;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <DMA2_Stream2_IRQHandler+0x6c>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <DMA2_Stream2_IRQHandler+0x6c>)
 8003f7a:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |=LIFCR_CTEIF2;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <DMA2_Stream2_IRQHandler+0x60>)
 8003f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f86:	6093      	str	r3, [r2, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40026400 	.word	0x40026400
 8003f98:	200003cf 	.word	0x200003cf
 8003f9c:	200003d2 	.word	0x200003d2
 8003fa0:	200003d5 	.word	0x200003d5

08003fa4 <__NVIC_EnableIRQ>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db0b      	blt.n	8003fce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4907      	ldr	r1, [pc, #28]	; (8003fdc <__NVIC_EnableIRQ+0x38>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <spi1_dma_init>:
#define HIFSR_TCIF5		(1U<<11)
#define HIFSR_TCIF6		(1U<<21)


void spi1_dma_init(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0

	/*************GPIO Configuration*****************/
	/*Enable clock to PORT of SPI pins*/
	RCC->AHB1ENR |= GPIOAEN;
 8003fe4:	4b56      	ldr	r3, [pc, #344]	; (8004140 <spi1_dma_init+0x160>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4a55      	ldr	r2, [pc, #340]	; (8004140 <spi1_dma_init+0x160>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set SPI pins mode to alternate function mode*/
	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8003ff0:	4b54      	ldr	r3, [pc, #336]	; (8004144 <spi1_dma_init+0x164>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a53      	ldr	r2, [pc, #332]	; (8004144 <spi1_dma_init+0x164>)
 8003ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ffa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <spi1_dma_init+0x164>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a50      	ldr	r2, [pc, #320]	; (8004144 <spi1_dma_init+0x164>)
 8004002:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004006:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8004008:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <spi1_dma_init+0x164>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4d      	ldr	r2, [pc, #308]	; (8004144 <spi1_dma_init+0x164>)
 800400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004012:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8004014:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <spi1_dma_init+0x164>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4a      	ldr	r2, [pc, #296]	; (8004144 <spi1_dma_init+0x164>)
 800401a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800401e:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8004020:	4b48      	ldr	r3, [pc, #288]	; (8004144 <spi1_dma_init+0x164>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a47      	ldr	r2, [pc, #284]	; (8004144 <spi1_dma_init+0x164>)
 8004026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800402a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <spi1_dma_init+0x164>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <spi1_dma_init+0x164>)
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	6013      	str	r3, [r2, #0]

	/*Set alternate type to AF5(SPI1)*/
	/*PA5*/
	GPIOA->AFR[0]  |= (1U<<20);
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <spi1_dma_init+0x164>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4a41      	ldr	r2, [pc, #260]	; (8004144 <spi1_dma_init+0x164>)
 800403e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004042:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<21);
 8004044:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <spi1_dma_init+0x164>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4a3e      	ldr	r2, [pc, #248]	; (8004144 <spi1_dma_init+0x164>)
 800404a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800404e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |= (1U<<22);
 8004050:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <spi1_dma_init+0x164>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4a3b      	ldr	r2, [pc, #236]	; (8004144 <spi1_dma_init+0x164>)
 8004056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800405a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<23);
 800405c:	4b39      	ldr	r3, [pc, #228]	; (8004144 <spi1_dma_init+0x164>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4a38      	ldr	r2, [pc, #224]	; (8004144 <spi1_dma_init+0x164>)
 8004062:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004066:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0]  |= (1U<<24);
 8004068:	4b36      	ldr	r3, [pc, #216]	; (8004144 <spi1_dma_init+0x164>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a35      	ldr	r2, [pc, #212]	; (8004144 <spi1_dma_init+0x164>)
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004072:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<25);
 8004074:	4b33      	ldr	r3, [pc, #204]	; (8004144 <spi1_dma_init+0x164>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a32      	ldr	r2, [pc, #200]	; (8004144 <spi1_dma_init+0x164>)
 800407a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800407e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |= (1U<<26);
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <spi1_dma_init+0x164>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <spi1_dma_init+0x164>)
 8004086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800408a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<27);
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <spi1_dma_init+0x164>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <spi1_dma_init+0x164>)
 8004092:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004096:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0]  |= (1U<<28);
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <spi1_dma_init+0x164>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4a29      	ldr	r2, [pc, #164]	; (8004144 <spi1_dma_init+0x164>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<29);
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <spi1_dma_init+0x164>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4a26      	ldr	r2, [pc, #152]	; (8004144 <spi1_dma_init+0x164>)
 80040aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |= (1U<<30);
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <spi1_dma_init+0x164>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <spi1_dma_init+0x164>)
 80040b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~(1U<<31);
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <spi1_dma_init+0x164>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <spi1_dma_init+0x164>)
 80040c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	6213      	str	r3, [r2, #32]

	/*************SPI Configuration*****************/

	/*Enable clock access to SPI1 module*/
	RCC->APB2ENR |=SPI1EN;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <spi1_dma_init+0x160>)
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <spi1_dma_init+0x160>)
 80040ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d2:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set software slave management*/
	SPI1->CR1 |= CR1_SSM|CR1_SSI;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <spi1_dma_init+0x168>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <spi1_dma_init+0x168>)
 80040da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80040de:	6013      	str	r3, [r2, #0]

	/*Set SPI to master mode*/
	SPI1->CR1 |=CR1_MSTR;
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <spi1_dma_init+0x168>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <spi1_dma_init+0x168>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	6013      	str	r3, [r2, #0]

	/*Set CPHA and CPOL*/
	SPI1->CR1 |=SPI_CR1_BR_0|CR1_PHA|CR1_CPOL;
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <spi1_dma_init+0x168>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <spi1_dma_init+0x168>)
 80040f2:	f043 030b 	orr.w	r3, r3, #11
 80040f6:	6013      	str	r3, [r2, #0]

	/*Set clock divider : PCLCK/4*/
	SPI1->CR1 |=(1U<<3);
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <spi1_dma_init+0x168>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <spi1_dma_init+0x168>)
 80040fe:	f043 0308 	orr.w	r3, r3, #8
 8004102:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<4);
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <spi1_dma_init+0x168>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <spi1_dma_init+0x168>)
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<5);
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <spi1_dma_init+0x168>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <spi1_dma_init+0x168>)
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	6013      	str	r3, [r2, #0]
//	SPI1->CR1 |= (1U<<3);
//	SPI1->CR1 |= (1U<<4);
//	SPI1->CR1 &=~(1U<<5);

	/*Select to use DMA*/
	SPI1->CR2 |=CR2_RXDMAEN|CR2_TXDMAEN;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <spi1_dma_init+0x168>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <spi1_dma_init+0x168>)
 8004122:	f043 0303 	orr.w	r3, r3, #3
 8004126:	6053      	str	r3, [r2, #4]

    /*Enable SPI*/
	SPI1->CR1 |=CR1_SPE;
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <spi1_dma_init+0x168>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a06      	ldr	r2, [pc, #24]	; (8004148 <spi1_dma_init+0x168>)
 800412e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004132:	6013      	str	r3, [r2, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	40020000 	.word	0x40020000
 8004148:	40013000 	.word	0x40013000

0800414c <dma2_stream3_spi_tx_init>:

void dma2_stream3_spi_tx_init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	/************DMA Configuration**********/
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |= DMA2EN;
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <dma2_stream3_spi_tx_init+0xb4>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <dma2_stream3_spi_tx_init+0xb4>)
 8004156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800415a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA stream*/
	DMA2_Stream3->CR = 0;
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

	/*Wait till DMA Stream is disabled*/
	while((DMA2_Stream3->CR & DMA_SCR_EN)){}
 8004162:	bf00      	nop
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f9      	bne.n	8004164 <dma2_stream3_spi_tx_init+0x18>

    /*******Configure DMA Stream parameters************/
	/*Enable memory addr increment*/
	DMA2_Stream3->CR |= DMA_SCR_MINC;
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 8004176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800417a:	6013      	str	r3, [r2, #0]

	/*Select Channel :  CH3*/
	DMA2_Stream3->CR |= (1U<<25);
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a20      	ldr	r2, [pc, #128]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 8004182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004186:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= (1U<<26);
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 800418e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004192:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR &= ~(1U<<27);
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 800419a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800419e:	6013      	str	r3, [r2, #0]

	/*Set transfer direction : Memory to Peripheral*/
	DMA2_Stream3->CR |=(1U<<6);
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041aa:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR &=~(1U<<7);
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	6013      	str	r3, [r2, #0]

	/*Enable transfer complete interrupt*/
	DMA2_Stream3->CR |= DMA_SCR_TCIE;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a11      	ldr	r2, [pc, #68]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041be:	f043 0310 	orr.w	r3, r3, #16
 80041c2:	6013      	str	r3, [r2, #0]

	/*Enable transfer error interrupt*/
	DMA2_Stream3->CR |= DMA_SCR_TEIE;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	6013      	str	r3, [r2, #0]

	/*Disable direct mode*/
	DMA2_Stream3->FCR |=DMA_SFCR_DMDIS;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	6153      	str	r3, [r2, #20]

	/*Set DMA FIFO threshold*/
	DMA2_Stream3->FCR |=(1U<<0);
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6153      	str	r3, [r2, #20]
	DMA2_Stream3->FCR |=(1U<<1);
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <dma2_stream3_spi_tx_init+0xb8>)
 80041ee:	f043 0302 	orr.w	r3, r3, #2
 80041f2:	6153      	str	r3, [r2, #20]

	/*Enable DMA Stream interrupt in the NVIC*/
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80041f4:	203b      	movs	r0, #59	; 0x3b
 80041f6:	f7ff fed5 	bl	8003fa4 <__NVIC_EnableIRQ>

}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40026458 	.word	0x40026458

08004208 <dma2_stream2_spi_rx_init>:

void dma2_stream2_spi_rx_init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	/************DMA Configuration**********/
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |= DMA2EN;
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <dma2_stream2_spi_rx_init+0xb4>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a2a      	ldr	r2, [pc, #168]	; (80042bc <dma2_stream2_spi_rx_init+0xb4>)
 8004212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004216:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable DMA stream*/
	DMA2_Stream2->CR = 0;
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

	/*Wait till DMA Stream is disabled*/
	while((DMA2_Stream2->CR & DMA_SCR_EN)){}
 800421e:	bf00      	nop
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f9      	bne.n	8004220 <dma2_stream2_spi_rx_init+0x18>

    /*******Configure DMA Stream parameters************/
	/*Enable memory addr increment*/
	DMA2_Stream2->CR |= DMA_SCR_MINC;
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]

	/*Select Channel :  CH3*/
	DMA2_Stream2->CR |= (1U<<25);
 8004238:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800423e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004242:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= (1U<<26);
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800424a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800424e:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~(1U<<27);
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004256:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800425a:	6013      	str	r3, [r2, #0]

	/*Set transfer direction : Peripheral to Memory*/
	DMA2_Stream2->CR &=~(1U<<6);
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004266:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &=~(1U<<7);
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004272:	6013      	str	r3, [r2, #0]

	/*Enable transfer complete interrupt*/
	DMA2_Stream2->CR |= DMA_SCR_TCIE;
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800427a:	f043 0310 	orr.w	r3, r3, #16
 800427e:	6013      	str	r3, [r2, #0]

	/*Enable transfer error interrupt*/
	DMA2_Stream2->CR |= DMA_SCR_TEIE;
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004286:	f043 0304 	orr.w	r3, r3, #4
 800428a:	6013      	str	r3, [r2, #0]

	/*Disable direct mode*/
	DMA2_Stream2->FCR |=DMA_SFCR_DMDIS;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6153      	str	r3, [r2, #20]

	/*Set DMA FIFO threshold :  Full*/
	DMA2_Stream2->FCR |=(1U<<0);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6153      	str	r3, [r2, #20]
	DMA2_Stream2->FCR |=(1U<<1);
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <dma2_stream2_spi_rx_init+0xb8>)
 80042aa:	f043 0302 	orr.w	r3, r3, #2
 80042ae:	6153      	str	r3, [r2, #20]

	/*Enable DMA Stream interrupt in the NVIC*/
	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80042b0:	203a      	movs	r0, #58	; 0x3a
 80042b2:	f7ff fe77 	bl	8003fa4 <__NVIC_EnableIRQ>


}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40026440 	.word	0x40026440

080042c4 <dma2_stream3_spi_transfer>:

void dma2_stream3_spi_transfer(uint32_t msg_to_send, uint32_t msg_len)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	/*Clear interrupt flags*/
	DMA2->LIFCR = LIFCR_CTCIF3 |LIFCR_CTEIF3;
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <dma2_stream3_spi_transfer+0x3c>)
 80042d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80042d4:	609a      	str	r2, [r3, #8]

	/*Set Peripheral address*/
	DMA2_Stream3->PAR =	(uint32_t)(&(SPI1->DR));
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <dma2_stream3_spi_transfer+0x40>)
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <dma2_stream3_spi_transfer+0x44>)
 80042da:	609a      	str	r2, [r3, #8]

	/*Set Memory address*/
	DMA2_Stream3->M0AR = msg_to_send;
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <dma2_stream3_spi_transfer+0x40>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60d3      	str	r3, [r2, #12]

	/*Set transfer length*/
	DMA2_Stream3->NDTR = msg_len;
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <dma2_stream3_spi_transfer+0x40>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6053      	str	r3, [r2, #4]

	/*Enable the DMA Stream*/
	DMA2_Stream3->CR |= DMA_SCR_EN;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <dma2_stream3_spi_transfer+0x40>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a05      	ldr	r2, [pc, #20]	; (8004304 <dma2_stream3_spi_transfer+0x40>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40026400 	.word	0x40026400
 8004304:	40026458 	.word	0x40026458
 8004308:	4001300c 	.word	0x4001300c

0800430c <dma2_stream2_spi_receive>:

void dma2_stream2_spi_receive(uint32_t received_msg, uint32_t msg_len)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	/*Clear interrupt flags*/
	DMA2->LIFCR = LIFCR_CTCIF2 |LIFCR_CTEIF2;
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <dma2_stream2_spi_receive+0x3c>)
 8004318:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 800431c:	609a      	str	r2, [r3, #8]

	/*Set Peripheral address*/
	DMA2_Stream2->PAR =	(uint32_t)(&(SPI1->DR));
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <dma2_stream2_spi_receive+0x40>)
 8004320:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <dma2_stream2_spi_receive+0x44>)
 8004322:	609a      	str	r2, [r3, #8]

	/*Set Memory address*/
	DMA2_Stream2->M0AR = received_msg;
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <dma2_stream2_spi_receive+0x40>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60d3      	str	r3, [r2, #12]

	/*Set transfer length*/
	DMA2_Stream2->NDTR = msg_len;
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <dma2_stream2_spi_receive+0x40>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6053      	str	r3, [r2, #4]

	/*Enable the DMA Stream*/
	DMA2_Stream2->CR |= DMA_SCR_EN;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <dma2_stream2_spi_receive+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a05      	ldr	r2, [pc, #20]	; (800434c <dma2_stream2_spi_receive+0x40>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6013      	str	r3, [r2, #0]

}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40026400 	.word	0x40026400
 800434c:	40026440 	.word	0x40026440
 8004350:	4001300c 	.word	0x4001300c

08004354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
	return 1;
 8004358:	2301      	movs	r3, #1
}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <_kill>:

int _kill(int pid, int sig)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800436e:	f000 fb1d 	bl	80049ac <__errno>
 8004372:	4603      	mov	r3, r0
 8004374:	2216      	movs	r2, #22
 8004376:	601a      	str	r2, [r3, #0]
	return -1;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_exit>:

void _exit (int status)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800438c:	f04f 31ff 	mov.w	r1, #4294967295
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ffe7 	bl	8004364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004396:	e7fe      	b.n	8004396 <_exit+0x12>

08004398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e00a      	b.n	80043c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043aa:	f3af 8000 	nop.w
 80043ae:	4601      	mov	r1, r0
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	60ba      	str	r2, [r7, #8]
 80043b6:	b2ca      	uxtb	r2, r1
 80043b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3301      	adds	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	dbf0      	blt.n	80043aa <_read+0x12>
	}

return len;
 80043c8:	687b      	ldr	r3, [r7, #4]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e009      	b.n	80043f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	60ba      	str	r2, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f989 	bl	8004704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3301      	adds	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	dbf1      	blt.n	80043e4 <_write+0x12>
	}
	return len;
 8004400:	687b      	ldr	r3, [r7, #4]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <_close>:

int _close(int file)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	return -1;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004432:	605a      	str	r2, [r3, #4]
	return 0;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_isatty>:

int _isatty(int file)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
	return 1;
 800444a:	2301      	movs	r3, #1
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
	return 0;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <_sbrk+0x5c>)
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <_sbrk+0x60>)
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <_sbrk+0x64>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <_sbrk+0x64>)
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <_sbrk+0x68>)
 8004494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <_sbrk+0x64>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d207      	bcs.n	80044b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044a4:	f000 fa82 	bl	80049ac <__errno>
 80044a8:	4603      	mov	r3, r0
 80044aa:	220c      	movs	r2, #12
 80044ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	e009      	b.n	80044c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <_sbrk+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <_sbrk+0x64>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <_sbrk+0x64>)
 80044c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20020000 	.word	0x20020000
 80044d4:	00000400 	.word	0x00000400
 80044d8:	200003e8 	.word	0x200003e8
 80044dc:	20000400 	.word	0x20000400

080044e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <SystemInit+0x20>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <SystemInit+0x20>)
 80044ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	2302      	movs	r3, #2
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	2302      	movs	r3, #2
 800451c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800451e:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d011      	beq.n	8004552 <SystemCoreClockUpdate+0x4e>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d844      	bhi.n	80045be <SystemCoreClockUpdate+0xba>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <SystemCoreClockUpdate+0x3e>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d004      	beq.n	800454a <SystemCoreClockUpdate+0x46>
 8004540:	e03d      	b.n	80045be <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 8004544:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <SystemCoreClockUpdate+0xf4>)
 8004546:	601a      	str	r2, [r3, #0]
      break;
 8004548:	e03d      	b.n	80045c6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800454a:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 800454c:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <SystemCoreClockUpdate+0xf8>)
 800454e:	601a      	str	r2, [r3, #0]
      break;
 8004550:	e039      	b.n	80045c6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004552:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0d9b      	lsrs	r3, r3, #22
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004566:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800456e:	4a23      	ldr	r2, [pc, #140]	; (80045fc <SystemCoreClockUpdate+0xf8>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 8004578:	6852      	ldr	r2, [r2, #4]
 800457a:	0992      	lsrs	r2, r2, #6
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e00b      	b.n	80045a0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <SystemCoreClockUpdate+0xf4>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 8004592:	6852      	ldr	r2, [r2, #4]
 8004594:	0992      	lsrs	r2, r2, #6
 8004596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 80045ba:	6013      	str	r3, [r2, #0]
      break;
 80045bc:	e003      	b.n	80045c6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 80045c0:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <SystemCoreClockUpdate+0xf4>)
 80045c2:	601a      	str	r2, [r3, #0]
      break;
 80045c4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <SystemCoreClockUpdate+0xec>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <SystemCoreClockUpdate+0xfc>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <SystemCoreClockUpdate+0xf0>)
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40023800 	.word	0x40023800
 80045f4:	20000030 	.word	0x20000030
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	017d7840 	.word	0x017d7840
 8004600:	0800a350 	.word	0x0800a350

08004604 <systick_counter_init>:
#define CTRL_ENABLE		(1U<<0)
#define CTRL_TICKINT	(1U<<1)
#define CTRL_CLKSRC		(1U<<2)

void systick_counter_init(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	/*Disable systick before setup*/
	SysTick->CTRL = 0;
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <systick_counter_init+0x28>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

	/*Load Systick reload register with maximum value*/
	SysTick->LOAD = 0x00FFFFFF;
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <systick_counter_init+0x28>)
 8004610:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004614:	605a      	str	r2, [r3, #4]

	/*Clear Systick current value register*/
	SysTick->VAL = 0;
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <systick_counter_init+0x28>)
 8004618:	2200      	movs	r2, #0
 800461a:	609a      	str	r2, [r3, #8]

	/*Select internal clock source and enable SysTick*/
	SysTick->CTRL = CTRL_CLKSRC | CTRL_ENABLE;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <systick_counter_init+0x28>)
 800461e:	2205      	movs	r2, #5
 8004620:	601a      	str	r2, [r3, #0]


}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e010 	.word	0xe000e010

08004630 <__NVIC_EnableIRQ>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	db0b      	blt.n	800465a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <__NVIC_EnableIRQ+0x38>)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2001      	movs	r0, #1
 8004652:	fa00 f202 	lsl.w	r2, r0, r2
 8004656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000e100 	.word	0xe000e100

0800466c <tim2_1khz_interrupt_init>:
	return 1;
}


float tim2_1khz_interrupt_init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
	/*enable clock access to tim2*/
	RCC->APB1ENR |= TIM2EN;
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <tim2_1khz_interrupt_init+0x54>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <tim2_1khz_interrupt_init+0x54>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = 16-1;  // (clk_freq) 16 000 000/ (prescaler) 16 = 1 000 000 (1MHz)
 800467c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004680:	220f      	movs	r2, #15
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR = 1000-1;  // 1 000 / 1 000 000 = 1e-3s = 1 ms
 8004684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM2->CNT = 0;	// komplettes Register Null-setzen
 800468e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 8004696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

	/*Enable TIM interrupt*/
	TIM2->DIER |= DIER_UIE;
 800469e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	60d3      	str	r3, [r2, #12]

	/*Enable TIM interrupt in NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 80046ae:	201c      	movs	r0, #28
 80046b0:	f7ff ffbe 	bl	8004630 <__NVIC_EnableIRQ>

	return 0.001;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <tim2_1khz_interrupt_init+0x58>)
 80046b6:	ee07 3a90 	vmov	s15, r3
}
 80046ba:	eeb0 0a67 	vmov.f32	s0, s15
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	3a83126f 	.word	0x3a83126f

080046c8 <__NVIC_EnableIRQ>:
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db0b      	blt.n	80046f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	f003 021f 	and.w	r2, r3, #31
 80046e0:	4907      	ldr	r1, [pc, #28]	; (8004700 <__NVIC_EnableIRQ+0x38>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2001      	movs	r0, #1
 80046ea:	fa00 f202 	lsl.w	r2, r0, r2
 80046ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100

08004704 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);



int __io_putchar(int ch)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f8a5 	bl	8004860 <uart2_write>
	return ch;
 8004716:	687b      	ldr	r3, [r7, #4]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <uart2_rx_interrupt_init>:
	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
}

void uart2_rx_interrupt_init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <uart2_rx_interrupt_init+0xe0>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <uart2_rx_interrupt_init+0xe0>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a33      	ldr	r2, [pc, #204]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800473c:	4b31      	ldr	r3, [pc, #196]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a30      	ldr	r2, [pc, #192]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004742:	f043 0320 	orr.w	r3, r3, #32
 8004746:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8004748:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8004754:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800475a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800475e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800476a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800476c:	4b25      	ldr	r3, [pc, #148]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004776:	6213      	str	r3, [r2, #32]


	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8004778:	4b22      	ldr	r3, [pc, #136]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 8004796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800479a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 80047a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80047a8:	4b16      	ldr	r3, [pc, #88]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 80047ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <uart2_rx_interrupt_init+0xe4>)
 80047ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047be:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <uart2_rx_interrupt_init+0xe0>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <uart2_rx_interrupt_init+0xe0>)
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ca:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(CLK,UART_BAUDRATE);
 80047cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80047d0:	480d      	ldr	r0, [pc, #52]	; (8004808 <uart2_rx_interrupt_init+0xe8>)
 80047d2:	f000 f831 	bl	8004838 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <uart2_rx_interrupt_init+0xec>)
 80047d8:	220c      	movs	r2, #12
 80047da:	60da      	str	r2, [r3, #12]

	 /*Enable RXNE inteerupt*/
	 USART2->CR1 |= CR1_RXNEIE;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <uart2_rx_interrupt_init+0xec>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <uart2_rx_interrupt_init+0xec>)
 80047e2:	f043 0320 	orr.w	r3, r3, #32
 80047e6:	60d3      	str	r3, [r2, #12]
	 //USART2->CR1 |=CR1_TXNEIE;

	 /*Enable UART2 interrupt in NVIC*/
	 NVIC_EnableIRQ(USART2_IRQn);
 80047e8:	2026      	movs	r0, #38	; 0x26
 80047ea:	f7ff ff6d 	bl	80046c8 <__NVIC_EnableIRQ>

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <uart2_rx_interrupt_init+0xec>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a06      	ldr	r2, [pc, #24]	; (800480c <uart2_rx_interrupt_init+0xec>)
 80047f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047f8:	60d3      	str	r3, [r2, #12]
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	40020000 	.word	0x40020000
 8004808:	00f42400 	.word	0x00f42400
 800480c:	40004400 	.word	0x40004400

08004810 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	return ((periph_clk +( baudrate/2U ))/baudrate);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	441a      	add	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <uart_set_baudrate>:


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	USART2->BRR  = compute_uart_bd(periph_clk,baudrate);
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ffe3 	bl	8004810 <compute_uart_bd>
 800484a:	4603      	mov	r3, r0
 800484c:	461a      	mov	r2, r3
 800484e:	4b03      	ldr	r3, [pc, #12]	; (800485c <uart_set_baudrate+0x24>)
 8004850:	609a      	str	r2, [r3, #8]
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40004400 	.word	0x40004400

08004860 <uart2_write>:
    }
}


void uart2_write(uint8_t ch)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
    // Warten, bis der Sendepuffer leer ist
    while (!(USART2->SR & SR_TXE)) {}
 800486a:	bf00      	nop
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <uart2_write+0x2c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f9      	beq.n	800486c <uart2_write+0xc>

    // Zeichen in den Sendepuffer schreiben
    USART2->DR = ch;
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <uart2_write+0x2c>)
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	6053      	str	r3, [r2, #4]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40004400 	.word	0x40004400

08004890 <uart_send_Magneto>:

void uart_send_Magneto(lsm303MagData *data)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	if (data == NULL)return;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d02c      	beq.n	80048f8 <uart_send_Magneto+0x68>

	for(uint8_t i=0; i<(sizeof(data->Raw_Buffer16)/sizeof(data->Raw_Buffer16[0]));i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e025      	b.n	80048f0 <uart_send_Magneto+0x60>
	{
		uint8_t buff[2];
			buff[0] = ((data->Raw_Buffer16[i])>>8)&0xFF;	//high
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048b0:	121b      	asrs	r3, r3, #8
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	733b      	strb	r3, [r7, #12]
			buff[1] = (data->Raw_Buffer16[i])&0xFF;		//low
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	737b      	strb	r3, [r7, #13]

		    for(uint8_t n=0; n<sizeof(buff);n++)
 80048c8:	2300      	movs	r3, #0
 80048ca:	73bb      	strb	r3, [r7, #14]
 80048cc:	e00a      	b.n	80048e4 <uart_send_Magneto+0x54>
		    {
		    	uart2_write(buff[n]);
 80048ce:	7bbb      	ldrb	r3, [r7, #14]
 80048d0:	3310      	adds	r3, #16
 80048d2:	443b      	add	r3, r7
 80048d4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ffc1 	bl	8004860 <uart2_write>
		    for(uint8_t n=0; n<sizeof(buff);n++)
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	3301      	adds	r3, #1
 80048e2:	73bb      	strb	r3, [r7, #14]
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d9f1      	bls.n	80048ce <uart_send_Magneto+0x3e>
	for(uint8_t i=0; i<(sizeof(data->Raw_Buffer16)/sizeof(data->Raw_Buffer16[0]));i++)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	3301      	adds	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d9d6      	bls.n	80048a4 <uart_send_Magneto+0x14>
 80048f6:	e000      	b.n	80048fa <uart_send_Magneto+0x6a>
	if (data == NULL)return;
 80048f8:	bf00      	nop
		    }
	}
}
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <uart_send_yaw>:


void uart_send_yaw(lsm303MagData *data)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
    if (data == NULL) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d014      	beq.n	8004938 <uart_send_yaw+0x38>
        // Handle error
        return;
    }

    union float_bytes yaw;
    yaw.value = data->yaw;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	60bb      	str	r3, [r7, #8]

    for(uint8_t i=0; i<sizeof(yaw.bytes); i++)
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e00a      	b.n	8004930 <uart_send_yaw+0x30>
    {
        uart2_write(yaw.bytes[i]);
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	3310      	adds	r3, #16
 800491e:	443b      	add	r3, r7
 8004920:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ff9b 	bl	8004860 <uart2_write>
    for(uint8_t i=0; i<sizeof(yaw.bytes); i++)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	3301      	adds	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d9f1      	bls.n	800491a <uart_send_yaw+0x1a>
 8004936:	e000      	b.n	800493a <uart_send_yaw+0x3a>
        return;
 8004938:	bf00      	nop
    }
}
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <uart2_read>:


int8_t uart2_read(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
    // Gelesenes Zeichen zurückgeben
    return (int8_t)(USART2->DR);
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <uart2_read+0x14>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b25b      	sxtb	r3, r3
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40004400 	.word	0x40004400

08004958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800495a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800495c:	f7ff fdc0 	bl	80044e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004960:	480c      	ldr	r0, [pc, #48]	; (8004994 <LoopForever+0x6>)
  ldr r1, =_edata
 8004962:	490d      	ldr	r1, [pc, #52]	; (8004998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004964:	4a0d      	ldr	r2, [pc, #52]	; (800499c <LoopForever+0xe>)
  movs r3, #0
 8004966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004968:	e002      	b.n	8004970 <LoopCopyDataInit>

0800496a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800496a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800496c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800496e:	3304      	adds	r3, #4

08004970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004974:	d3f9      	bcc.n	800496a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004976:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004978:	4c0a      	ldr	r4, [pc, #40]	; (80049a4 <LoopForever+0x16>)
  movs r3, #0
 800497a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800497c:	e001      	b.n	8004982 <LoopFillZerobss>

0800497e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800497e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004980:	3204      	adds	r2, #4

08004982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004984:	d3fb      	bcc.n	800497e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004986:	f000 f817 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800498a:	f7fe fb55 	bl	8003038 <main>

0800498e <LoopForever>:

LoopForever:
    b LoopForever
 800498e:	e7fe      	b.n	800498e <LoopForever>
  ldr   r0, =_estack
 8004990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004998:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800499c:	0800ac14 	.word	0x0800ac14
  ldr r2, =_sbss
 80049a0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80049a4:	200003fc 	.word	0x200003fc

080049a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049a8:	e7fe      	b.n	80049a8 <ADC_IRQHandler>
	...

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000034 	.word	0x20000034

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	; (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	; (80049fc <__libc_init_array+0x44>)
 80049cc:	f005 fcb2 	bl	800a334 <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	0800ac0c 	.word	0x0800ac0c
 80049f4:	0800ac0c 	.word	0x0800ac0c
 80049f8:	0800ac0c 	.word	0x0800ac0c
 80049fc:	0800ac10 	.word	0x0800ac10

08004a00 <memset>:
 8004a00:	4402      	add	r2, r0
 8004a02:	4603      	mov	r3, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <memset+0xa>
 8004a08:	4770      	bx	lr
 8004a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0e:	e7f9      	b.n	8004a04 <memset+0x4>

08004a10 <__cvt>:
 8004a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	ec55 4b10 	vmov	r4, r5, d0
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	462b      	mov	r3, r5
 8004a20:	bfbb      	ittet	lt
 8004a22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a26:	461d      	movlt	r5, r3
 8004a28:	2300      	movge	r3, #0
 8004a2a:	232d      	movlt	r3, #45	; 0x2d
 8004a2c:	700b      	strb	r3, [r1, #0]
 8004a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a34:	4691      	mov	r9, r2
 8004a36:	f023 0820 	bic.w	r8, r3, #32
 8004a3a:	bfbc      	itt	lt
 8004a3c:	4622      	movlt	r2, r4
 8004a3e:	4614      	movlt	r4, r2
 8004a40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a44:	d005      	beq.n	8004a52 <__cvt+0x42>
 8004a46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a4a:	d100      	bne.n	8004a4e <__cvt+0x3e>
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	2102      	movs	r1, #2
 8004a50:	e000      	b.n	8004a54 <__cvt+0x44>
 8004a52:	2103      	movs	r1, #3
 8004a54:	ab03      	add	r3, sp, #12
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	ab02      	add	r3, sp, #8
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	ec45 4b10 	vmov	d0, r4, r5
 8004a60:	4653      	mov	r3, sl
 8004a62:	4632      	mov	r2, r6
 8004a64:	f001 fdac 	bl	80065c0 <_dtoa_r>
 8004a68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	d102      	bne.n	8004a76 <__cvt+0x66>
 8004a70:	f019 0f01 	tst.w	r9, #1
 8004a74:	d022      	beq.n	8004abc <__cvt+0xac>
 8004a76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a7a:	eb07 0906 	add.w	r9, r7, r6
 8004a7e:	d110      	bne.n	8004aa2 <__cvt+0x92>
 8004a80:	783b      	ldrb	r3, [r7, #0]
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d10a      	bne.n	8004a9c <__cvt+0x8c>
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fc f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a92:	b918      	cbnz	r0, 8004a9c <__cvt+0x8c>
 8004a94:	f1c6 0601 	rsb	r6, r6, #1
 8004a98:	f8ca 6000 	str.w	r6, [sl]
 8004a9c:	f8da 3000 	ldr.w	r3, [sl]
 8004aa0:	4499      	add	r9, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fc f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aae:	b108      	cbz	r0, 8004ab4 <__cvt+0xa4>
 8004ab0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ab4:	2230      	movs	r2, #48	; 0x30
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	454b      	cmp	r3, r9
 8004aba:	d307      	bcc.n	8004acc <__cvt+0xbc>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ac0:	1bdb      	subs	r3, r3, r7
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	b004      	add	sp, #16
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	9103      	str	r1, [sp, #12]
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e7f0      	b.n	8004ab6 <__cvt+0xa6>

08004ad4 <__exponent>:
 8004ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	bfb8      	it	lt
 8004adc:	4249      	neglt	r1, r1
 8004ade:	f803 2b02 	strb.w	r2, [r3], #2
 8004ae2:	bfb4      	ite	lt
 8004ae4:	222d      	movlt	r2, #45	; 0x2d
 8004ae6:	222b      	movge	r2, #43	; 0x2b
 8004ae8:	2909      	cmp	r1, #9
 8004aea:	7042      	strb	r2, [r0, #1]
 8004aec:	dd2a      	ble.n	8004b44 <__exponent+0x70>
 8004aee:	f10d 0407 	add.w	r4, sp, #7
 8004af2:	46a4      	mov	ip, r4
 8004af4:	270a      	movs	r7, #10
 8004af6:	46a6      	mov	lr, r4
 8004af8:	460a      	mov	r2, r1
 8004afa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004afe:	fb07 1516 	mls	r5, r7, r6, r1
 8004b02:	3530      	adds	r5, #48	; 0x30
 8004b04:	2a63      	cmp	r2, #99	; 0x63
 8004b06:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b0e:	4631      	mov	r1, r6
 8004b10:	dcf1      	bgt.n	8004af6 <__exponent+0x22>
 8004b12:	3130      	adds	r1, #48	; 0x30
 8004b14:	f1ae 0502 	sub.w	r5, lr, #2
 8004b18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b1c:	1c44      	adds	r4, r0, #1
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4561      	cmp	r1, ip
 8004b22:	d30a      	bcc.n	8004b3a <__exponent+0x66>
 8004b24:	f10d 0209 	add.w	r2, sp, #9
 8004b28:	eba2 020e 	sub.w	r2, r2, lr
 8004b2c:	4565      	cmp	r5, ip
 8004b2e:	bf88      	it	hi
 8004b30:	2200      	movhi	r2, #0
 8004b32:	4413      	add	r3, r2
 8004b34:	1a18      	subs	r0, r3, r0
 8004b36:	b003      	add	sp, #12
 8004b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b42:	e7ed      	b.n	8004b20 <__exponent+0x4c>
 8004b44:	2330      	movs	r3, #48	; 0x30
 8004b46:	3130      	adds	r1, #48	; 0x30
 8004b48:	7083      	strb	r3, [r0, #2]
 8004b4a:	70c1      	strb	r1, [r0, #3]
 8004b4c:	1d03      	adds	r3, r0, #4
 8004b4e:	e7f1      	b.n	8004b34 <__exponent+0x60>

08004b50 <_printf_float>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ed2d 8b02 	vpush	{d8}
 8004b58:	b08d      	sub	sp, #52	; 0x34
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b60:	4616      	mov	r6, r2
 8004b62:	461f      	mov	r7, r3
 8004b64:	4605      	mov	r5, r0
 8004b66:	f002 fe89 	bl	800787c <_localeconv_r>
 8004b6a:	f8d0 a000 	ldr.w	sl, [r0]
 8004b6e:	4650      	mov	r0, sl
 8004b70:	f7fb fb36 	bl	80001e0 <strlen>
 8004b74:	2300      	movs	r3, #0
 8004b76:	930a      	str	r3, [sp, #40]	; 0x28
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b84:	3307      	adds	r3, #7
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	f103 0208 	add.w	r2, r3, #8
 8004b8e:	f8c8 2000 	str.w	r2, [r8]
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ba8:	ee08 0a10 	vmov	s16, r0
 8004bac:	4b9f      	ldr	r3, [pc, #636]	; (8004e2c <_printf_float+0x2dc>)
 8004bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	f7fb ffc1 	bl	8000b3c <__aeabi_dcmpun>
 8004bba:	bb88      	cbnz	r0, 8004c20 <_printf_float+0xd0>
 8004bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc0:	4b9a      	ldr	r3, [pc, #616]	; (8004e2c <_printf_float+0x2dc>)
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	f7fb ff9b 	bl	8000b00 <__aeabi_dcmple>
 8004bca:	bb48      	cbnz	r0, 8004c20 <_printf_float+0xd0>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	f7fb ff8a 	bl	8000aec <__aeabi_dcmplt>
 8004bd8:	b110      	cbz	r0, 8004be0 <_printf_float+0x90>
 8004bda:	232d      	movs	r3, #45	; 0x2d
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <_printf_float+0x2e0>)
 8004be2:	4894      	ldr	r0, [pc, #592]	; (8004e34 <_printf_float+0x2e4>)
 8004be4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004be8:	bf94      	ite	ls
 8004bea:	4698      	movls	r8, r3
 8004bec:	4680      	movhi	r8, r0
 8004bee:	2303      	movs	r3, #3
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	9b05      	ldr	r3, [sp, #20]
 8004bf4:	f023 0204 	bic.w	r2, r3, #4
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	f04f 0900 	mov.w	r9, #0
 8004bfe:	9700      	str	r7, [sp, #0]
 8004c00:	4633      	mov	r3, r6
 8004c02:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c04:	4621      	mov	r1, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f9d8 	bl	8004fbc <_printf_common>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f040 8090 	bne.w	8004d32 <_printf_float+0x1e2>
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	b00d      	add	sp, #52	; 0x34
 8004c18:	ecbd 8b02 	vpop	{d8}
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	4649      	mov	r1, r9
 8004c28:	f7fb ff88 	bl	8000b3c <__aeabi_dcmpun>
 8004c2c:	b140      	cbz	r0, 8004c40 <_printf_float+0xf0>
 8004c2e:	464b      	mov	r3, r9
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bfbc      	itt	lt
 8004c34:	232d      	movlt	r3, #45	; 0x2d
 8004c36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c3a:	487f      	ldr	r0, [pc, #508]	; (8004e38 <_printf_float+0x2e8>)
 8004c3c:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <_printf_float+0x2ec>)
 8004c3e:	e7d1      	b.n	8004be4 <_printf_float+0x94>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c46:	9206      	str	r2, [sp, #24]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	d13f      	bne.n	8004ccc <_printf_float+0x17c>
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	9b05      	ldr	r3, [sp, #20]
 8004c52:	6861      	ldr	r1, [r4, #4]
 8004c54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	ab0a      	add	r3, sp, #40	; 0x28
 8004c5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c62:	ab09      	add	r3, sp, #36	; 0x24
 8004c64:	ec49 8b10 	vmov	d0, r8, r9
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7ff fecd 	bl	8004a10 <__cvt>
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c7a:	2b47      	cmp	r3, #71	; 0x47
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	d108      	bne.n	8004c92 <_printf_float+0x142>
 8004c80:	1cc8      	adds	r0, r1, #3
 8004c82:	db02      	blt.n	8004c8a <_printf_float+0x13a>
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	4299      	cmp	r1, r3
 8004c88:	dd41      	ble.n	8004d0e <_printf_float+0x1be>
 8004c8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004c92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c96:	d820      	bhi.n	8004cda <_printf_float+0x18a>
 8004c98:	3901      	subs	r1, #1
 8004c9a:	465a      	mov	r2, fp
 8004c9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ca2:	f7ff ff17 	bl	8004ad4 <__exponent>
 8004ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca8:	1813      	adds	r3, r2, r0
 8004caa:	2a01      	cmp	r2, #1
 8004cac:	4681      	mov	r9, r0
 8004cae:	6123      	str	r3, [r4, #16]
 8004cb0:	dc02      	bgt.n	8004cb8 <_printf_float+0x168>
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	07d2      	lsls	r2, r2, #31
 8004cb6:	d501      	bpl.n	8004cbc <_printf_float+0x16c>
 8004cb8:	3301      	adds	r3, #1
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d09c      	beq.n	8004bfe <_printf_float+0xae>
 8004cc4:	232d      	movs	r3, #45	; 0x2d
 8004cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cca:	e798      	b.n	8004bfe <_printf_float+0xae>
 8004ccc:	9a06      	ldr	r2, [sp, #24]
 8004cce:	2a47      	cmp	r2, #71	; 0x47
 8004cd0:	d1be      	bne.n	8004c50 <_printf_float+0x100>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1bc      	bne.n	8004c50 <_printf_float+0x100>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e7b9      	b.n	8004c4e <_printf_float+0xfe>
 8004cda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004cde:	d118      	bne.n	8004d12 <_printf_float+0x1c2>
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	dd0b      	ble.n	8004cfe <_printf_float+0x1ae>
 8004ce6:	6121      	str	r1, [r4, #16]
 8004ce8:	b913      	cbnz	r3, 8004cf0 <_printf_float+0x1a0>
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d502      	bpl.n	8004cf6 <_printf_float+0x1a6>
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cf8:	f04f 0900 	mov.w	r9, #0
 8004cfc:	e7de      	b.n	8004cbc <_printf_float+0x16c>
 8004cfe:	b913      	cbnz	r3, 8004d06 <_printf_float+0x1b6>
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	07d2      	lsls	r2, r2, #31
 8004d04:	d501      	bpl.n	8004d0a <_printf_float+0x1ba>
 8004d06:	3302      	adds	r3, #2
 8004d08:	e7f4      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7f2      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d14:	4299      	cmp	r1, r3
 8004d16:	db05      	blt.n	8004d24 <_printf_float+0x1d4>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	6121      	str	r1, [r4, #16]
 8004d1c:	07d8      	lsls	r0, r3, #31
 8004d1e:	d5ea      	bpl.n	8004cf6 <_printf_float+0x1a6>
 8004d20:	1c4b      	adds	r3, r1, #1
 8004d22:	e7e7      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	bfd4      	ite	le
 8004d28:	f1c1 0202 	rsble	r2, r1, #2
 8004d2c:	2201      	movgt	r2, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	e7e0      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	055a      	lsls	r2, r3, #21
 8004d36:	d407      	bmi.n	8004d48 <_printf_float+0x1f8>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	d12c      	bne.n	8004da0 <_printf_float+0x250>
 8004d46:	e764      	b.n	8004c12 <_printf_float+0xc2>
 8004d48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d4c:	f240 80e0 	bls.w	8004f10 <_printf_float+0x3c0>
 8004d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d54:	2200      	movs	r2, #0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f7fb febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d034      	beq.n	8004dca <_printf_float+0x27a>
 8004d60:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <_printf_float+0x2f0>)
 8004d62:	2301      	movs	r3, #1
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af51 	beq.w	8004c12 <_printf_float+0xc2>
 8004d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	db02      	blt.n	8004d7e <_printf_float+0x22e>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	07d8      	lsls	r0, r3, #31
 8004d7c:	d510      	bpl.n	8004da0 <_printf_float+0x250>
 8004d7e:	ee18 3a10 	vmov	r3, s16
 8004d82:	4652      	mov	r2, sl
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f af41 	beq.w	8004c12 <_printf_float+0xc2>
 8004d90:	f04f 0800 	mov.w	r8, #0
 8004d94:	f104 091a 	add.w	r9, r4, #26
 8004d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	4543      	cmp	r3, r8
 8004d9e:	dc09      	bgt.n	8004db4 <_printf_float+0x264>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	079b      	lsls	r3, r3, #30
 8004da4:	f100 8105 	bmi.w	8004fb2 <_printf_float+0x462>
 8004da8:	68e0      	ldr	r0, [r4, #12]
 8004daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dac:	4298      	cmp	r0, r3
 8004dae:	bfb8      	it	lt
 8004db0:	4618      	movlt	r0, r3
 8004db2:	e730      	b.n	8004c16 <_printf_float+0xc6>
 8004db4:	2301      	movs	r3, #1
 8004db6:	464a      	mov	r2, r9
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f af27 	beq.w	8004c12 <_printf_float+0xc2>
 8004dc4:	f108 0801 	add.w	r8, r8, #1
 8004dc8:	e7e6      	b.n	8004d98 <_printf_float+0x248>
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dc39      	bgt.n	8004e44 <_printf_float+0x2f4>
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <_printf_float+0x2f0>)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af19 	beq.w	8004c12 <_printf_float+0xc2>
 8004de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d102      	bne.n	8004dee <_printf_float+0x29e>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07d9      	lsls	r1, r3, #31
 8004dec:	d5d8      	bpl.n	8004da0 <_printf_float+0x250>
 8004dee:	ee18 3a10 	vmov	r3, s16
 8004df2:	4652      	mov	r2, sl
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f af09 	beq.w	8004c12 <_printf_float+0xc2>
 8004e00:	f04f 0900 	mov.w	r9, #0
 8004e04:	f104 0a1a 	add.w	sl, r4, #26
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	425b      	negs	r3, r3
 8004e0c:	454b      	cmp	r3, r9
 8004e0e:	dc01      	bgt.n	8004e14 <_printf_float+0x2c4>
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	e792      	b.n	8004d3a <_printf_float+0x1ea>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4652      	mov	r2, sl
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f aef7 	beq.w	8004c12 <_printf_float+0xc2>
 8004e24:	f109 0901 	add.w	r9, r9, #1
 8004e28:	e7ee      	b.n	8004e08 <_printf_float+0x2b8>
 8004e2a:	bf00      	nop
 8004e2c:	7fefffff 	.word	0x7fefffff
 8004e30:	0800a364 	.word	0x0800a364
 8004e34:	0800a368 	.word	0x0800a368
 8004e38:	0800a370 	.word	0x0800a370
 8004e3c:	0800a36c 	.word	0x0800a36c
 8004e40:	0800a374 	.word	0x0800a374
 8004e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	bfa8      	it	ge
 8004e4c:	461a      	movge	r2, r3
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	4691      	mov	r9, r2
 8004e52:	dc37      	bgt.n	8004ec4 <_printf_float+0x374>
 8004e54:	f04f 0b00 	mov.w	fp, #0
 8004e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e5c:	f104 021a 	add.w	r2, r4, #26
 8004e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	eba3 0309 	sub.w	r3, r3, r9
 8004e68:	455b      	cmp	r3, fp
 8004e6a:	dc33      	bgt.n	8004ed4 <_printf_float+0x384>
 8004e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e70:	429a      	cmp	r2, r3
 8004e72:	db3b      	blt.n	8004eec <_printf_float+0x39c>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d438      	bmi.n	8004eec <_printf_float+0x39c>
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7c:	9a05      	ldr	r2, [sp, #20]
 8004e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e80:	1a9a      	subs	r2, r3, r2
 8004e82:	eba3 0901 	sub.w	r9, r3, r1
 8004e86:	4591      	cmp	r9, r2
 8004e88:	bfa8      	it	ge
 8004e8a:	4691      	movge	r9, r2
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	dc35      	bgt.n	8004efe <_printf_float+0x3ae>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e9a:	f104 0a1a 	add.w	sl, r4, #26
 8004e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	eba3 0309 	sub.w	r3, r3, r9
 8004ea8:	4543      	cmp	r3, r8
 8004eaa:	f77f af79 	ble.w	8004da0 <_printf_float+0x250>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f aeaa 	beq.w	8004c12 <_printf_float+0xc2>
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	e7ec      	b.n	8004e9e <_printf_float+0x34e>
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4642      	mov	r2, r8
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d1c0      	bne.n	8004e54 <_printf_float+0x304>
 8004ed2:	e69e      	b.n	8004c12 <_printf_float+0xc2>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	9205      	str	r2, [sp, #20]
 8004edc:	47b8      	blx	r7
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f43f ae97 	beq.w	8004c12 <_printf_float+0xc2>
 8004ee4:	9a05      	ldr	r2, [sp, #20]
 8004ee6:	f10b 0b01 	add.w	fp, fp, #1
 8004eea:	e7b9      	b.n	8004e60 <_printf_float+0x310>
 8004eec:	ee18 3a10 	vmov	r3, s16
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d1be      	bne.n	8004e7a <_printf_float+0x32a>
 8004efc:	e689      	b.n	8004c12 <_printf_float+0xc2>
 8004efe:	9a05      	ldr	r2, [sp, #20]
 8004f00:	464b      	mov	r3, r9
 8004f02:	4442      	add	r2, r8
 8004f04:	4631      	mov	r1, r6
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b8      	blx	r7
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d1c1      	bne.n	8004e92 <_printf_float+0x342>
 8004f0e:	e680      	b.n	8004c12 <_printf_float+0xc2>
 8004f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f12:	2a01      	cmp	r2, #1
 8004f14:	dc01      	bgt.n	8004f1a <_printf_float+0x3ca>
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d538      	bpl.n	8004f8c <_printf_float+0x43c>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f ae74 	beq.w	8004c12 <_printf_float+0xc2>
 8004f2a:	ee18 3a10 	vmov	r3, s16
 8004f2e:	4652      	mov	r2, sl
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f ae6b 	beq.w	8004c12 <_printf_float+0xc2>
 8004f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f40:	2200      	movs	r2, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	f7fb fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f48:	b9d8      	cbnz	r0, 8004f82 <_printf_float+0x432>
 8004f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4c:	f108 0201 	add.w	r2, r8, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d10e      	bne.n	8004f7a <_printf_float+0x42a>
 8004f5c:	e659      	b.n	8004c12 <_printf_float+0xc2>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f ae52 	beq.w	8004c12 <_printf_float+0xc2>
 8004f6e:	f108 0801 	add.w	r8, r8, #1
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4543      	cmp	r3, r8
 8004f78:	dcf1      	bgt.n	8004f5e <_printf_float+0x40e>
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f80:	e6dc      	b.n	8004d3c <_printf_float+0x1ec>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	f104 0a1a 	add.w	sl, r4, #26
 8004f8a:	e7f2      	b.n	8004f72 <_printf_float+0x422>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4642      	mov	r2, r8
 8004f90:	e7df      	b.n	8004f52 <_printf_float+0x402>
 8004f92:	2301      	movs	r3, #1
 8004f94:	464a      	mov	r2, r9
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f ae38 	beq.w	8004c12 <_printf_float+0xc2>
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004faa:	1a5b      	subs	r3, r3, r1
 8004fac:	4543      	cmp	r3, r8
 8004fae:	dcf0      	bgt.n	8004f92 <_printf_float+0x442>
 8004fb0:	e6fa      	b.n	8004da8 <_printf_float+0x258>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	f104 0919 	add.w	r9, r4, #25
 8004fba:	e7f4      	b.n	8004fa6 <_printf_float+0x456>

08004fbc <_printf_common>:
 8004fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	4699      	mov	r9, r3
 8004fc4:	688a      	ldr	r2, [r1, #8]
 8004fc6:	690b      	ldr	r3, [r1, #16]
 8004fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	bfb8      	it	lt
 8004fd0:	4613      	movlt	r3, r2
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fd8:	4607      	mov	r7, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	b10a      	cbz	r2, 8004fe2 <_printf_common+0x26>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	0699      	lsls	r1, r3, #26
 8004fe6:	bf42      	ittt	mi
 8004fe8:	6833      	ldrmi	r3, [r6, #0]
 8004fea:	3302      	addmi	r3, #2
 8004fec:	6033      	strmi	r3, [r6, #0]
 8004fee:	6825      	ldr	r5, [r4, #0]
 8004ff0:	f015 0506 	ands.w	r5, r5, #6
 8004ff4:	d106      	bne.n	8005004 <_printf_common+0x48>
 8004ff6:	f104 0a19 	add.w	sl, r4, #25
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	6832      	ldr	r2, [r6, #0]
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	42ab      	cmp	r3, r5
 8005002:	dc26      	bgt.n	8005052 <_printf_common+0x96>
 8005004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005008:	1e13      	subs	r3, r2, #0
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	2301      	movne	r3, #1
 8005010:	0692      	lsls	r2, r2, #26
 8005012:	d42b      	bmi.n	800506c <_printf_common+0xb0>
 8005014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d01e      	beq.n	8005060 <_printf_common+0xa4>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	68e5      	ldr	r5, [r4, #12]
 8005026:	6832      	ldr	r2, [r6, #0]
 8005028:	f003 0306 	and.w	r3, r3, #6
 800502c:	2b04      	cmp	r3, #4
 800502e:	bf08      	it	eq
 8005030:	1aad      	subeq	r5, r5, r2
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	6922      	ldr	r2, [r4, #16]
 8005036:	bf0c      	ite	eq
 8005038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800503c:	2500      	movne	r5, #0
 800503e:	4293      	cmp	r3, r2
 8005040:	bfc4      	itt	gt
 8005042:	1a9b      	subgt	r3, r3, r2
 8005044:	18ed      	addgt	r5, r5, r3
 8005046:	2600      	movs	r6, #0
 8005048:	341a      	adds	r4, #26
 800504a:	42b5      	cmp	r5, r6
 800504c:	d11a      	bne.n	8005084 <_printf_common+0xc8>
 800504e:	2000      	movs	r0, #0
 8005050:	e008      	b.n	8005064 <_printf_common+0xa8>
 8005052:	2301      	movs	r3, #1
 8005054:	4652      	mov	r2, sl
 8005056:	4649      	mov	r1, r9
 8005058:	4638      	mov	r0, r7
 800505a:	47c0      	blx	r8
 800505c:	3001      	adds	r0, #1
 800505e:	d103      	bne.n	8005068 <_printf_common+0xac>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	3501      	adds	r5, #1
 800506a:	e7c6      	b.n	8004ffa <_printf_common+0x3e>
 800506c:	18e1      	adds	r1, r4, r3
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	2030      	movs	r0, #48	; 0x30
 8005072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005076:	4422      	add	r2, r4
 8005078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800507c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005080:	3302      	adds	r3, #2
 8005082:	e7c7      	b.n	8005014 <_printf_common+0x58>
 8005084:	2301      	movs	r3, #1
 8005086:	4622      	mov	r2, r4
 8005088:	4649      	mov	r1, r9
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	3001      	adds	r0, #1
 8005090:	d0e6      	beq.n	8005060 <_printf_common+0xa4>
 8005092:	3601      	adds	r6, #1
 8005094:	e7d9      	b.n	800504a <_printf_common+0x8e>
	...

08005098 <_printf_i>:
 8005098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	7e0f      	ldrb	r7, [r1, #24]
 800509e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a0:	2f78      	cmp	r7, #120	; 0x78
 80050a2:	4691      	mov	r9, r2
 80050a4:	4680      	mov	r8, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	469a      	mov	sl, r3
 80050aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ae:	d807      	bhi.n	80050c0 <_printf_i+0x28>
 80050b0:	2f62      	cmp	r7, #98	; 0x62
 80050b2:	d80a      	bhi.n	80050ca <_printf_i+0x32>
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	f000 80d8 	beq.w	800526a <_printf_i+0x1d2>
 80050ba:	2f58      	cmp	r7, #88	; 0x58
 80050bc:	f000 80a3 	beq.w	8005206 <_printf_i+0x16e>
 80050c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050c8:	e03a      	b.n	8005140 <_printf_i+0xa8>
 80050ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ce:	2b15      	cmp	r3, #21
 80050d0:	d8f6      	bhi.n	80050c0 <_printf_i+0x28>
 80050d2:	a101      	add	r1, pc, #4	; (adr r1, 80050d8 <_printf_i+0x40>)
 80050d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005145 	.word	0x08005145
 80050e0:	080050c1 	.word	0x080050c1
 80050e4:	080050c1 	.word	0x080050c1
 80050e8:	080050c1 	.word	0x080050c1
 80050ec:	080050c1 	.word	0x080050c1
 80050f0:	08005145 	.word	0x08005145
 80050f4:	080050c1 	.word	0x080050c1
 80050f8:	080050c1 	.word	0x080050c1
 80050fc:	080050c1 	.word	0x080050c1
 8005100:	080050c1 	.word	0x080050c1
 8005104:	08005251 	.word	0x08005251
 8005108:	08005175 	.word	0x08005175
 800510c:	08005233 	.word	0x08005233
 8005110:	080050c1 	.word	0x080050c1
 8005114:	080050c1 	.word	0x080050c1
 8005118:	08005273 	.word	0x08005273
 800511c:	080050c1 	.word	0x080050c1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050c1 	.word	0x080050c1
 8005128:	080050c1 	.word	0x080050c1
 800512c:	0800523b 	.word	0x0800523b
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	602a      	str	r2, [r5, #0]
 8005138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800513c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005140:	2301      	movs	r3, #1
 8005142:	e0a3      	b.n	800528c <_printf_i+0x1f4>
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	6829      	ldr	r1, [r5, #0]
 8005148:	0606      	lsls	r6, r0, #24
 800514a:	f101 0304 	add.w	r3, r1, #4
 800514e:	d50a      	bpl.n	8005166 <_printf_i+0xce>
 8005150:	680e      	ldr	r6, [r1, #0]
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	2e00      	cmp	r6, #0
 8005156:	da03      	bge.n	8005160 <_printf_i+0xc8>
 8005158:	232d      	movs	r3, #45	; 0x2d
 800515a:	4276      	negs	r6, r6
 800515c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005160:	485e      	ldr	r0, [pc, #376]	; (80052dc <_printf_i+0x244>)
 8005162:	230a      	movs	r3, #10
 8005164:	e019      	b.n	800519a <_printf_i+0x102>
 8005166:	680e      	ldr	r6, [r1, #0]
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800516e:	bf18      	it	ne
 8005170:	b236      	sxthne	r6, r6
 8005172:	e7ef      	b.n	8005154 <_printf_i+0xbc>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	6029      	str	r1, [r5, #0]
 800517c:	0601      	lsls	r1, r0, #24
 800517e:	d501      	bpl.n	8005184 <_printf_i+0xec>
 8005180:	681e      	ldr	r6, [r3, #0]
 8005182:	e002      	b.n	800518a <_printf_i+0xf2>
 8005184:	0646      	lsls	r6, r0, #25
 8005186:	d5fb      	bpl.n	8005180 <_printf_i+0xe8>
 8005188:	881e      	ldrh	r6, [r3, #0]
 800518a:	4854      	ldr	r0, [pc, #336]	; (80052dc <_printf_i+0x244>)
 800518c:	2f6f      	cmp	r7, #111	; 0x6f
 800518e:	bf0c      	ite	eq
 8005190:	2308      	moveq	r3, #8
 8005192:	230a      	movne	r3, #10
 8005194:	2100      	movs	r1, #0
 8005196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800519a:	6865      	ldr	r5, [r4, #4]
 800519c:	60a5      	str	r5, [r4, #8]
 800519e:	2d00      	cmp	r5, #0
 80051a0:	bfa2      	ittt	ge
 80051a2:	6821      	ldrge	r1, [r4, #0]
 80051a4:	f021 0104 	bicge.w	r1, r1, #4
 80051a8:	6021      	strge	r1, [r4, #0]
 80051aa:	b90e      	cbnz	r6, 80051b0 <_printf_i+0x118>
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	d04d      	beq.n	800524c <_printf_i+0x1b4>
 80051b0:	4615      	mov	r5, r2
 80051b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051b6:	fb03 6711 	mls	r7, r3, r1, r6
 80051ba:	5dc7      	ldrb	r7, [r0, r7]
 80051bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c0:	4637      	mov	r7, r6
 80051c2:	42bb      	cmp	r3, r7
 80051c4:	460e      	mov	r6, r1
 80051c6:	d9f4      	bls.n	80051b2 <_printf_i+0x11a>
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10b      	bne.n	80051e4 <_printf_i+0x14c>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	07de      	lsls	r6, r3, #31
 80051d0:	d508      	bpl.n	80051e4 <_printf_i+0x14c>
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	6861      	ldr	r1, [r4, #4]
 80051d6:	4299      	cmp	r1, r3
 80051d8:	bfde      	ittt	le
 80051da:	2330      	movle	r3, #48	; 0x30
 80051dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	6122      	str	r2, [r4, #16]
 80051e8:	f8cd a000 	str.w	sl, [sp]
 80051ec:	464b      	mov	r3, r9
 80051ee:	aa03      	add	r2, sp, #12
 80051f0:	4621      	mov	r1, r4
 80051f2:	4640      	mov	r0, r8
 80051f4:	f7ff fee2 	bl	8004fbc <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	d14c      	bne.n	8005296 <_printf_i+0x1fe>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	b004      	add	sp, #16
 8005202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005206:	4835      	ldr	r0, [pc, #212]	; (80052dc <_printf_i+0x244>)
 8005208:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800520c:	6829      	ldr	r1, [r5, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f851 6b04 	ldr.w	r6, [r1], #4
 8005214:	6029      	str	r1, [r5, #0]
 8005216:	061d      	lsls	r5, r3, #24
 8005218:	d514      	bpl.n	8005244 <_printf_i+0x1ac>
 800521a:	07df      	lsls	r7, r3, #31
 800521c:	bf44      	itt	mi
 800521e:	f043 0320 	orrmi.w	r3, r3, #32
 8005222:	6023      	strmi	r3, [r4, #0]
 8005224:	b91e      	cbnz	r6, 800522e <_printf_i+0x196>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	f023 0320 	bic.w	r3, r3, #32
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	2310      	movs	r3, #16
 8005230:	e7b0      	b.n	8005194 <_printf_i+0xfc>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	f043 0320 	orr.w	r3, r3, #32
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	2378      	movs	r3, #120	; 0x78
 800523c:	4828      	ldr	r0, [pc, #160]	; (80052e0 <_printf_i+0x248>)
 800523e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005242:	e7e3      	b.n	800520c <_printf_i+0x174>
 8005244:	0659      	lsls	r1, r3, #25
 8005246:	bf48      	it	mi
 8005248:	b2b6      	uxthmi	r6, r6
 800524a:	e7e6      	b.n	800521a <_printf_i+0x182>
 800524c:	4615      	mov	r5, r2
 800524e:	e7bb      	b.n	80051c8 <_printf_i+0x130>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	6826      	ldr	r6, [r4, #0]
 8005254:	6961      	ldr	r1, [r4, #20]
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	6028      	str	r0, [r5, #0]
 800525a:	0635      	lsls	r5, r6, #24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	d501      	bpl.n	8005264 <_printf_i+0x1cc>
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0x1d2>
 8005264:	0670      	lsls	r0, r6, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0x1c8>
 8005268:	8019      	strh	r1, [r3, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	4615      	mov	r5, r2
 8005270:	e7ba      	b.n	80051e8 <_printf_i+0x150>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	602a      	str	r2, [r5, #0]
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	4628      	mov	r0, r5
 8005280:	f7fa ffb6 	bl	80001f0 <memchr>
 8005284:	b108      	cbz	r0, 800528a <_printf_i+0x1f2>
 8005286:	1b40      	subs	r0, r0, r5
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005294:	e7a8      	b.n	80051e8 <_printf_i+0x150>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	462a      	mov	r2, r5
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0ab      	beq.n	80051fc <_printf_i+0x164>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	d413      	bmi.n	80052d2 <_printf_i+0x23a>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e7a4      	b.n	8005200 <_printf_i+0x168>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d09b      	beq.n	80051fc <_printf_i+0x164>
 80052c4:	3501      	adds	r5, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dcf2      	bgt.n	80052b6 <_printf_i+0x21e>
 80052d0:	e7eb      	b.n	80052aa <_printf_i+0x212>
 80052d2:	2500      	movs	r5, #0
 80052d4:	f104 0619 	add.w	r6, r4, #25
 80052d8:	e7f5      	b.n	80052c6 <_printf_i+0x22e>
 80052da:	bf00      	nop
 80052dc:	0800a376 	.word	0x0800a376
 80052e0:	0800a387 	.word	0x0800a387

080052e4 <_scanf_float>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	b087      	sub	sp, #28
 80052ea:	4617      	mov	r7, r2
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	688b      	ldr	r3, [r1, #8]
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80052f6:	bf83      	ittte	hi
 80052f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052fc:	195b      	addhi	r3, r3, r5
 80052fe:	9302      	strhi	r3, [sp, #8]
 8005300:	2300      	movls	r3, #0
 8005302:	bf86      	itte	hi
 8005304:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005308:	608b      	strhi	r3, [r1, #8]
 800530a:	9302      	strls	r3, [sp, #8]
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	468b      	mov	fp, r1
 8005310:	2500      	movs	r5, #0
 8005312:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005316:	f84b 3b1c 	str.w	r3, [fp], #28
 800531a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800531e:	4680      	mov	r8, r0
 8005320:	460c      	mov	r4, r1
 8005322:	465e      	mov	r6, fp
 8005324:	46aa      	mov	sl, r5
 8005326:	46a9      	mov	r9, r5
 8005328:	9501      	str	r5, [sp, #4]
 800532a:	68a2      	ldr	r2, [r4, #8]
 800532c:	b152      	cbz	r2, 8005344 <_scanf_float+0x60>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b4e      	cmp	r3, #78	; 0x4e
 8005334:	d864      	bhi.n	8005400 <_scanf_float+0x11c>
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d83c      	bhi.n	80053b4 <_scanf_float+0xd0>
 800533a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800533e:	b2c8      	uxtb	r0, r1
 8005340:	280e      	cmp	r0, #14
 8005342:	d93a      	bls.n	80053ba <_scanf_float+0xd6>
 8005344:	f1b9 0f00 	cmp.w	r9, #0
 8005348:	d003      	beq.n	8005352 <_scanf_float+0x6e>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005356:	f1ba 0f01 	cmp.w	sl, #1
 800535a:	f200 8113 	bhi.w	8005584 <_scanf_float+0x2a0>
 800535e:	455e      	cmp	r6, fp
 8005360:	f200 8105 	bhi.w	800556e <_scanf_float+0x28a>
 8005364:	2501      	movs	r5, #1
 8005366:	4628      	mov	r0, r5
 8005368:	b007      	add	sp, #28
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005372:	2a0d      	cmp	r2, #13
 8005374:	d8e6      	bhi.n	8005344 <_scanf_float+0x60>
 8005376:	a101      	add	r1, pc, #4	; (adr r1, 800537c <_scanf_float+0x98>)
 8005378:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800537c:	080054bb 	.word	0x080054bb
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	08005345 	.word	0x08005345
 800538c:	0800551b 	.word	0x0800551b
 8005390:	080054f3 	.word	0x080054f3
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054c9 	.word	0x080054c9
 80053a0:	08005345 	.word	0x08005345
 80053a4:	08005345 	.word	0x08005345
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	08005481 	.word	0x08005481
 80053b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80053b8:	e7db      	b.n	8005372 <_scanf_float+0x8e>
 80053ba:	290e      	cmp	r1, #14
 80053bc:	d8c2      	bhi.n	8005344 <_scanf_float+0x60>
 80053be:	a001      	add	r0, pc, #4	; (adr r0, 80053c4 <_scanf_float+0xe0>)
 80053c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80053c4:	08005473 	.word	0x08005473
 80053c8:	08005345 	.word	0x08005345
 80053cc:	08005473 	.word	0x08005473
 80053d0:	08005507 	.word	0x08005507
 80053d4:	08005345 	.word	0x08005345
 80053d8:	08005421 	.word	0x08005421
 80053dc:	0800545d 	.word	0x0800545d
 80053e0:	0800545d 	.word	0x0800545d
 80053e4:	0800545d 	.word	0x0800545d
 80053e8:	0800545d 	.word	0x0800545d
 80053ec:	0800545d 	.word	0x0800545d
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	0800545d 	.word	0x0800545d
 8005400:	2b6e      	cmp	r3, #110	; 0x6e
 8005402:	d809      	bhi.n	8005418 <_scanf_float+0x134>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d8b2      	bhi.n	800536e <_scanf_float+0x8a>
 8005408:	2b54      	cmp	r3, #84	; 0x54
 800540a:	d077      	beq.n	80054fc <_scanf_float+0x218>
 800540c:	2b59      	cmp	r3, #89	; 0x59
 800540e:	d199      	bne.n	8005344 <_scanf_float+0x60>
 8005410:	2d07      	cmp	r5, #7
 8005412:	d197      	bne.n	8005344 <_scanf_float+0x60>
 8005414:	2508      	movs	r5, #8
 8005416:	e029      	b.n	800546c <_scanf_float+0x188>
 8005418:	2b74      	cmp	r3, #116	; 0x74
 800541a:	d06f      	beq.n	80054fc <_scanf_float+0x218>
 800541c:	2b79      	cmp	r3, #121	; 0x79
 800541e:	e7f6      	b.n	800540e <_scanf_float+0x12a>
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	05c8      	lsls	r0, r1, #23
 8005424:	d51a      	bpl.n	800545c <_scanf_float+0x178>
 8005426:	9b02      	ldr	r3, [sp, #8]
 8005428:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800542c:	6021      	str	r1, [r4, #0]
 800542e:	f109 0901 	add.w	r9, r9, #1
 8005432:	b11b      	cbz	r3, 800543c <_scanf_float+0x158>
 8005434:	3b01      	subs	r3, #1
 8005436:	3201      	adds	r2, #1
 8005438:	9302      	str	r3, [sp, #8]
 800543a:	60a2      	str	r2, [r4, #8]
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	3b01      	subs	r3, #1
 8005440:	60a3      	str	r3, [r4, #8]
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	3301      	adds	r3, #1
 8005446:	6123      	str	r3, [r4, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3b01      	subs	r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	f340 8084 	ble.w	800555c <_scanf_float+0x278>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	e766      	b.n	800532a <_scanf_float+0x46>
 800545c:	eb1a 0f05 	cmn.w	sl, r5
 8005460:	f47f af70 	bne.w	8005344 <_scanf_float+0x60>
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800546a:	6022      	str	r2, [r4, #0]
 800546c:	f806 3b01 	strb.w	r3, [r6], #1
 8005470:	e7e4      	b.n	800543c <_scanf_float+0x158>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	0610      	lsls	r0, r2, #24
 8005476:	f57f af65 	bpl.w	8005344 <_scanf_float+0x60>
 800547a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800547e:	e7f4      	b.n	800546a <_scanf_float+0x186>
 8005480:	f1ba 0f00 	cmp.w	sl, #0
 8005484:	d10e      	bne.n	80054a4 <_scanf_float+0x1c0>
 8005486:	f1b9 0f00 	cmp.w	r9, #0
 800548a:	d10e      	bne.n	80054aa <_scanf_float+0x1c6>
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005492:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005496:	d108      	bne.n	80054aa <_scanf_float+0x1c6>
 8005498:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	f04f 0a01 	mov.w	sl, #1
 80054a2:	e7e3      	b.n	800546c <_scanf_float+0x188>
 80054a4:	f1ba 0f02 	cmp.w	sl, #2
 80054a8:	d055      	beq.n	8005556 <_scanf_float+0x272>
 80054aa:	2d01      	cmp	r5, #1
 80054ac:	d002      	beq.n	80054b4 <_scanf_float+0x1d0>
 80054ae:	2d04      	cmp	r5, #4
 80054b0:	f47f af48 	bne.w	8005344 <_scanf_float+0x60>
 80054b4:	3501      	adds	r5, #1
 80054b6:	b2ed      	uxtb	r5, r5
 80054b8:	e7d8      	b.n	800546c <_scanf_float+0x188>
 80054ba:	f1ba 0f01 	cmp.w	sl, #1
 80054be:	f47f af41 	bne.w	8005344 <_scanf_float+0x60>
 80054c2:	f04f 0a02 	mov.w	sl, #2
 80054c6:	e7d1      	b.n	800546c <_scanf_float+0x188>
 80054c8:	b97d      	cbnz	r5, 80054ea <_scanf_float+0x206>
 80054ca:	f1b9 0f00 	cmp.w	r9, #0
 80054ce:	f47f af3c 	bne.w	800534a <_scanf_float+0x66>
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80054d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80054dc:	f47f af39 	bne.w	8005352 <_scanf_float+0x6e>
 80054e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054e4:	6022      	str	r2, [r4, #0]
 80054e6:	2501      	movs	r5, #1
 80054e8:	e7c0      	b.n	800546c <_scanf_float+0x188>
 80054ea:	2d03      	cmp	r5, #3
 80054ec:	d0e2      	beq.n	80054b4 <_scanf_float+0x1d0>
 80054ee:	2d05      	cmp	r5, #5
 80054f0:	e7de      	b.n	80054b0 <_scanf_float+0x1cc>
 80054f2:	2d02      	cmp	r5, #2
 80054f4:	f47f af26 	bne.w	8005344 <_scanf_float+0x60>
 80054f8:	2503      	movs	r5, #3
 80054fa:	e7b7      	b.n	800546c <_scanf_float+0x188>
 80054fc:	2d06      	cmp	r5, #6
 80054fe:	f47f af21 	bne.w	8005344 <_scanf_float+0x60>
 8005502:	2507      	movs	r5, #7
 8005504:	e7b2      	b.n	800546c <_scanf_float+0x188>
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	0591      	lsls	r1, r2, #22
 800550a:	f57f af1b 	bpl.w	8005344 <_scanf_float+0x60>
 800550e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	f8cd 9004 	str.w	r9, [sp, #4]
 8005518:	e7a8      	b.n	800546c <_scanf_float+0x188>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005520:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005524:	d006      	beq.n	8005534 <_scanf_float+0x250>
 8005526:	0550      	lsls	r0, r2, #21
 8005528:	f57f af0c 	bpl.w	8005344 <_scanf_float+0x60>
 800552c:	f1b9 0f00 	cmp.w	r9, #0
 8005530:	f43f af0f 	beq.w	8005352 <_scanf_float+0x6e>
 8005534:	0591      	lsls	r1, r2, #22
 8005536:	bf58      	it	pl
 8005538:	9901      	ldrpl	r1, [sp, #4]
 800553a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800553e:	bf58      	it	pl
 8005540:	eba9 0101 	subpl.w	r1, r9, r1
 8005544:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005548:	bf58      	it	pl
 800554a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800554e:	6022      	str	r2, [r4, #0]
 8005550:	f04f 0900 	mov.w	r9, #0
 8005554:	e78a      	b.n	800546c <_scanf_float+0x188>
 8005556:	f04f 0a03 	mov.w	sl, #3
 800555a:	e787      	b.n	800546c <_scanf_float+0x188>
 800555c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005560:	4639      	mov	r1, r7
 8005562:	4640      	mov	r0, r8
 8005564:	4798      	blx	r3
 8005566:	2800      	cmp	r0, #0
 8005568:	f43f aedf 	beq.w	800532a <_scanf_float+0x46>
 800556c:	e6ea      	b.n	8005344 <_scanf_float+0x60>
 800556e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005576:	463a      	mov	r2, r7
 8005578:	4640      	mov	r0, r8
 800557a:	4798      	blx	r3
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	3b01      	subs	r3, #1
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	e6ec      	b.n	800535e <_scanf_float+0x7a>
 8005584:	1e6b      	subs	r3, r5, #1
 8005586:	2b06      	cmp	r3, #6
 8005588:	d825      	bhi.n	80055d6 <_scanf_float+0x2f2>
 800558a:	2d02      	cmp	r5, #2
 800558c:	d836      	bhi.n	80055fc <_scanf_float+0x318>
 800558e:	455e      	cmp	r6, fp
 8005590:	f67f aee8 	bls.w	8005364 <_scanf_float+0x80>
 8005594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005598:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800559c:	463a      	mov	r2, r7
 800559e:	4640      	mov	r0, r8
 80055a0:	4798      	blx	r3
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	e7f1      	b.n	800558e <_scanf_float+0x2aa>
 80055aa:	9802      	ldr	r0, [sp, #8]
 80055ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80055b4:	9002      	str	r0, [sp, #8]
 80055b6:	463a      	mov	r2, r7
 80055b8:	4640      	mov	r0, r8
 80055ba:	4798      	blx	r3
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	3b01      	subs	r3, #1
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055c6:	fa5f fa8a 	uxtb.w	sl, sl
 80055ca:	f1ba 0f02 	cmp.w	sl, #2
 80055ce:	d1ec      	bne.n	80055aa <_scanf_float+0x2c6>
 80055d0:	3d03      	subs	r5, #3
 80055d2:	b2ed      	uxtb	r5, r5
 80055d4:	1b76      	subs	r6, r6, r5
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	05da      	lsls	r2, r3, #23
 80055da:	d52f      	bpl.n	800563c <_scanf_float+0x358>
 80055dc:	055b      	lsls	r3, r3, #21
 80055de:	d510      	bpl.n	8005602 <_scanf_float+0x31e>
 80055e0:	455e      	cmp	r6, fp
 80055e2:	f67f aebf 	bls.w	8005364 <_scanf_float+0x80>
 80055e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055ee:	463a      	mov	r2, r7
 80055f0:	4640      	mov	r0, r8
 80055f2:	4798      	blx	r3
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	e7f1      	b.n	80055e0 <_scanf_float+0x2fc>
 80055fc:	46aa      	mov	sl, r5
 80055fe:	9602      	str	r6, [sp, #8]
 8005600:	e7df      	b.n	80055c2 <_scanf_float+0x2de>
 8005602:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	2965      	cmp	r1, #101	; 0x65
 800560a:	f103 33ff 	add.w	r3, r3, #4294967295
 800560e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	d00c      	beq.n	8005630 <_scanf_float+0x34c>
 8005616:	2945      	cmp	r1, #69	; 0x45
 8005618:	d00a      	beq.n	8005630 <_scanf_float+0x34c>
 800561a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800561e:	463a      	mov	r2, r7
 8005620:	4640      	mov	r0, r8
 8005622:	4798      	blx	r3
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800562a:	3b01      	subs	r3, #1
 800562c:	1eb5      	subs	r5, r6, #2
 800562e:	6123      	str	r3, [r4, #16]
 8005630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005634:	463a      	mov	r2, r7
 8005636:	4640      	mov	r0, r8
 8005638:	4798      	blx	r3
 800563a:	462e      	mov	r6, r5
 800563c:	6825      	ldr	r5, [r4, #0]
 800563e:	f015 0510 	ands.w	r5, r5, #16
 8005642:	d159      	bne.n	80056f8 <_scanf_float+0x414>
 8005644:	7035      	strb	r5, [r6, #0]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005650:	d11b      	bne.n	800568a <_scanf_float+0x3a6>
 8005652:	9b01      	ldr	r3, [sp, #4]
 8005654:	454b      	cmp	r3, r9
 8005656:	eba3 0209 	sub.w	r2, r3, r9
 800565a:	d123      	bne.n	80056a4 <_scanf_float+0x3c0>
 800565c:	2200      	movs	r2, #0
 800565e:	4659      	mov	r1, fp
 8005660:	4640      	mov	r0, r8
 8005662:	f000 fe97 	bl	8006394 <_strtod_r>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	f012 0f02 	tst.w	r2, #2
 800566e:	ec57 6b10 	vmov	r6, r7, d0
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	d021      	beq.n	80056ba <_scanf_float+0x3d6>
 8005676:	9903      	ldr	r1, [sp, #12]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	600a      	str	r2, [r1, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	e9c3 6700 	strd	r6, r7, [r3]
 8005682:	68e3      	ldr	r3, [r4, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60e3      	str	r3, [r4, #12]
 8005688:	e66d      	b.n	8005366 <_scanf_float+0x82>
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e5      	beq.n	800565c <_scanf_float+0x378>
 8005690:	9905      	ldr	r1, [sp, #20]
 8005692:	230a      	movs	r3, #10
 8005694:	462a      	mov	r2, r5
 8005696:	3101      	adds	r1, #1
 8005698:	4640      	mov	r0, r8
 800569a:	f000 ff03 	bl	80064a4 <_strtol_r>
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	9e05      	ldr	r6, [sp, #20]
 80056a2:	1ac2      	subs	r2, r0, r3
 80056a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80056a8:	429e      	cmp	r6, r3
 80056aa:	bf28      	it	cs
 80056ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80056b0:	4912      	ldr	r1, [pc, #72]	; (80056fc <_scanf_float+0x418>)
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 f82c 	bl	8005710 <siprintf>
 80056b8:	e7d0      	b.n	800565c <_scanf_float+0x378>
 80056ba:	9903      	ldr	r1, [sp, #12]
 80056bc:	f012 0f04 	tst.w	r2, #4
 80056c0:	f103 0204 	add.w	r2, r3, #4
 80056c4:	600a      	str	r2, [r1, #0]
 80056c6:	d1d9      	bne.n	800567c <_scanf_float+0x398>
 80056c8:	f8d3 8000 	ldr.w	r8, [r3]
 80056cc:	ee10 2a10 	vmov	r2, s0
 80056d0:	ee10 0a10 	vmov	r0, s0
 80056d4:	463b      	mov	r3, r7
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fb fa30 	bl	8000b3c <__aeabi_dcmpun>
 80056dc:	b128      	cbz	r0, 80056ea <_scanf_float+0x406>
 80056de:	4808      	ldr	r0, [pc, #32]	; (8005700 <_scanf_float+0x41c>)
 80056e0:	f000 f810 	bl	8005704 <nanf>
 80056e4:	ed88 0a00 	vstr	s0, [r8]
 80056e8:	e7cb      	b.n	8005682 <_scanf_float+0x39e>
 80056ea:	4630      	mov	r0, r6
 80056ec:	4639      	mov	r1, r7
 80056ee:	f7fb fa83 	bl	8000bf8 <__aeabi_d2f>
 80056f2:	f8c8 0000 	str.w	r0, [r8]
 80056f6:	e7c4      	b.n	8005682 <_scanf_float+0x39e>
 80056f8:	2500      	movs	r5, #0
 80056fa:	e634      	b.n	8005366 <_scanf_float+0x82>
 80056fc:	0800a398 	.word	0x0800a398
 8005700:	0800a7a0 	.word	0x0800a7a0

08005704 <nanf>:
 8005704:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800570c <nanf+0x8>
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	7fc00000 	.word	0x7fc00000

08005710 <siprintf>:
 8005710:	b40e      	push	{r1, r2, r3}
 8005712:	b500      	push	{lr}
 8005714:	b09c      	sub	sp, #112	; 0x70
 8005716:	ab1d      	add	r3, sp, #116	; 0x74
 8005718:	9002      	str	r0, [sp, #8]
 800571a:	9006      	str	r0, [sp, #24]
 800571c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005720:	4809      	ldr	r0, [pc, #36]	; (8005748 <siprintf+0x38>)
 8005722:	9107      	str	r1, [sp, #28]
 8005724:	9104      	str	r1, [sp, #16]
 8005726:	4909      	ldr	r1, [pc, #36]	; (800574c <siprintf+0x3c>)
 8005728:	f853 2b04 	ldr.w	r2, [r3], #4
 800572c:	9105      	str	r1, [sp, #20]
 800572e:	6800      	ldr	r0, [r0, #0]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	a902      	add	r1, sp, #8
 8005734:	f002 fee2 	bl	80084fc <_svfiprintf_r>
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	b01c      	add	sp, #112	; 0x70
 8005740:	f85d eb04 	ldr.w	lr, [sp], #4
 8005744:	b003      	add	sp, #12
 8005746:	4770      	bx	lr
 8005748:	20000034 	.word	0x20000034
 800574c:	ffff0208 	.word	0xffff0208

08005750 <sulp>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
 8005756:	ec45 4b10 	vmov	d0, r4, r5
 800575a:	4616      	mov	r6, r2
 800575c:	f002 fc2c 	bl	8007fb8 <__ulp>
 8005760:	ec51 0b10 	vmov	r0, r1, d0
 8005764:	b17e      	cbz	r6, 8005786 <sulp+0x36>
 8005766:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800576a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd09      	ble.n	8005786 <sulp+0x36>
 8005772:	051b      	lsls	r3, r3, #20
 8005774:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005778:	2400      	movs	r4, #0
 800577a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	f7fa ff41 	bl	8000608 <__aeabi_dmul>
 8005786:	bd70      	pop	{r4, r5, r6, pc}

08005788 <_strtod_l>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ed2d 8b02 	vpush	{d8}
 8005790:	b09d      	sub	sp, #116	; 0x74
 8005792:	461f      	mov	r7, r3
 8005794:	2300      	movs	r3, #0
 8005796:	9318      	str	r3, [sp, #96]	; 0x60
 8005798:	4ba2      	ldr	r3, [pc, #648]	; (8005a24 <_strtod_l+0x29c>)
 800579a:	9213      	str	r2, [sp, #76]	; 0x4c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	4604      	mov	r4, r0
 80057a2:	4618      	mov	r0, r3
 80057a4:	4688      	mov	r8, r1
 80057a6:	f7fa fd1b 	bl	80001e0 <strlen>
 80057aa:	f04f 0a00 	mov.w	sl, #0
 80057ae:	4605      	mov	r5, r0
 80057b0:	f04f 0b00 	mov.w	fp, #0
 80057b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	2a2b      	cmp	r2, #43	; 0x2b
 80057be:	d04e      	beq.n	800585e <_strtod_l+0xd6>
 80057c0:	d83b      	bhi.n	800583a <_strtod_l+0xb2>
 80057c2:	2a0d      	cmp	r2, #13
 80057c4:	d834      	bhi.n	8005830 <_strtod_l+0xa8>
 80057c6:	2a08      	cmp	r2, #8
 80057c8:	d834      	bhi.n	8005834 <_strtod_l+0xac>
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d03e      	beq.n	800584c <_strtod_l+0xc4>
 80057ce:	2300      	movs	r3, #0
 80057d0:	930a      	str	r3, [sp, #40]	; 0x28
 80057d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80057d4:	7833      	ldrb	r3, [r6, #0]
 80057d6:	2b30      	cmp	r3, #48	; 0x30
 80057d8:	f040 80b0 	bne.w	800593c <_strtod_l+0x1b4>
 80057dc:	7873      	ldrb	r3, [r6, #1]
 80057de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057e2:	2b58      	cmp	r3, #88	; 0x58
 80057e4:	d168      	bne.n	80058b8 <_strtod_l+0x130>
 80057e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	ab18      	add	r3, sp, #96	; 0x60
 80057ec:	9702      	str	r7, [sp, #8]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4a8d      	ldr	r2, [pc, #564]	; (8005a28 <_strtod_l+0x2a0>)
 80057f2:	ab19      	add	r3, sp, #100	; 0x64
 80057f4:	a917      	add	r1, sp, #92	; 0x5c
 80057f6:	4620      	mov	r0, r4
 80057f8:	f001 fd38 	bl	800726c <__gethex>
 80057fc:	f010 0707 	ands.w	r7, r0, #7
 8005800:	4605      	mov	r5, r0
 8005802:	d005      	beq.n	8005810 <_strtod_l+0x88>
 8005804:	2f06      	cmp	r7, #6
 8005806:	d12c      	bne.n	8005862 <_strtod_l+0xda>
 8005808:	3601      	adds	r6, #1
 800580a:	2300      	movs	r3, #0
 800580c:	9617      	str	r6, [sp, #92]	; 0x5c
 800580e:	930a      	str	r3, [sp, #40]	; 0x28
 8005810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 8590 	bne.w	8006338 <_strtod_l+0xbb0>
 8005818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581a:	b1eb      	cbz	r3, 8005858 <_strtod_l+0xd0>
 800581c:	4652      	mov	r2, sl
 800581e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005822:	ec43 2b10 	vmov	d0, r2, r3
 8005826:	b01d      	add	sp, #116	; 0x74
 8005828:	ecbd 8b02 	vpop	{d8}
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	2a20      	cmp	r2, #32
 8005832:	d1cc      	bne.n	80057ce <_strtod_l+0x46>
 8005834:	3301      	adds	r3, #1
 8005836:	9317      	str	r3, [sp, #92]	; 0x5c
 8005838:	e7be      	b.n	80057b8 <_strtod_l+0x30>
 800583a:	2a2d      	cmp	r2, #45	; 0x2d
 800583c:	d1c7      	bne.n	80057ce <_strtod_l+0x46>
 800583e:	2201      	movs	r2, #1
 8005840:	920a      	str	r2, [sp, #40]	; 0x28
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	9217      	str	r2, [sp, #92]	; 0x5c
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1c2      	bne.n	80057d2 <_strtod_l+0x4a>
 800584c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800584e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 856e 	bne.w	8006334 <_strtod_l+0xbac>
 8005858:	4652      	mov	r2, sl
 800585a:	465b      	mov	r3, fp
 800585c:	e7e1      	b.n	8005822 <_strtod_l+0x9a>
 800585e:	2200      	movs	r2, #0
 8005860:	e7ee      	b.n	8005840 <_strtod_l+0xb8>
 8005862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005864:	b13a      	cbz	r2, 8005876 <_strtod_l+0xee>
 8005866:	2135      	movs	r1, #53	; 0x35
 8005868:	a81a      	add	r0, sp, #104	; 0x68
 800586a:	f002 fcb0 	bl	80081ce <__copybits>
 800586e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005870:	4620      	mov	r0, r4
 8005872:	f002 f86f 	bl	8007954 <_Bfree>
 8005876:	3f01      	subs	r7, #1
 8005878:	2f04      	cmp	r7, #4
 800587a:	d806      	bhi.n	800588a <_strtod_l+0x102>
 800587c:	e8df f007 	tbb	[pc, r7]
 8005880:	1714030a 	.word	0x1714030a
 8005884:	0a          	.byte	0x0a
 8005885:	00          	.byte	0x00
 8005886:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800588a:	0728      	lsls	r0, r5, #28
 800588c:	d5c0      	bpl.n	8005810 <_strtod_l+0x88>
 800588e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005892:	e7bd      	b.n	8005810 <_strtod_l+0x88>
 8005894:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005898:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800589a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800589e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80058a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058a6:	e7f0      	b.n	800588a <_strtod_l+0x102>
 80058a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005a2c <_strtod_l+0x2a4>
 80058ac:	e7ed      	b.n	800588a <_strtod_l+0x102>
 80058ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80058b2:	f04f 3aff 	mov.w	sl, #4294967295
 80058b6:	e7e8      	b.n	800588a <_strtod_l+0x102>
 80058b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b30      	cmp	r3, #48	; 0x30
 80058c2:	d0f9      	beq.n	80058b8 <_strtod_l+0x130>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0a3      	beq.n	8005810 <_strtod_l+0x88>
 80058c8:	2301      	movs	r3, #1
 80058ca:	f04f 0900 	mov.w	r9, #0
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058d2:	9308      	str	r3, [sp, #32]
 80058d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80058d8:	464f      	mov	r7, r9
 80058da:	220a      	movs	r2, #10
 80058dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80058de:	7806      	ldrb	r6, [r0, #0]
 80058e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80058e4:	b2d9      	uxtb	r1, r3
 80058e6:	2909      	cmp	r1, #9
 80058e8:	d92a      	bls.n	8005940 <_strtod_l+0x1b8>
 80058ea:	9905      	ldr	r1, [sp, #20]
 80058ec:	462a      	mov	r2, r5
 80058ee:	f002 ff1f 	bl	8008730 <strncmp>
 80058f2:	b398      	cbz	r0, 800595c <_strtod_l+0x1d4>
 80058f4:	2000      	movs	r0, #0
 80058f6:	4632      	mov	r2, r6
 80058f8:	463d      	mov	r5, r7
 80058fa:	9005      	str	r0, [sp, #20]
 80058fc:	4603      	mov	r3, r0
 80058fe:	2a65      	cmp	r2, #101	; 0x65
 8005900:	d001      	beq.n	8005906 <_strtod_l+0x17e>
 8005902:	2a45      	cmp	r2, #69	; 0x45
 8005904:	d118      	bne.n	8005938 <_strtod_l+0x1b0>
 8005906:	b91d      	cbnz	r5, 8005910 <_strtod_l+0x188>
 8005908:	9a04      	ldr	r2, [sp, #16]
 800590a:	4302      	orrs	r2, r0
 800590c:	d09e      	beq.n	800584c <_strtod_l+0xc4>
 800590e:	2500      	movs	r5, #0
 8005910:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005914:	f108 0201 	add.w	r2, r8, #1
 8005918:	9217      	str	r2, [sp, #92]	; 0x5c
 800591a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800591e:	2a2b      	cmp	r2, #43	; 0x2b
 8005920:	d075      	beq.n	8005a0e <_strtod_l+0x286>
 8005922:	2a2d      	cmp	r2, #45	; 0x2d
 8005924:	d07b      	beq.n	8005a1e <_strtod_l+0x296>
 8005926:	f04f 0c00 	mov.w	ip, #0
 800592a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800592e:	2909      	cmp	r1, #9
 8005930:	f240 8082 	bls.w	8005a38 <_strtod_l+0x2b0>
 8005934:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005938:	2600      	movs	r6, #0
 800593a:	e09d      	b.n	8005a78 <_strtod_l+0x2f0>
 800593c:	2300      	movs	r3, #0
 800593e:	e7c4      	b.n	80058ca <_strtod_l+0x142>
 8005940:	2f08      	cmp	r7, #8
 8005942:	bfd8      	it	le
 8005944:	9907      	ldrle	r1, [sp, #28]
 8005946:	f100 0001 	add.w	r0, r0, #1
 800594a:	bfda      	itte	le
 800594c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005950:	9307      	strle	r3, [sp, #28]
 8005952:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005956:	3701      	adds	r7, #1
 8005958:	9017      	str	r0, [sp, #92]	; 0x5c
 800595a:	e7bf      	b.n	80058dc <_strtod_l+0x154>
 800595c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800595e:	195a      	adds	r2, r3, r5
 8005960:	9217      	str	r2, [sp, #92]	; 0x5c
 8005962:	5d5a      	ldrb	r2, [r3, r5]
 8005964:	2f00      	cmp	r7, #0
 8005966:	d037      	beq.n	80059d8 <_strtod_l+0x250>
 8005968:	9005      	str	r0, [sp, #20]
 800596a:	463d      	mov	r5, r7
 800596c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005970:	2b09      	cmp	r3, #9
 8005972:	d912      	bls.n	800599a <_strtod_l+0x212>
 8005974:	2301      	movs	r3, #1
 8005976:	e7c2      	b.n	80058fe <_strtod_l+0x176>
 8005978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	9217      	str	r2, [sp, #92]	; 0x5c
 800597e:	785a      	ldrb	r2, [r3, #1]
 8005980:	3001      	adds	r0, #1
 8005982:	2a30      	cmp	r2, #48	; 0x30
 8005984:	d0f8      	beq.n	8005978 <_strtod_l+0x1f0>
 8005986:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800598a:	2b08      	cmp	r3, #8
 800598c:	f200 84d9 	bhi.w	8006342 <_strtod_l+0xbba>
 8005990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005992:	9005      	str	r0, [sp, #20]
 8005994:	2000      	movs	r0, #0
 8005996:	9308      	str	r3, [sp, #32]
 8005998:	4605      	mov	r5, r0
 800599a:	3a30      	subs	r2, #48	; 0x30
 800599c:	f100 0301 	add.w	r3, r0, #1
 80059a0:	d014      	beq.n	80059cc <_strtod_l+0x244>
 80059a2:	9905      	ldr	r1, [sp, #20]
 80059a4:	4419      	add	r1, r3
 80059a6:	9105      	str	r1, [sp, #20]
 80059a8:	462b      	mov	r3, r5
 80059aa:	eb00 0e05 	add.w	lr, r0, r5
 80059ae:	210a      	movs	r1, #10
 80059b0:	4573      	cmp	r3, lr
 80059b2:	d113      	bne.n	80059dc <_strtod_l+0x254>
 80059b4:	182b      	adds	r3, r5, r0
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	f105 0501 	add.w	r5, r5, #1
 80059bc:	4405      	add	r5, r0
 80059be:	dc1c      	bgt.n	80059fa <_strtod_l+0x272>
 80059c0:	9907      	ldr	r1, [sp, #28]
 80059c2:	230a      	movs	r3, #10
 80059c4:	fb03 2301 	mla	r3, r3, r1, r2
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059ce:	1c51      	adds	r1, r2, #1
 80059d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80059d2:	7852      	ldrb	r2, [r2, #1]
 80059d4:	4618      	mov	r0, r3
 80059d6:	e7c9      	b.n	800596c <_strtod_l+0x1e4>
 80059d8:	4638      	mov	r0, r7
 80059da:	e7d2      	b.n	8005982 <_strtod_l+0x1fa>
 80059dc:	2b08      	cmp	r3, #8
 80059de:	dc04      	bgt.n	80059ea <_strtod_l+0x262>
 80059e0:	9e07      	ldr	r6, [sp, #28]
 80059e2:	434e      	muls	r6, r1
 80059e4:	9607      	str	r6, [sp, #28]
 80059e6:	3301      	adds	r3, #1
 80059e8:	e7e2      	b.n	80059b0 <_strtod_l+0x228>
 80059ea:	f103 0c01 	add.w	ip, r3, #1
 80059ee:	f1bc 0f10 	cmp.w	ip, #16
 80059f2:	bfd8      	it	le
 80059f4:	fb01 f909 	mulle.w	r9, r1, r9
 80059f8:	e7f5      	b.n	80059e6 <_strtod_l+0x25e>
 80059fa:	2d10      	cmp	r5, #16
 80059fc:	bfdc      	itt	le
 80059fe:	230a      	movle	r3, #10
 8005a00:	fb03 2909 	mlale	r9, r3, r9, r2
 8005a04:	e7e1      	b.n	80059ca <_strtod_l+0x242>
 8005a06:	2300      	movs	r3, #0
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e77c      	b.n	8005908 <_strtod_l+0x180>
 8005a0e:	f04f 0c00 	mov.w	ip, #0
 8005a12:	f108 0202 	add.w	r2, r8, #2
 8005a16:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005a1c:	e785      	b.n	800592a <_strtod_l+0x1a2>
 8005a1e:	f04f 0c01 	mov.w	ip, #1
 8005a22:	e7f6      	b.n	8005a12 <_strtod_l+0x28a>
 8005a24:	0800a5e8 	.word	0x0800a5e8
 8005a28:	0800a3a0 	.word	0x0800a3a0
 8005a2c:	7ff00000 	.word	0x7ff00000
 8005a30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a32:	1c51      	adds	r1, r2, #1
 8005a34:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a36:	7852      	ldrb	r2, [r2, #1]
 8005a38:	2a30      	cmp	r2, #48	; 0x30
 8005a3a:	d0f9      	beq.n	8005a30 <_strtod_l+0x2a8>
 8005a3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005a40:	2908      	cmp	r1, #8
 8005a42:	f63f af79 	bhi.w	8005938 <_strtod_l+0x1b0>
 8005a46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005a4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a4c:	9206      	str	r2, [sp, #24]
 8005a4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a50:	1c51      	adds	r1, r2, #1
 8005a52:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a54:	7852      	ldrb	r2, [r2, #1]
 8005a56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005a5a:	2e09      	cmp	r6, #9
 8005a5c:	d937      	bls.n	8005ace <_strtod_l+0x346>
 8005a5e:	9e06      	ldr	r6, [sp, #24]
 8005a60:	1b89      	subs	r1, r1, r6
 8005a62:	2908      	cmp	r1, #8
 8005a64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005a68:	dc02      	bgt.n	8005a70 <_strtod_l+0x2e8>
 8005a6a:	4576      	cmp	r6, lr
 8005a6c:	bfa8      	it	ge
 8005a6e:	4676      	movge	r6, lr
 8005a70:	f1bc 0f00 	cmp.w	ip, #0
 8005a74:	d000      	beq.n	8005a78 <_strtod_l+0x2f0>
 8005a76:	4276      	negs	r6, r6
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	d14d      	bne.n	8005b18 <_strtod_l+0x390>
 8005a7c:	9904      	ldr	r1, [sp, #16]
 8005a7e:	4301      	orrs	r1, r0
 8005a80:	f47f aec6 	bne.w	8005810 <_strtod_l+0x88>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f47f aee1 	bne.w	800584c <_strtod_l+0xc4>
 8005a8a:	2a69      	cmp	r2, #105	; 0x69
 8005a8c:	d027      	beq.n	8005ade <_strtod_l+0x356>
 8005a8e:	dc24      	bgt.n	8005ada <_strtod_l+0x352>
 8005a90:	2a49      	cmp	r2, #73	; 0x49
 8005a92:	d024      	beq.n	8005ade <_strtod_l+0x356>
 8005a94:	2a4e      	cmp	r2, #78	; 0x4e
 8005a96:	f47f aed9 	bne.w	800584c <_strtod_l+0xc4>
 8005a9a:	499f      	ldr	r1, [pc, #636]	; (8005d18 <_strtod_l+0x590>)
 8005a9c:	a817      	add	r0, sp, #92	; 0x5c
 8005a9e:	f001 fe3d 	bl	800771c <__match>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f43f aed2 	beq.w	800584c <_strtod_l+0xc4>
 8005aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b28      	cmp	r3, #40	; 0x28
 8005aae:	d12d      	bne.n	8005b0c <_strtod_l+0x384>
 8005ab0:	499a      	ldr	r1, [pc, #616]	; (8005d1c <_strtod_l+0x594>)
 8005ab2:	aa1a      	add	r2, sp, #104	; 0x68
 8005ab4:	a817      	add	r0, sp, #92	; 0x5c
 8005ab6:	f001 fe45 	bl	8007744 <__hexnan>
 8005aba:	2805      	cmp	r0, #5
 8005abc:	d126      	bne.n	8005b0c <_strtod_l+0x384>
 8005abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005ac4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005ac8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005acc:	e6a0      	b.n	8005810 <_strtod_l+0x88>
 8005ace:	210a      	movs	r1, #10
 8005ad0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005ad4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005ad8:	e7b9      	b.n	8005a4e <_strtod_l+0x2c6>
 8005ada:	2a6e      	cmp	r2, #110	; 0x6e
 8005adc:	e7db      	b.n	8005a96 <_strtod_l+0x30e>
 8005ade:	4990      	ldr	r1, [pc, #576]	; (8005d20 <_strtod_l+0x598>)
 8005ae0:	a817      	add	r0, sp, #92	; 0x5c
 8005ae2:	f001 fe1b 	bl	800771c <__match>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f43f aeb0 	beq.w	800584c <_strtod_l+0xc4>
 8005aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aee:	498d      	ldr	r1, [pc, #564]	; (8005d24 <_strtod_l+0x59c>)
 8005af0:	3b01      	subs	r3, #1
 8005af2:	a817      	add	r0, sp, #92	; 0x5c
 8005af4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005af6:	f001 fe11 	bl	800771c <__match>
 8005afa:	b910      	cbnz	r0, 8005b02 <_strtod_l+0x37a>
 8005afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005afe:	3301      	adds	r3, #1
 8005b00:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005d34 <_strtod_l+0x5ac>
 8005b06:	f04f 0a00 	mov.w	sl, #0
 8005b0a:	e681      	b.n	8005810 <_strtod_l+0x88>
 8005b0c:	4886      	ldr	r0, [pc, #536]	; (8005d28 <_strtod_l+0x5a0>)
 8005b0e:	f002 fdf7 	bl	8008700 <nan>
 8005b12:	ec5b ab10 	vmov	sl, fp, d0
 8005b16:	e67b      	b.n	8005810 <_strtod_l+0x88>
 8005b18:	9b05      	ldr	r3, [sp, #20]
 8005b1a:	9807      	ldr	r0, [sp, #28]
 8005b1c:	1af3      	subs	r3, r6, r3
 8005b1e:	2f00      	cmp	r7, #0
 8005b20:	bf08      	it	eq
 8005b22:	462f      	moveq	r7, r5
 8005b24:	2d10      	cmp	r5, #16
 8005b26:	9306      	str	r3, [sp, #24]
 8005b28:	46a8      	mov	r8, r5
 8005b2a:	bfa8      	it	ge
 8005b2c:	f04f 0810 	movge.w	r8, #16
 8005b30:	f7fa fcf0 	bl	8000514 <__aeabi_ui2d>
 8005b34:	2d09      	cmp	r5, #9
 8005b36:	4682      	mov	sl, r0
 8005b38:	468b      	mov	fp, r1
 8005b3a:	dd13      	ble.n	8005b64 <_strtod_l+0x3dc>
 8005b3c:	4b7b      	ldr	r3, [pc, #492]	; (8005d2c <_strtod_l+0x5a4>)
 8005b3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005b46:	f7fa fd5f 	bl	8000608 <__aeabi_dmul>
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	4648      	mov	r0, r9
 8005b4e:	468b      	mov	fp, r1
 8005b50:	f7fa fce0 	bl	8000514 <__aeabi_ui2d>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4650      	mov	r0, sl
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	f7fa fb9e 	bl	800029c <__adddf3>
 8005b60:	4682      	mov	sl, r0
 8005b62:	468b      	mov	fp, r1
 8005b64:	2d0f      	cmp	r5, #15
 8005b66:	dc38      	bgt.n	8005bda <_strtod_l+0x452>
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f43f ae50 	beq.w	8005810 <_strtod_l+0x88>
 8005b70:	dd24      	ble.n	8005bbc <_strtod_l+0x434>
 8005b72:	2b16      	cmp	r3, #22
 8005b74:	dc0b      	bgt.n	8005b8e <_strtod_l+0x406>
 8005b76:	496d      	ldr	r1, [pc, #436]	; (8005d2c <_strtod_l+0x5a4>)
 8005b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b80:	4652      	mov	r2, sl
 8005b82:	465b      	mov	r3, fp
 8005b84:	f7fa fd40 	bl	8000608 <__aeabi_dmul>
 8005b88:	4682      	mov	sl, r0
 8005b8a:	468b      	mov	fp, r1
 8005b8c:	e640      	b.n	8005810 <_strtod_l+0x88>
 8005b8e:	9a06      	ldr	r2, [sp, #24]
 8005b90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005b94:	4293      	cmp	r3, r2
 8005b96:	db20      	blt.n	8005bda <_strtod_l+0x452>
 8005b98:	4c64      	ldr	r4, [pc, #400]	; (8005d2c <_strtod_l+0x5a4>)
 8005b9a:	f1c5 050f 	rsb	r5, r5, #15
 8005b9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	465b      	mov	r3, fp
 8005ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005baa:	f7fa fd2d 	bl	8000608 <__aeabi_dmul>
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	1b5d      	subs	r5, r3, r5
 8005bb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005bb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005bba:	e7e3      	b.n	8005b84 <_strtod_l+0x3fc>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	3316      	adds	r3, #22
 8005bc0:	db0b      	blt.n	8005bda <_strtod_l+0x452>
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	1b9e      	subs	r6, r3, r6
 8005bc6:	4b59      	ldr	r3, [pc, #356]	; (8005d2c <_strtod_l+0x5a4>)
 8005bc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005bcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	f7fa fe42 	bl	800085c <__aeabi_ddiv>
 8005bd8:	e7d6      	b.n	8005b88 <_strtod_l+0x400>
 8005bda:	9b06      	ldr	r3, [sp, #24]
 8005bdc:	eba5 0808 	sub.w	r8, r5, r8
 8005be0:	4498      	add	r8, r3
 8005be2:	f1b8 0f00 	cmp.w	r8, #0
 8005be6:	dd74      	ble.n	8005cd2 <_strtod_l+0x54a>
 8005be8:	f018 030f 	ands.w	r3, r8, #15
 8005bec:	d00a      	beq.n	8005c04 <_strtod_l+0x47c>
 8005bee:	494f      	ldr	r1, [pc, #316]	; (8005d2c <_strtod_l+0x5a4>)
 8005bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	465b      	mov	r3, fp
 8005bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bfc:	f7fa fd04 	bl	8000608 <__aeabi_dmul>
 8005c00:	4682      	mov	sl, r0
 8005c02:	468b      	mov	fp, r1
 8005c04:	f038 080f 	bics.w	r8, r8, #15
 8005c08:	d04f      	beq.n	8005caa <_strtod_l+0x522>
 8005c0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c0e:	dd22      	ble.n	8005c56 <_strtod_l+0x4ce>
 8005c10:	2500      	movs	r5, #0
 8005c12:	462e      	mov	r6, r5
 8005c14:	9507      	str	r5, [sp, #28]
 8005c16:	9505      	str	r5, [sp, #20]
 8005c18:	2322      	movs	r3, #34	; 0x22
 8005c1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005d34 <_strtod_l+0x5ac>
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	f04f 0a00 	mov.w	sl, #0
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f43f adf2 	beq.w	8005810 <_strtod_l+0x88>
 8005c2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f001 fe90 	bl	8007954 <_Bfree>
 8005c34:	9905      	ldr	r1, [sp, #20]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f001 fe8c 	bl	8007954 <_Bfree>
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f001 fe88 	bl	8007954 <_Bfree>
 8005c44:	9907      	ldr	r1, [sp, #28]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f001 fe84 	bl	8007954 <_Bfree>
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f001 fe80 	bl	8007954 <_Bfree>
 8005c54:	e5dc      	b.n	8005810 <_strtod_l+0x88>
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <_strtod_l+0x5a8>)
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	4699      	mov	r9, r3
 8005c66:	f1b8 0f01 	cmp.w	r8, #1
 8005c6a:	dc21      	bgt.n	8005cb0 <_strtod_l+0x528>
 8005c6c:	b10b      	cbz	r3, 8005c72 <_strtod_l+0x4ea>
 8005c6e:	4682      	mov	sl, r0
 8005c70:	468b      	mov	fp, r1
 8005c72:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <_strtod_l+0x5a8>)
 8005c74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	465b      	mov	r3, fp
 8005c80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c84:	f7fa fcc0 	bl	8000608 <__aeabi_dmul>
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <_strtod_l+0x5ac>)
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	492a      	ldr	r1, [pc, #168]	; (8005d38 <_strtod_l+0x5b0>)
 8005c90:	428b      	cmp	r3, r1
 8005c92:	4682      	mov	sl, r0
 8005c94:	d8bc      	bhi.n	8005c10 <_strtod_l+0x488>
 8005c96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c9a:	428b      	cmp	r3, r1
 8005c9c:	bf86      	itte	hi
 8005c9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005d3c <_strtod_l+0x5b4>
 8005ca2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ca6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005caa:	2300      	movs	r3, #0
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	e084      	b.n	8005dba <_strtod_l+0x632>
 8005cb0:	f018 0f01 	tst.w	r8, #1
 8005cb4:	d005      	beq.n	8005cc2 <_strtod_l+0x53a>
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fca4 	bl	8000608 <__aeabi_dmul>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	9a04      	ldr	r2, [sp, #16]
 8005cc4:	3208      	adds	r2, #8
 8005cc6:	f109 0901 	add.w	r9, r9, #1
 8005cca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005cce:	9204      	str	r2, [sp, #16]
 8005cd0:	e7c9      	b.n	8005c66 <_strtod_l+0x4de>
 8005cd2:	d0ea      	beq.n	8005caa <_strtod_l+0x522>
 8005cd4:	f1c8 0800 	rsb	r8, r8, #0
 8005cd8:	f018 020f 	ands.w	r2, r8, #15
 8005cdc:	d00a      	beq.n	8005cf4 <_strtod_l+0x56c>
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <_strtod_l+0x5a4>)
 8005ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	4659      	mov	r1, fp
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fdb6 	bl	800085c <__aeabi_ddiv>
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	468b      	mov	fp, r1
 8005cf4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005cf8:	d0d7      	beq.n	8005caa <_strtod_l+0x522>
 8005cfa:	f1b8 0f1f 	cmp.w	r8, #31
 8005cfe:	dd1f      	ble.n	8005d40 <_strtod_l+0x5b8>
 8005d00:	2500      	movs	r5, #0
 8005d02:	462e      	mov	r6, r5
 8005d04:	9507      	str	r5, [sp, #28]
 8005d06:	9505      	str	r5, [sp, #20]
 8005d08:	2322      	movs	r3, #34	; 0x22
 8005d0a:	f04f 0a00 	mov.w	sl, #0
 8005d0e:	f04f 0b00 	mov.w	fp, #0
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	e786      	b.n	8005c24 <_strtod_l+0x49c>
 8005d16:	bf00      	nop
 8005d18:	0800a371 	.word	0x0800a371
 8005d1c:	0800a3b4 	.word	0x0800a3b4
 8005d20:	0800a369 	.word	0x0800a369
 8005d24:	0800a4f4 	.word	0x0800a4f4
 8005d28:	0800a7a0 	.word	0x0800a7a0
 8005d2c:	0800a680 	.word	0x0800a680
 8005d30:	0800a658 	.word	0x0800a658
 8005d34:	7ff00000 	.word	0x7ff00000
 8005d38:	7ca00000 	.word	0x7ca00000
 8005d3c:	7fefffff 	.word	0x7fefffff
 8005d40:	f018 0310 	ands.w	r3, r8, #16
 8005d44:	bf18      	it	ne
 8005d46:	236a      	movne	r3, #106	; 0x6a
 8005d48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80060f8 <_strtod_l+0x970>
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	4650      	mov	r0, sl
 8005d50:	4659      	mov	r1, fp
 8005d52:	2300      	movs	r3, #0
 8005d54:	f018 0f01 	tst.w	r8, #1
 8005d58:	d004      	beq.n	8005d64 <_strtod_l+0x5dc>
 8005d5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d5e:	f7fa fc53 	bl	8000608 <__aeabi_dmul>
 8005d62:	2301      	movs	r3, #1
 8005d64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005d68:	f109 0908 	add.w	r9, r9, #8
 8005d6c:	d1f2      	bne.n	8005d54 <_strtod_l+0x5cc>
 8005d6e:	b10b      	cbz	r3, 8005d74 <_strtod_l+0x5ec>
 8005d70:	4682      	mov	sl, r0
 8005d72:	468b      	mov	fp, r1
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	b1c3      	cbz	r3, 8005daa <_strtod_l+0x622>
 8005d78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	4659      	mov	r1, fp
 8005d84:	dd11      	ble.n	8005daa <_strtod_l+0x622>
 8005d86:	2b1f      	cmp	r3, #31
 8005d88:	f340 8124 	ble.w	8005fd4 <_strtod_l+0x84c>
 8005d8c:	2b34      	cmp	r3, #52	; 0x34
 8005d8e:	bfde      	ittt	le
 8005d90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005d94:	f04f 33ff 	movle.w	r3, #4294967295
 8005d98:	fa03 f202 	lslle.w	r2, r3, r2
 8005d9c:	f04f 0a00 	mov.w	sl, #0
 8005da0:	bfcc      	ite	gt
 8005da2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005da6:	ea02 0b01 	andle.w	fp, r2, r1
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	4650      	mov	r0, sl
 8005db0:	4659      	mov	r1, fp
 8005db2:	f7fa fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d1a2      	bne.n	8005d00 <_strtod_l+0x578>
 8005dba:	9b07      	ldr	r3, [sp, #28]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	9908      	ldr	r1, [sp, #32]
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fe2d 	bl	8007a24 <__s2b>
 8005dca:	9007      	str	r0, [sp, #28]
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f af1f 	beq.w	8005c10 <_strtod_l+0x488>
 8005dd2:	9b05      	ldr	r3, [sp, #20]
 8005dd4:	1b9e      	subs	r6, r3, r6
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfb4      	ite	lt
 8005ddc:	4633      	movlt	r3, r6
 8005dde:	2300      	movge	r3, #0
 8005de0:	930c      	str	r3, [sp, #48]	; 0x30
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	2500      	movs	r5, #0
 8005de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dea:	9312      	str	r3, [sp, #72]	; 0x48
 8005dec:	462e      	mov	r6, r5
 8005dee:	9b07      	ldr	r3, [sp, #28]
 8005df0:	4620      	mov	r0, r4
 8005df2:	6859      	ldr	r1, [r3, #4]
 8005df4:	f001 fd6e 	bl	80078d4 <_Balloc>
 8005df8:	9005      	str	r0, [sp, #20]
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f43f af0c 	beq.w	8005c18 <_strtod_l+0x490>
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	3202      	adds	r2, #2
 8005e06:	f103 010c 	add.w	r1, r3, #12
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	300c      	adds	r0, #12
 8005e0e:	f001 fd53 	bl	80078b8 <memcpy>
 8005e12:	ec4b ab10 	vmov	d0, sl, fp
 8005e16:	aa1a      	add	r2, sp, #104	; 0x68
 8005e18:	a919      	add	r1, sp, #100	; 0x64
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f002 f948 	bl	80080b0 <__d2b>
 8005e20:	ec4b ab18 	vmov	d8, sl, fp
 8005e24:	9018      	str	r0, [sp, #96]	; 0x60
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f43f aef6 	beq.w	8005c18 <_strtod_l+0x490>
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f001 fe92 	bl	8007b58 <__i2b>
 8005e34:	4606      	mov	r6, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f43f aeee 	beq.w	8005c18 <_strtod_l+0x490>
 8005e3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e3e:	9904      	ldr	r1, [sp, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfab      	itete	ge
 8005e44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005e46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005e48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005e4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005e4e:	bfac      	ite	ge
 8005e50:	eb03 0902 	addge.w	r9, r3, r2
 8005e54:	1ad7      	sublt	r7, r2, r3
 8005e56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e58:	eba3 0801 	sub.w	r8, r3, r1
 8005e5c:	4490      	add	r8, r2
 8005e5e:	4ba1      	ldr	r3, [pc, #644]	; (80060e4 <_strtod_l+0x95c>)
 8005e60:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e64:	4598      	cmp	r8, r3
 8005e66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e6a:	f280 80c7 	bge.w	8005ffc <_strtod_l+0x874>
 8005e6e:	eba3 0308 	sub.w	r3, r3, r8
 8005e72:	2b1f      	cmp	r3, #31
 8005e74:	eba2 0203 	sub.w	r2, r2, r3
 8005e78:	f04f 0101 	mov.w	r1, #1
 8005e7c:	f300 80b1 	bgt.w	8005fe2 <_strtod_l+0x85a>
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	930d      	str	r3, [sp, #52]	; 0x34
 8005e86:	2300      	movs	r3, #0
 8005e88:	9308      	str	r3, [sp, #32]
 8005e8a:	eb09 0802 	add.w	r8, r9, r2
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	45c1      	cmp	r9, r8
 8005e92:	4417      	add	r7, r2
 8005e94:	441f      	add	r7, r3
 8005e96:	464b      	mov	r3, r9
 8005e98:	bfa8      	it	ge
 8005e9a:	4643      	movge	r3, r8
 8005e9c:	42bb      	cmp	r3, r7
 8005e9e:	bfa8      	it	ge
 8005ea0:	463b      	movge	r3, r7
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bfc2      	ittt	gt
 8005ea6:	eba8 0803 	subgt.w	r8, r8, r3
 8005eaa:	1aff      	subgt	r7, r7, r3
 8005eac:	eba9 0903 	subgt.w	r9, r9, r3
 8005eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd17      	ble.n	8005ee6 <_strtod_l+0x75e>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f001 ff0c 	bl	8007cd8 <__pow5mult>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	f43f aea8 	beq.w	8005c18 <_strtod_l+0x490>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f001 fe59 	bl	8007b84 <__multiply>
 8005ed2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f43f ae9f 	beq.w	8005c18 <_strtod_l+0x490>
 8005eda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005edc:	4620      	mov	r0, r4
 8005ede:	f001 fd39 	bl	8007954 <_Bfree>
 8005ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee4:	9318      	str	r3, [sp, #96]	; 0x60
 8005ee6:	f1b8 0f00 	cmp.w	r8, #0
 8005eea:	f300 808c 	bgt.w	8006006 <_strtod_l+0x87e>
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dd08      	ble.n	8005f06 <_strtod_l+0x77e>
 8005ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ef6:	9905      	ldr	r1, [sp, #20]
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f001 feed 	bl	8007cd8 <__pow5mult>
 8005efe:	9005      	str	r0, [sp, #20]
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f43f ae89 	beq.w	8005c18 <_strtod_l+0x490>
 8005f06:	2f00      	cmp	r7, #0
 8005f08:	dd08      	ble.n	8005f1c <_strtod_l+0x794>
 8005f0a:	9905      	ldr	r1, [sp, #20]
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f001 ff3c 	bl	8007d8c <__lshift>
 8005f14:	9005      	str	r0, [sp, #20]
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f ae7e 	beq.w	8005c18 <_strtod_l+0x490>
 8005f1c:	f1b9 0f00 	cmp.w	r9, #0
 8005f20:	dd08      	ble.n	8005f34 <_strtod_l+0x7ac>
 8005f22:	4631      	mov	r1, r6
 8005f24:	464a      	mov	r2, r9
 8005f26:	4620      	mov	r0, r4
 8005f28:	f001 ff30 	bl	8007d8c <__lshift>
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f43f ae72 	beq.w	8005c18 <_strtod_l+0x490>
 8005f34:	9a05      	ldr	r2, [sp, #20]
 8005f36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f001 ffb3 	bl	8007ea4 <__mdiff>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f43f ae69 	beq.w	8005c18 <_strtod_l+0x490>
 8005f46:	68c3      	ldr	r3, [r0, #12]
 8005f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60c3      	str	r3, [r0, #12]
 8005f4e:	4631      	mov	r1, r6
 8005f50:	f001 ff8c 	bl	8007e6c <__mcmp>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	da60      	bge.n	800601a <_strtod_l+0x892>
 8005f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5a:	ea53 030a 	orrs.w	r3, r3, sl
 8005f5e:	f040 8082 	bne.w	8006066 <_strtod_l+0x8de>
 8005f62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d17d      	bne.n	8006066 <_strtod_l+0x8de>
 8005f6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f6e:	0d1b      	lsrs	r3, r3, #20
 8005f70:	051b      	lsls	r3, r3, #20
 8005f72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f76:	d976      	bls.n	8006066 <_strtod_l+0x8de>
 8005f78:	696b      	ldr	r3, [r5, #20]
 8005f7a:	b913      	cbnz	r3, 8005f82 <_strtod_l+0x7fa>
 8005f7c:	692b      	ldr	r3, [r5, #16]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	dd71      	ble.n	8006066 <_strtod_l+0x8de>
 8005f82:	4629      	mov	r1, r5
 8005f84:	2201      	movs	r2, #1
 8005f86:	4620      	mov	r0, r4
 8005f88:	f001 ff00 	bl	8007d8c <__lshift>
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4605      	mov	r5, r0
 8005f90:	f001 ff6c 	bl	8007e6c <__mcmp>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	dd66      	ble.n	8006066 <_strtod_l+0x8de>
 8005f98:	9904      	ldr	r1, [sp, #16]
 8005f9a:	4a53      	ldr	r2, [pc, #332]	; (80060e8 <_strtod_l+0x960>)
 8005f9c:	465b      	mov	r3, fp
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	f000 8081 	beq.w	80060a6 <_strtod_l+0x91e>
 8005fa4:	ea02 010b 	and.w	r1, r2, fp
 8005fa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fac:	dc7b      	bgt.n	80060a6 <_strtod_l+0x91e>
 8005fae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005fb2:	f77f aea9 	ble.w	8005d08 <_strtod_l+0x580>
 8005fb6:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <_strtod_l+0x964>)
 8005fb8:	4650      	mov	r0, sl
 8005fba:	4659      	mov	r1, fp
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f7fa fb23 	bl	8000608 <__aeabi_dmul>
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4303      	orrs	r3, r0
 8005fc6:	bf08      	it	eq
 8005fc8:	2322      	moveq	r3, #34	; 0x22
 8005fca:	4682      	mov	sl, r0
 8005fcc:	468b      	mov	fp, r1
 8005fce:	bf08      	it	eq
 8005fd0:	6023      	streq	r3, [r4, #0]
 8005fd2:	e62b      	b.n	8005c2c <_strtod_l+0x4a4>
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	ea03 0a0a 	and.w	sl, r3, sl
 8005fe0:	e6e3      	b.n	8005daa <_strtod_l+0x622>
 8005fe2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005fe6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005fea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005fee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005ff2:	fa01 f308 	lsl.w	r3, r1, r8
 8005ff6:	9308      	str	r3, [sp, #32]
 8005ff8:	910d      	str	r1, [sp, #52]	; 0x34
 8005ffa:	e746      	b.n	8005e8a <_strtod_l+0x702>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	2301      	movs	r3, #1
 8006002:	930d      	str	r3, [sp, #52]	; 0x34
 8006004:	e741      	b.n	8005e8a <_strtod_l+0x702>
 8006006:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006008:	4642      	mov	r2, r8
 800600a:	4620      	mov	r0, r4
 800600c:	f001 febe 	bl	8007d8c <__lshift>
 8006010:	9018      	str	r0, [sp, #96]	; 0x60
 8006012:	2800      	cmp	r0, #0
 8006014:	f47f af6b 	bne.w	8005eee <_strtod_l+0x766>
 8006018:	e5fe      	b.n	8005c18 <_strtod_l+0x490>
 800601a:	465f      	mov	r7, fp
 800601c:	d16e      	bne.n	80060fc <_strtod_l+0x974>
 800601e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006024:	b342      	cbz	r2, 8006078 <_strtod_l+0x8f0>
 8006026:	4a32      	ldr	r2, [pc, #200]	; (80060f0 <_strtod_l+0x968>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d128      	bne.n	800607e <_strtod_l+0x8f6>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	4651      	mov	r1, sl
 8006030:	b1eb      	cbz	r3, 800606e <_strtod_l+0x8e6>
 8006032:	4b2d      	ldr	r3, [pc, #180]	; (80060e8 <_strtod_l+0x960>)
 8006034:	403b      	ands	r3, r7
 8006036:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	d819      	bhi.n	8006074 <_strtod_l+0x8ec>
 8006040:	0d1b      	lsrs	r3, r3, #20
 8006042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	4299      	cmp	r1, r3
 800604c:	d117      	bne.n	800607e <_strtod_l+0x8f6>
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <_strtod_l+0x96c>)
 8006050:	429f      	cmp	r7, r3
 8006052:	d102      	bne.n	800605a <_strtod_l+0x8d2>
 8006054:	3101      	adds	r1, #1
 8006056:	f43f addf 	beq.w	8005c18 <_strtod_l+0x490>
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <_strtod_l+0x960>)
 800605c:	403b      	ands	r3, r7
 800605e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006062:	f04f 0a00 	mov.w	sl, #0
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1a4      	bne.n	8005fb6 <_strtod_l+0x82e>
 800606c:	e5de      	b.n	8005c2c <_strtod_l+0x4a4>
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	e7ea      	b.n	800604a <_strtod_l+0x8c2>
 8006074:	4613      	mov	r3, r2
 8006076:	e7e8      	b.n	800604a <_strtod_l+0x8c2>
 8006078:	ea53 030a 	orrs.w	r3, r3, sl
 800607c:	d08c      	beq.n	8005f98 <_strtod_l+0x810>
 800607e:	9b08      	ldr	r3, [sp, #32]
 8006080:	b1db      	cbz	r3, 80060ba <_strtod_l+0x932>
 8006082:	423b      	tst	r3, r7
 8006084:	d0ef      	beq.n	8006066 <_strtod_l+0x8de>
 8006086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006088:	9a04      	ldr	r2, [sp, #16]
 800608a:	4650      	mov	r0, sl
 800608c:	4659      	mov	r1, fp
 800608e:	b1c3      	cbz	r3, 80060c2 <_strtod_l+0x93a>
 8006090:	f7ff fb5e 	bl	8005750 <sulp>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	ec51 0b18 	vmov	r0, r1, d8
 800609c:	f7fa f8fe 	bl	800029c <__adddf3>
 80060a0:	4682      	mov	sl, r0
 80060a2:	468b      	mov	fp, r1
 80060a4:	e7df      	b.n	8006066 <_strtod_l+0x8de>
 80060a6:	4013      	ands	r3, r2
 80060a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80060ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80060b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80060b4:	f04f 3aff 	mov.w	sl, #4294967295
 80060b8:	e7d5      	b.n	8006066 <_strtod_l+0x8de>
 80060ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060bc:	ea13 0f0a 	tst.w	r3, sl
 80060c0:	e7e0      	b.n	8006084 <_strtod_l+0x8fc>
 80060c2:	f7ff fb45 	bl	8005750 <sulp>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	ec51 0b18 	vmov	r0, r1, d8
 80060ce:	f7fa f8e3 	bl	8000298 <__aeabi_dsub>
 80060d2:	2200      	movs	r2, #0
 80060d4:	2300      	movs	r3, #0
 80060d6:	4682      	mov	sl, r0
 80060d8:	468b      	mov	fp, r1
 80060da:	f7fa fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d0c1      	beq.n	8006066 <_strtod_l+0x8de>
 80060e2:	e611      	b.n	8005d08 <_strtod_l+0x580>
 80060e4:	fffffc02 	.word	0xfffffc02
 80060e8:	7ff00000 	.word	0x7ff00000
 80060ec:	39500000 	.word	0x39500000
 80060f0:	000fffff 	.word	0x000fffff
 80060f4:	7fefffff 	.word	0x7fefffff
 80060f8:	0800a3c8 	.word	0x0800a3c8
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	f002 f832 	bl	8008168 <__ratio>
 8006104:	ec59 8b10 	vmov	r8, r9, d0
 8006108:	ee10 0a10 	vmov	r0, s0
 800610c:	2200      	movs	r2, #0
 800610e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006112:	4649      	mov	r1, r9
 8006114:	f7fa fcf4 	bl	8000b00 <__aeabi_dcmple>
 8006118:	2800      	cmp	r0, #0
 800611a:	d07a      	beq.n	8006212 <_strtod_l+0xa8a>
 800611c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04a      	beq.n	80061b8 <_strtod_l+0xa30>
 8006122:	4b95      	ldr	r3, [pc, #596]	; (8006378 <_strtod_l+0xbf0>)
 8006124:	2200      	movs	r2, #0
 8006126:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800612a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006378 <_strtod_l+0xbf0>
 800612e:	f04f 0800 	mov.w	r8, #0
 8006132:	4b92      	ldr	r3, [pc, #584]	; (800637c <_strtod_l+0xbf4>)
 8006134:	403b      	ands	r3, r7
 8006136:	930d      	str	r3, [sp, #52]	; 0x34
 8006138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800613a:	4b91      	ldr	r3, [pc, #580]	; (8006380 <_strtod_l+0xbf8>)
 800613c:	429a      	cmp	r2, r3
 800613e:	f040 80b0 	bne.w	80062a2 <_strtod_l+0xb1a>
 8006142:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006146:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800614a:	ec4b ab10 	vmov	d0, sl, fp
 800614e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006152:	f001 ff31 	bl	8007fb8 <__ulp>
 8006156:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800615a:	ec53 2b10 	vmov	r2, r3, d0
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	f7fa f899 	bl	800029c <__adddf3>
 800616a:	460b      	mov	r3, r1
 800616c:	4983      	ldr	r1, [pc, #524]	; (800637c <_strtod_l+0xbf4>)
 800616e:	4a85      	ldr	r2, [pc, #532]	; (8006384 <_strtod_l+0xbfc>)
 8006170:	4019      	ands	r1, r3
 8006172:	4291      	cmp	r1, r2
 8006174:	4682      	mov	sl, r0
 8006176:	d960      	bls.n	800623a <_strtod_l+0xab2>
 8006178:	ee18 3a90 	vmov	r3, s17
 800617c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006180:	4293      	cmp	r3, r2
 8006182:	d104      	bne.n	800618e <_strtod_l+0xa06>
 8006184:	ee18 3a10 	vmov	r3, s16
 8006188:	3301      	adds	r3, #1
 800618a:	f43f ad45 	beq.w	8005c18 <_strtod_l+0x490>
 800618e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006390 <_strtod_l+0xc08>
 8006192:	f04f 3aff 	mov.w	sl, #4294967295
 8006196:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006198:	4620      	mov	r0, r4
 800619a:	f001 fbdb 	bl	8007954 <_Bfree>
 800619e:	9905      	ldr	r1, [sp, #20]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f001 fbd7 	bl	8007954 <_Bfree>
 80061a6:	4631      	mov	r1, r6
 80061a8:	4620      	mov	r0, r4
 80061aa:	f001 fbd3 	bl	8007954 <_Bfree>
 80061ae:	4629      	mov	r1, r5
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 fbcf 	bl	8007954 <_Bfree>
 80061b6:	e61a      	b.n	8005dee <_strtod_l+0x666>
 80061b8:	f1ba 0f00 	cmp.w	sl, #0
 80061bc:	d11b      	bne.n	80061f6 <_strtod_l+0xa6e>
 80061be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061c2:	b9f3      	cbnz	r3, 8006202 <_strtod_l+0xa7a>
 80061c4:	4b6c      	ldr	r3, [pc, #432]	; (8006378 <_strtod_l+0xbf0>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	f7fa fc8e 	bl	8000aec <__aeabi_dcmplt>
 80061d0:	b9d0      	cbnz	r0, 8006208 <_strtod_l+0xa80>
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	4b6c      	ldr	r3, [pc, #432]	; (8006388 <_strtod_l+0xc00>)
 80061d8:	2200      	movs	r2, #0
 80061da:	f7fa fa15 	bl	8000608 <__aeabi_dmul>
 80061de:	4680      	mov	r8, r0
 80061e0:	4689      	mov	r9, r1
 80061e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80061e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80061ea:	9315      	str	r3, [sp, #84]	; 0x54
 80061ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80061f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061f4:	e79d      	b.n	8006132 <_strtod_l+0x9aa>
 80061f6:	f1ba 0f01 	cmp.w	sl, #1
 80061fa:	d102      	bne.n	8006202 <_strtod_l+0xa7a>
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f43f ad83 	beq.w	8005d08 <_strtod_l+0x580>
 8006202:	4b62      	ldr	r3, [pc, #392]	; (800638c <_strtod_l+0xc04>)
 8006204:	2200      	movs	r2, #0
 8006206:	e78e      	b.n	8006126 <_strtod_l+0x99e>
 8006208:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006388 <_strtod_l+0xc00>
 800620c:	f04f 0800 	mov.w	r8, #0
 8006210:	e7e7      	b.n	80061e2 <_strtod_l+0xa5a>
 8006212:	4b5d      	ldr	r3, [pc, #372]	; (8006388 <_strtod_l+0xc00>)
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	2200      	movs	r2, #0
 800621a:	f7fa f9f5 	bl	8000608 <__aeabi_dmul>
 800621e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006220:	4680      	mov	r8, r0
 8006222:	4689      	mov	r9, r1
 8006224:	b933      	cbnz	r3, 8006234 <_strtod_l+0xaac>
 8006226:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800622a:	900e      	str	r0, [sp, #56]	; 0x38
 800622c:	930f      	str	r3, [sp, #60]	; 0x3c
 800622e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006232:	e7dd      	b.n	80061f0 <_strtod_l+0xa68>
 8006234:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006238:	e7f9      	b.n	800622e <_strtod_l+0xaa6>
 800623a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1a8      	bne.n	8006196 <_strtod_l+0xa0e>
 8006244:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800624a:	0d1b      	lsrs	r3, r3, #20
 800624c:	051b      	lsls	r3, r3, #20
 800624e:	429a      	cmp	r2, r3
 8006250:	d1a1      	bne.n	8006196 <_strtod_l+0xa0e>
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7fa fd1f 	bl	8000c98 <__aeabi_d2lz>
 800625a:	f7fa f9a7 	bl	80005ac <__aeabi_l2d>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa f817 	bl	8000298 <__aeabi_dsub>
 800626a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800626c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006270:	ea43 030a 	orr.w	r3, r3, sl
 8006274:	4313      	orrs	r3, r2
 8006276:	4680      	mov	r8, r0
 8006278:	4689      	mov	r9, r1
 800627a:	d055      	beq.n	8006328 <_strtod_l+0xba0>
 800627c:	a336      	add	r3, pc, #216	; (adr r3, 8006358 <_strtod_l+0xbd0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa fc33 	bl	8000aec <__aeabi_dcmplt>
 8006286:	2800      	cmp	r0, #0
 8006288:	f47f acd0 	bne.w	8005c2c <_strtod_l+0x4a4>
 800628c:	a334      	add	r3, pc, #208	; (adr r3, 8006360 <_strtod_l+0xbd8>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	4640      	mov	r0, r8
 8006294:	4649      	mov	r1, r9
 8006296:	f7fa fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	f43f af7b 	beq.w	8006196 <_strtod_l+0xa0e>
 80062a0:	e4c4      	b.n	8005c2c <_strtod_l+0x4a4>
 80062a2:	9b04      	ldr	r3, [sp, #16]
 80062a4:	b333      	cbz	r3, 80062f4 <_strtod_l+0xb6c>
 80062a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062ac:	d822      	bhi.n	80062f4 <_strtod_l+0xb6c>
 80062ae:	a32e      	add	r3, pc, #184	; (adr r3, 8006368 <_strtod_l+0xbe0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa fc22 	bl	8000b00 <__aeabi_dcmple>
 80062bc:	b1a0      	cbz	r0, 80062e8 <_strtod_l+0xb60>
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	f7fa fc79 	bl	8000bb8 <__aeabi_d2uiz>
 80062c6:	2801      	cmp	r0, #1
 80062c8:	bf38      	it	cc
 80062ca:	2001      	movcc	r0, #1
 80062cc:	f7fa f922 	bl	8000514 <__aeabi_ui2d>
 80062d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	bb23      	cbnz	r3, 8006322 <_strtod_l+0xb9a>
 80062d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062dc:	9010      	str	r0, [sp, #64]	; 0x40
 80062de:	9311      	str	r3, [sp, #68]	; 0x44
 80062e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062f8:	eeb0 0a48 	vmov.f32	s0, s16
 80062fc:	eef0 0a68 	vmov.f32	s1, s17
 8006300:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006304:	f001 fe58 	bl	8007fb8 <__ulp>
 8006308:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800630c:	ec53 2b10 	vmov	r2, r3, d0
 8006310:	f7fa f97a 	bl	8000608 <__aeabi_dmul>
 8006314:	ec53 2b18 	vmov	r2, r3, d8
 8006318:	f7f9 ffc0 	bl	800029c <__adddf3>
 800631c:	4682      	mov	sl, r0
 800631e:	468b      	mov	fp, r1
 8006320:	e78d      	b.n	800623e <_strtod_l+0xab6>
 8006322:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006326:	e7db      	b.n	80062e0 <_strtod_l+0xb58>
 8006328:	a311      	add	r3, pc, #68	; (adr r3, 8006370 <_strtod_l+0xbe8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7fa fbdd 	bl	8000aec <__aeabi_dcmplt>
 8006332:	e7b2      	b.n	800629a <_strtod_l+0xb12>
 8006334:	2300      	movs	r3, #0
 8006336:	930a      	str	r3, [sp, #40]	; 0x28
 8006338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800633a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	f7ff ba6b 	b.w	8005818 <_strtod_l+0x90>
 8006342:	2a65      	cmp	r2, #101	; 0x65
 8006344:	f43f ab5f 	beq.w	8005a06 <_strtod_l+0x27e>
 8006348:	2a45      	cmp	r2, #69	; 0x45
 800634a:	f43f ab5c 	beq.w	8005a06 <_strtod_l+0x27e>
 800634e:	2301      	movs	r3, #1
 8006350:	f7ff bb94 	b.w	8005a7c <_strtod_l+0x2f4>
 8006354:	f3af 8000 	nop.w
 8006358:	94a03595 	.word	0x94a03595
 800635c:	3fdfffff 	.word	0x3fdfffff
 8006360:	35afe535 	.word	0x35afe535
 8006364:	3fe00000 	.word	0x3fe00000
 8006368:	ffc00000 	.word	0xffc00000
 800636c:	41dfffff 	.word	0x41dfffff
 8006370:	94a03595 	.word	0x94a03595
 8006374:	3fcfffff 	.word	0x3fcfffff
 8006378:	3ff00000 	.word	0x3ff00000
 800637c:	7ff00000 	.word	0x7ff00000
 8006380:	7fe00000 	.word	0x7fe00000
 8006384:	7c9fffff 	.word	0x7c9fffff
 8006388:	3fe00000 	.word	0x3fe00000
 800638c:	bff00000 	.word	0xbff00000
 8006390:	7fefffff 	.word	0x7fefffff

08006394 <_strtod_r>:
 8006394:	4b01      	ldr	r3, [pc, #4]	; (800639c <_strtod_r+0x8>)
 8006396:	f7ff b9f7 	b.w	8005788 <_strtod_l>
 800639a:	bf00      	nop
 800639c:	2000009c 	.word	0x2000009c

080063a0 <_strtol_l.constprop.0>:
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a6:	d001      	beq.n	80063ac <_strtol_l.constprop.0+0xc>
 80063a8:	2b24      	cmp	r3, #36	; 0x24
 80063aa:	d906      	bls.n	80063ba <_strtol_l.constprop.0+0x1a>
 80063ac:	f7fe fafe 	bl	80049ac <__errno>
 80063b0:	2316      	movs	r3, #22
 80063b2:	6003      	str	r3, [r0, #0]
 80063b4:	2000      	movs	r0, #0
 80063b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064a0 <_strtol_l.constprop.0+0x100>
 80063be:	460d      	mov	r5, r1
 80063c0:	462e      	mov	r6, r5
 80063c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80063ca:	f017 0708 	ands.w	r7, r7, #8
 80063ce:	d1f7      	bne.n	80063c0 <_strtol_l.constprop.0+0x20>
 80063d0:	2c2d      	cmp	r4, #45	; 0x2d
 80063d2:	d132      	bne.n	800643a <_strtol_l.constprop.0+0x9a>
 80063d4:	782c      	ldrb	r4, [r5, #0]
 80063d6:	2701      	movs	r7, #1
 80063d8:	1cb5      	adds	r5, r6, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d05b      	beq.n	8006496 <_strtol_l.constprop.0+0xf6>
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d109      	bne.n	80063f6 <_strtol_l.constprop.0+0x56>
 80063e2:	2c30      	cmp	r4, #48	; 0x30
 80063e4:	d107      	bne.n	80063f6 <_strtol_l.constprop.0+0x56>
 80063e6:	782c      	ldrb	r4, [r5, #0]
 80063e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80063ec:	2c58      	cmp	r4, #88	; 0x58
 80063ee:	d14d      	bne.n	800648c <_strtol_l.constprop.0+0xec>
 80063f0:	786c      	ldrb	r4, [r5, #1]
 80063f2:	2310      	movs	r3, #16
 80063f4:	3502      	adds	r5, #2
 80063f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80063fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	fbb8 f9f3 	udiv	r9, r8, r3
 8006406:	4666      	mov	r6, ip
 8006408:	fb03 8a19 	mls	sl, r3, r9, r8
 800640c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006410:	f1be 0f09 	cmp.w	lr, #9
 8006414:	d816      	bhi.n	8006444 <_strtol_l.constprop.0+0xa4>
 8006416:	4674      	mov	r4, lr
 8006418:	42a3      	cmp	r3, r4
 800641a:	dd24      	ble.n	8006466 <_strtol_l.constprop.0+0xc6>
 800641c:	f1bc 0f00 	cmp.w	ip, #0
 8006420:	db1e      	blt.n	8006460 <_strtol_l.constprop.0+0xc0>
 8006422:	45b1      	cmp	r9, r6
 8006424:	d31c      	bcc.n	8006460 <_strtol_l.constprop.0+0xc0>
 8006426:	d101      	bne.n	800642c <_strtol_l.constprop.0+0x8c>
 8006428:	45a2      	cmp	sl, r4
 800642a:	db19      	blt.n	8006460 <_strtol_l.constprop.0+0xc0>
 800642c:	fb06 4603 	mla	r6, r6, r3, r4
 8006430:	f04f 0c01 	mov.w	ip, #1
 8006434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006438:	e7e8      	b.n	800640c <_strtol_l.constprop.0+0x6c>
 800643a:	2c2b      	cmp	r4, #43	; 0x2b
 800643c:	bf04      	itt	eq
 800643e:	782c      	ldrbeq	r4, [r5, #0]
 8006440:	1cb5      	addeq	r5, r6, #2
 8006442:	e7ca      	b.n	80063da <_strtol_l.constprop.0+0x3a>
 8006444:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006448:	f1be 0f19 	cmp.w	lr, #25
 800644c:	d801      	bhi.n	8006452 <_strtol_l.constprop.0+0xb2>
 800644e:	3c37      	subs	r4, #55	; 0x37
 8006450:	e7e2      	b.n	8006418 <_strtol_l.constprop.0+0x78>
 8006452:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006456:	f1be 0f19 	cmp.w	lr, #25
 800645a:	d804      	bhi.n	8006466 <_strtol_l.constprop.0+0xc6>
 800645c:	3c57      	subs	r4, #87	; 0x57
 800645e:	e7db      	b.n	8006418 <_strtol_l.constprop.0+0x78>
 8006460:	f04f 3cff 	mov.w	ip, #4294967295
 8006464:	e7e6      	b.n	8006434 <_strtol_l.constprop.0+0x94>
 8006466:	f1bc 0f00 	cmp.w	ip, #0
 800646a:	da05      	bge.n	8006478 <_strtol_l.constprop.0+0xd8>
 800646c:	2322      	movs	r3, #34	; 0x22
 800646e:	6003      	str	r3, [r0, #0]
 8006470:	4646      	mov	r6, r8
 8006472:	b942      	cbnz	r2, 8006486 <_strtol_l.constprop.0+0xe6>
 8006474:	4630      	mov	r0, r6
 8006476:	e79e      	b.n	80063b6 <_strtol_l.constprop.0+0x16>
 8006478:	b107      	cbz	r7, 800647c <_strtol_l.constprop.0+0xdc>
 800647a:	4276      	negs	r6, r6
 800647c:	2a00      	cmp	r2, #0
 800647e:	d0f9      	beq.n	8006474 <_strtol_l.constprop.0+0xd4>
 8006480:	f1bc 0f00 	cmp.w	ip, #0
 8006484:	d000      	beq.n	8006488 <_strtol_l.constprop.0+0xe8>
 8006486:	1e69      	subs	r1, r5, #1
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	e7f3      	b.n	8006474 <_strtol_l.constprop.0+0xd4>
 800648c:	2430      	movs	r4, #48	; 0x30
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1b1      	bne.n	80063f6 <_strtol_l.constprop.0+0x56>
 8006492:	2308      	movs	r3, #8
 8006494:	e7af      	b.n	80063f6 <_strtol_l.constprop.0+0x56>
 8006496:	2c30      	cmp	r4, #48	; 0x30
 8006498:	d0a5      	beq.n	80063e6 <_strtol_l.constprop.0+0x46>
 800649a:	230a      	movs	r3, #10
 800649c:	e7ab      	b.n	80063f6 <_strtol_l.constprop.0+0x56>
 800649e:	bf00      	nop
 80064a0:	0800a3f1 	.word	0x0800a3f1

080064a4 <_strtol_r>:
 80064a4:	f7ff bf7c 	b.w	80063a0 <_strtol_l.constprop.0>

080064a8 <quorem>:
 80064a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	6903      	ldr	r3, [r0, #16]
 80064ae:	690c      	ldr	r4, [r1, #16]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	4607      	mov	r7, r0
 80064b4:	f2c0 8081 	blt.w	80065ba <quorem+0x112>
 80064b8:	3c01      	subs	r4, #1
 80064ba:	f101 0814 	add.w	r8, r1, #20
 80064be:	f100 0514 	add.w	r5, r0, #20
 80064c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d0:	3301      	adds	r3, #1
 80064d2:	429a      	cmp	r2, r3
 80064d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80064e0:	d331      	bcc.n	8006546 <quorem+0x9e>
 80064e2:	f04f 0e00 	mov.w	lr, #0
 80064e6:	4640      	mov	r0, r8
 80064e8:	46ac      	mov	ip, r5
 80064ea:	46f2      	mov	sl, lr
 80064ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80064f0:	b293      	uxth	r3, r2
 80064f2:	fb06 e303 	mla	r3, r6, r3, lr
 80064f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006500:	f8dc a000 	ldr.w	sl, [ip]
 8006504:	0c12      	lsrs	r2, r2, #16
 8006506:	fa13 f38a 	uxtah	r3, r3, sl
 800650a:	fb06 e202 	mla	r2, r6, r2, lr
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006516:	b292      	uxth	r2, r2
 8006518:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006520:	f8bd 3000 	ldrh.w	r3, [sp]
 8006524:	4581      	cmp	r9, r0
 8006526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652a:	f84c 3b04 	str.w	r3, [ip], #4
 800652e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006532:	d2db      	bcs.n	80064ec <quorem+0x44>
 8006534:	f855 300b 	ldr.w	r3, [r5, fp]
 8006538:	b92b      	cbnz	r3, 8006546 <quorem+0x9e>
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	3b04      	subs	r3, #4
 800653e:	429d      	cmp	r5, r3
 8006540:	461a      	mov	r2, r3
 8006542:	d32e      	bcc.n	80065a2 <quorem+0xfa>
 8006544:	613c      	str	r4, [r7, #16]
 8006546:	4638      	mov	r0, r7
 8006548:	f001 fc90 	bl	8007e6c <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	db24      	blt.n	800659a <quorem+0xf2>
 8006550:	3601      	adds	r6, #1
 8006552:	4628      	mov	r0, r5
 8006554:	f04f 0c00 	mov.w	ip, #0
 8006558:	f858 2b04 	ldr.w	r2, [r8], #4
 800655c:	f8d0 e000 	ldr.w	lr, [r0]
 8006560:	b293      	uxth	r3, r2
 8006562:	ebac 0303 	sub.w	r3, ip, r3
 8006566:	0c12      	lsrs	r2, r2, #16
 8006568:	fa13 f38e 	uxtah	r3, r3, lr
 800656c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657a:	45c1      	cmp	r9, r8
 800657c:	f840 3b04 	str.w	r3, [r0], #4
 8006580:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006584:	d2e8      	bcs.n	8006558 <quorem+0xb0>
 8006586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800658e:	b922      	cbnz	r2, 800659a <quorem+0xf2>
 8006590:	3b04      	subs	r3, #4
 8006592:	429d      	cmp	r5, r3
 8006594:	461a      	mov	r2, r3
 8006596:	d30a      	bcc.n	80065ae <quorem+0x106>
 8006598:	613c      	str	r4, [r7, #16]
 800659a:	4630      	mov	r0, r6
 800659c:	b003      	add	sp, #12
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	3b04      	subs	r3, #4
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	d1cc      	bne.n	8006544 <quorem+0x9c>
 80065aa:	3c01      	subs	r4, #1
 80065ac:	e7c7      	b.n	800653e <quorem+0x96>
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	d1f0      	bne.n	8006598 <quorem+0xf0>
 80065b6:	3c01      	subs	r4, #1
 80065b8:	e7eb      	b.n	8006592 <quorem+0xea>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e7ee      	b.n	800659c <quorem+0xf4>
	...

080065c0 <_dtoa_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	ed2d 8b04 	vpush	{d8-d9}
 80065c8:	ec57 6b10 	vmov	r6, r7, d0
 80065cc:	b093      	sub	sp, #76	; 0x4c
 80065ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065d4:	9106      	str	r1, [sp, #24]
 80065d6:	ee10 aa10 	vmov	sl, s0
 80065da:	4604      	mov	r4, r0
 80065dc:	9209      	str	r2, [sp, #36]	; 0x24
 80065de:	930c      	str	r3, [sp, #48]	; 0x30
 80065e0:	46bb      	mov	fp, r7
 80065e2:	b975      	cbnz	r5, 8006602 <_dtoa_r+0x42>
 80065e4:	2010      	movs	r0, #16
 80065e6:	f001 f94d 	bl	8007884 <malloc>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6260      	str	r0, [r4, #36]	; 0x24
 80065ee:	b920      	cbnz	r0, 80065fa <_dtoa_r+0x3a>
 80065f0:	4ba7      	ldr	r3, [pc, #668]	; (8006890 <_dtoa_r+0x2d0>)
 80065f2:	21ea      	movs	r1, #234	; 0xea
 80065f4:	48a7      	ldr	r0, [pc, #668]	; (8006894 <_dtoa_r+0x2d4>)
 80065f6:	f002 f8bd 	bl	8008774 <__assert_func>
 80065fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065fe:	6005      	str	r5, [r0, #0]
 8006600:	60c5      	str	r5, [r0, #12]
 8006602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006604:	6819      	ldr	r1, [r3, #0]
 8006606:	b151      	cbz	r1, 800661e <_dtoa_r+0x5e>
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	604a      	str	r2, [r1, #4]
 800660c:	2301      	movs	r3, #1
 800660e:	4093      	lsls	r3, r2
 8006610:	608b      	str	r3, [r1, #8]
 8006612:	4620      	mov	r0, r4
 8006614:	f001 f99e 	bl	8007954 <_Bfree>
 8006618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	1e3b      	subs	r3, r7, #0
 8006620:	bfaa      	itet	ge
 8006622:	2300      	movge	r3, #0
 8006624:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006628:	f8c8 3000 	strge.w	r3, [r8]
 800662c:	4b9a      	ldr	r3, [pc, #616]	; (8006898 <_dtoa_r+0x2d8>)
 800662e:	bfbc      	itt	lt
 8006630:	2201      	movlt	r2, #1
 8006632:	f8c8 2000 	strlt.w	r2, [r8]
 8006636:	ea33 030b 	bics.w	r3, r3, fp
 800663a:	d11b      	bne.n	8006674 <_dtoa_r+0xb4>
 800663c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800663e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006648:	4333      	orrs	r3, r6
 800664a:	f000 8592 	beq.w	8007172 <_dtoa_r+0xbb2>
 800664e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006650:	b963      	cbnz	r3, 800666c <_dtoa_r+0xac>
 8006652:	4b92      	ldr	r3, [pc, #584]	; (800689c <_dtoa_r+0x2dc>)
 8006654:	e022      	b.n	800669c <_dtoa_r+0xdc>
 8006656:	4b92      	ldr	r3, [pc, #584]	; (80068a0 <_dtoa_r+0x2e0>)
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	3308      	adds	r3, #8
 800665c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	b013      	add	sp, #76	; 0x4c
 8006664:	ecbd 8b04 	vpop	{d8-d9}
 8006668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666c:	4b8b      	ldr	r3, [pc, #556]	; (800689c <_dtoa_r+0x2dc>)
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	3303      	adds	r3, #3
 8006672:	e7f3      	b.n	800665c <_dtoa_r+0x9c>
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	4650      	mov	r0, sl
 800667a:	4659      	mov	r1, fp
 800667c:	f7fa fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006680:	ec4b ab19 	vmov	d9, sl, fp
 8006684:	4680      	mov	r8, r0
 8006686:	b158      	cbz	r0, 80066a0 <_dtoa_r+0xe0>
 8006688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800668a:	2301      	movs	r3, #1
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 856b 	beq.w	800716c <_dtoa_r+0xbac>
 8006696:	4883      	ldr	r0, [pc, #524]	; (80068a4 <_dtoa_r+0x2e4>)
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	1e43      	subs	r3, r0, #1
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	e7df      	b.n	8006660 <_dtoa_r+0xa0>
 80066a0:	ec4b ab10 	vmov	d0, sl, fp
 80066a4:	aa10      	add	r2, sp, #64	; 0x40
 80066a6:	a911      	add	r1, sp, #68	; 0x44
 80066a8:	4620      	mov	r0, r4
 80066aa:	f001 fd01 	bl	80080b0 <__d2b>
 80066ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80066b2:	ee08 0a10 	vmov	s16, r0
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	f000 8084 	beq.w	80067c4 <_dtoa_r+0x204>
 80066bc:	ee19 3a90 	vmov	r3, s19
 80066c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066c8:	4656      	mov	r6, sl
 80066ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066d6:	4b74      	ldr	r3, [pc, #464]	; (80068a8 <_dtoa_r+0x2e8>)
 80066d8:	2200      	movs	r2, #0
 80066da:	4630      	mov	r0, r6
 80066dc:	4639      	mov	r1, r7
 80066de:	f7f9 fddb 	bl	8000298 <__aeabi_dsub>
 80066e2:	a365      	add	r3, pc, #404	; (adr r3, 8006878 <_dtoa_r+0x2b8>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 ff8e 	bl	8000608 <__aeabi_dmul>
 80066ec:	a364      	add	r3, pc, #400	; (adr r3, 8006880 <_dtoa_r+0x2c0>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7f9 fdd3 	bl	800029c <__adddf3>
 80066f6:	4606      	mov	r6, r0
 80066f8:	4628      	mov	r0, r5
 80066fa:	460f      	mov	r7, r1
 80066fc:	f7f9 ff1a 	bl	8000534 <__aeabi_i2d>
 8006700:	a361      	add	r3, pc, #388	; (adr r3, 8006888 <_dtoa_r+0x2c8>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 ff7f 	bl	8000608 <__aeabi_dmul>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 fdc3 	bl	800029c <__adddf3>
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	f7fa fa25 	bl	8000b68 <__aeabi_d2iz>
 800671e:	2200      	movs	r2, #0
 8006720:	9000      	str	r0, [sp, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7fa f9e0 	bl	8000aec <__aeabi_dcmplt>
 800672c:	b150      	cbz	r0, 8006744 <_dtoa_r+0x184>
 800672e:	9800      	ldr	r0, [sp, #0]
 8006730:	f7f9 ff00 	bl	8000534 <__aeabi_i2d>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	f7fa f9ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800673c:	b910      	cbnz	r0, 8006744 <_dtoa_r+0x184>
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	3b01      	subs	r3, #1
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	9b00      	ldr	r3, [sp, #0]
 8006746:	2b16      	cmp	r3, #22
 8006748:	d85a      	bhi.n	8006800 <_dtoa_r+0x240>
 800674a:	9a00      	ldr	r2, [sp, #0]
 800674c:	4b57      	ldr	r3, [pc, #348]	; (80068ac <_dtoa_r+0x2ec>)
 800674e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	ec51 0b19 	vmov	r0, r1, d9
 800675a:	f7fa f9c7 	bl	8000aec <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d050      	beq.n	8006804 <_dtoa_r+0x244>
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	3b01      	subs	r3, #1
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	930b      	str	r3, [sp, #44]	; 0x2c
 800676c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800676e:	1b5d      	subs	r5, r3, r5
 8006770:	1e6b      	subs	r3, r5, #1
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	bf45      	ittet	mi
 8006776:	f1c5 0301 	rsbmi	r3, r5, #1
 800677a:	9304      	strmi	r3, [sp, #16]
 800677c:	2300      	movpl	r3, #0
 800677e:	2300      	movmi	r3, #0
 8006780:	bf4c      	ite	mi
 8006782:	9305      	strmi	r3, [sp, #20]
 8006784:	9304      	strpl	r3, [sp, #16]
 8006786:	9b00      	ldr	r3, [sp, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db3d      	blt.n	8006808 <_dtoa_r+0x248>
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	9a00      	ldr	r2, [sp, #0]
 8006790:	920a      	str	r2, [sp, #40]	; 0x28
 8006792:	4413      	add	r3, r2
 8006794:	9305      	str	r3, [sp, #20]
 8006796:	2300      	movs	r3, #0
 8006798:	9307      	str	r3, [sp, #28]
 800679a:	9b06      	ldr	r3, [sp, #24]
 800679c:	2b09      	cmp	r3, #9
 800679e:	f200 8089 	bhi.w	80068b4 <_dtoa_r+0x2f4>
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	bfc4      	itt	gt
 80067a6:	3b04      	subgt	r3, #4
 80067a8:	9306      	strgt	r3, [sp, #24]
 80067aa:	9b06      	ldr	r3, [sp, #24]
 80067ac:	f1a3 0302 	sub.w	r3, r3, #2
 80067b0:	bfcc      	ite	gt
 80067b2:	2500      	movgt	r5, #0
 80067b4:	2501      	movle	r5, #1
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	f200 8087 	bhi.w	80068ca <_dtoa_r+0x30a>
 80067bc:	e8df f003 	tbb	[pc, r3]
 80067c0:	59383a2d 	.word	0x59383a2d
 80067c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067c8:	441d      	add	r5, r3
 80067ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	bfc1      	itttt	gt
 80067d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067da:	fa0b f303 	lslgt.w	r3, fp, r3
 80067de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067e2:	bfda      	itte	le
 80067e4:	f1c3 0320 	rsble	r3, r3, #32
 80067e8:	fa06 f003 	lslle.w	r0, r6, r3
 80067ec:	4318      	orrgt	r0, r3
 80067ee:	f7f9 fe91 	bl	8000514 <__aeabi_ui2d>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4606      	mov	r6, r0
 80067f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067fa:	3d01      	subs	r5, #1
 80067fc:	930e      	str	r3, [sp, #56]	; 0x38
 80067fe:	e76a      	b.n	80066d6 <_dtoa_r+0x116>
 8006800:	2301      	movs	r3, #1
 8006802:	e7b2      	b.n	800676a <_dtoa_r+0x1aa>
 8006804:	900b      	str	r0, [sp, #44]	; 0x2c
 8006806:	e7b1      	b.n	800676c <_dtoa_r+0x1ac>
 8006808:	9b04      	ldr	r3, [sp, #16]
 800680a:	9a00      	ldr	r2, [sp, #0]
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	9304      	str	r3, [sp, #16]
 8006810:	4253      	negs	r3, r2
 8006812:	9307      	str	r3, [sp, #28]
 8006814:	2300      	movs	r3, #0
 8006816:	930a      	str	r3, [sp, #40]	; 0x28
 8006818:	e7bf      	b.n	800679a <_dtoa_r+0x1da>
 800681a:	2300      	movs	r3, #0
 800681c:	9308      	str	r3, [sp, #32]
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc55      	bgt.n	80068d0 <_dtoa_r+0x310>
 8006824:	2301      	movs	r3, #1
 8006826:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800682a:	461a      	mov	r2, r3
 800682c:	9209      	str	r2, [sp, #36]	; 0x24
 800682e:	e00c      	b.n	800684a <_dtoa_r+0x28a>
 8006830:	2301      	movs	r3, #1
 8006832:	e7f3      	b.n	800681c <_dtoa_r+0x25c>
 8006834:	2300      	movs	r3, #0
 8006836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	9b00      	ldr	r3, [sp, #0]
 800683c:	4413      	add	r3, r2
 800683e:	9302      	str	r3, [sp, #8]
 8006840:	3301      	adds	r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	bfb8      	it	lt
 8006848:	2301      	movlt	r3, #1
 800684a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800684c:	2200      	movs	r2, #0
 800684e:	6042      	str	r2, [r0, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	f102 0614 	add.w	r6, r2, #20
 8006856:	429e      	cmp	r6, r3
 8006858:	6841      	ldr	r1, [r0, #4]
 800685a:	d93d      	bls.n	80068d8 <_dtoa_r+0x318>
 800685c:	4620      	mov	r0, r4
 800685e:	f001 f839 	bl	80078d4 <_Balloc>
 8006862:	9001      	str	r0, [sp, #4]
 8006864:	2800      	cmp	r0, #0
 8006866:	d13b      	bne.n	80068e0 <_dtoa_r+0x320>
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <_dtoa_r+0x2f0>)
 800686a:	4602      	mov	r2, r0
 800686c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006870:	e6c0      	b.n	80065f4 <_dtoa_r+0x34>
 8006872:	2301      	movs	r3, #1
 8006874:	e7df      	b.n	8006836 <_dtoa_r+0x276>
 8006876:	bf00      	nop
 8006878:	636f4361 	.word	0x636f4361
 800687c:	3fd287a7 	.word	0x3fd287a7
 8006880:	8b60c8b3 	.word	0x8b60c8b3
 8006884:	3fc68a28 	.word	0x3fc68a28
 8006888:	509f79fb 	.word	0x509f79fb
 800688c:	3fd34413 	.word	0x3fd34413
 8006890:	0800a4fe 	.word	0x0800a4fe
 8006894:	0800a515 	.word	0x0800a515
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	0800a4fa 	.word	0x0800a4fa
 80068a0:	0800a4f1 	.word	0x0800a4f1
 80068a4:	0800a375 	.word	0x0800a375
 80068a8:	3ff80000 	.word	0x3ff80000
 80068ac:	0800a680 	.word	0x0800a680
 80068b0:	0800a570 	.word	0x0800a570
 80068b4:	2501      	movs	r5, #1
 80068b6:	2300      	movs	r3, #0
 80068b8:	9306      	str	r3, [sp, #24]
 80068ba:	9508      	str	r5, [sp, #32]
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2312      	movs	r3, #18
 80068c8:	e7b0      	b.n	800682c <_dtoa_r+0x26c>
 80068ca:	2301      	movs	r3, #1
 80068cc:	9308      	str	r3, [sp, #32]
 80068ce:	e7f5      	b.n	80068bc <_dtoa_r+0x2fc>
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068d6:	e7b8      	b.n	800684a <_dtoa_r+0x28a>
 80068d8:	3101      	adds	r1, #1
 80068da:	6041      	str	r1, [r0, #4]
 80068dc:	0052      	lsls	r2, r2, #1
 80068de:	e7b8      	b.n	8006852 <_dtoa_r+0x292>
 80068e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e2:	9a01      	ldr	r2, [sp, #4]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	2b0e      	cmp	r3, #14
 80068ea:	f200 809d 	bhi.w	8006a28 <_dtoa_r+0x468>
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	f000 809a 	beq.w	8006a28 <_dtoa_r+0x468>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd32      	ble.n	8006960 <_dtoa_r+0x3a0>
 80068fa:	4ab7      	ldr	r2, [pc, #732]	; (8006bd8 <_dtoa_r+0x618>)
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	05d8      	lsls	r0, r3, #23
 800690c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006910:	d516      	bpl.n	8006940 <_dtoa_r+0x380>
 8006912:	4bb2      	ldr	r3, [pc, #712]	; (8006bdc <_dtoa_r+0x61c>)
 8006914:	ec51 0b19 	vmov	r0, r1, d9
 8006918:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800691c:	f7f9 ff9e 	bl	800085c <__aeabi_ddiv>
 8006920:	f007 070f 	and.w	r7, r7, #15
 8006924:	4682      	mov	sl, r0
 8006926:	468b      	mov	fp, r1
 8006928:	2503      	movs	r5, #3
 800692a:	4eac      	ldr	r6, [pc, #688]	; (8006bdc <_dtoa_r+0x61c>)
 800692c:	b957      	cbnz	r7, 8006944 <_dtoa_r+0x384>
 800692e:	4642      	mov	r2, r8
 8006930:	464b      	mov	r3, r9
 8006932:	4650      	mov	r0, sl
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 ff91 	bl	800085c <__aeabi_ddiv>
 800693a:	4682      	mov	sl, r0
 800693c:	468b      	mov	fp, r1
 800693e:	e028      	b.n	8006992 <_dtoa_r+0x3d2>
 8006940:	2502      	movs	r5, #2
 8006942:	e7f2      	b.n	800692a <_dtoa_r+0x36a>
 8006944:	07f9      	lsls	r1, r7, #31
 8006946:	d508      	bpl.n	800695a <_dtoa_r+0x39a>
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006950:	f7f9 fe5a 	bl	8000608 <__aeabi_dmul>
 8006954:	3501      	adds	r5, #1
 8006956:	4680      	mov	r8, r0
 8006958:	4689      	mov	r9, r1
 800695a:	107f      	asrs	r7, r7, #1
 800695c:	3608      	adds	r6, #8
 800695e:	e7e5      	b.n	800692c <_dtoa_r+0x36c>
 8006960:	f000 809b 	beq.w	8006a9a <_dtoa_r+0x4da>
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	4f9d      	ldr	r7, [pc, #628]	; (8006bdc <_dtoa_r+0x61c>)
 8006968:	425e      	negs	r6, r3
 800696a:	4b9b      	ldr	r3, [pc, #620]	; (8006bd8 <_dtoa_r+0x618>)
 800696c:	f006 020f 	and.w	r2, r6, #15
 8006970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	ec51 0b19 	vmov	r0, r1, d9
 800697c:	f7f9 fe44 	bl	8000608 <__aeabi_dmul>
 8006980:	1136      	asrs	r6, r6, #4
 8006982:	4682      	mov	sl, r0
 8006984:	468b      	mov	fp, r1
 8006986:	2300      	movs	r3, #0
 8006988:	2502      	movs	r5, #2
 800698a:	2e00      	cmp	r6, #0
 800698c:	d17a      	bne.n	8006a84 <_dtoa_r+0x4c4>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1d3      	bne.n	800693a <_dtoa_r+0x37a>
 8006992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8082 	beq.w	8006a9e <_dtoa_r+0x4de>
 800699a:	4b91      	ldr	r3, [pc, #580]	; (8006be0 <_dtoa_r+0x620>)
 800699c:	2200      	movs	r2, #0
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7fa f8a3 	bl	8000aec <__aeabi_dcmplt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d079      	beq.n	8006a9e <_dtoa_r+0x4de>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d076      	beq.n	8006a9e <_dtoa_r+0x4de>
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd36      	ble.n	8006a24 <_dtoa_r+0x464>
 80069b6:	9b00      	ldr	r3, [sp, #0]
 80069b8:	4650      	mov	r0, sl
 80069ba:	4659      	mov	r1, fp
 80069bc:	1e5f      	subs	r7, r3, #1
 80069be:	2200      	movs	r2, #0
 80069c0:	4b88      	ldr	r3, [pc, #544]	; (8006be4 <_dtoa_r+0x624>)
 80069c2:	f7f9 fe21 	bl	8000608 <__aeabi_dmul>
 80069c6:	9e02      	ldr	r6, [sp, #8]
 80069c8:	4682      	mov	sl, r0
 80069ca:	468b      	mov	fp, r1
 80069cc:	3501      	adds	r5, #1
 80069ce:	4628      	mov	r0, r5
 80069d0:	f7f9 fdb0 	bl	8000534 <__aeabi_i2d>
 80069d4:	4652      	mov	r2, sl
 80069d6:	465b      	mov	r3, fp
 80069d8:	f7f9 fe16 	bl	8000608 <__aeabi_dmul>
 80069dc:	4b82      	ldr	r3, [pc, #520]	; (8006be8 <_dtoa_r+0x628>)
 80069de:	2200      	movs	r2, #0
 80069e0:	f7f9 fc5c 	bl	800029c <__adddf3>
 80069e4:	46d0      	mov	r8, sl
 80069e6:	46d9      	mov	r9, fp
 80069e8:	4682      	mov	sl, r0
 80069ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d158      	bne.n	8006aa4 <_dtoa_r+0x4e4>
 80069f2:	4b7e      	ldr	r3, [pc, #504]	; (8006bec <_dtoa_r+0x62c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7f9 fc4d 	bl	8000298 <__aeabi_dsub>
 80069fe:	4652      	mov	r2, sl
 8006a00:	465b      	mov	r3, fp
 8006a02:	4680      	mov	r8, r0
 8006a04:	4689      	mov	r9, r1
 8006a06:	f7fa f88f 	bl	8000b28 <__aeabi_dcmpgt>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	f040 8295 	bne.w	8006f3a <_dtoa_r+0x97a>
 8006a10:	4652      	mov	r2, sl
 8006a12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a16:	4640      	mov	r0, r8
 8006a18:	4649      	mov	r1, r9
 8006a1a:	f7fa f867 	bl	8000aec <__aeabi_dcmplt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f040 8289 	bne.w	8006f36 <_dtoa_r+0x976>
 8006a24:	ec5b ab19 	vmov	sl, fp, d9
 8006a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f2c0 8148 	blt.w	8006cc0 <_dtoa_r+0x700>
 8006a30:	9a00      	ldr	r2, [sp, #0]
 8006a32:	2a0e      	cmp	r2, #14
 8006a34:	f300 8144 	bgt.w	8006cc0 <_dtoa_r+0x700>
 8006a38:	4b67      	ldr	r3, [pc, #412]	; (8006bd8 <_dtoa_r+0x618>)
 8006a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f280 80d5 	bge.w	8006bf4 <_dtoa_r+0x634>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f300 80d1 	bgt.w	8006bf4 <_dtoa_r+0x634>
 8006a52:	f040 826f 	bne.w	8006f34 <_dtoa_r+0x974>
 8006a56:	4b65      	ldr	r3, [pc, #404]	; (8006bec <_dtoa_r+0x62c>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7f9 fdd3 	bl	8000608 <__aeabi_dmul>
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	f7fa f855 	bl	8000b14 <__aeabi_dcmpge>
 8006a6a:	9e03      	ldr	r6, [sp, #12]
 8006a6c:	4637      	mov	r7, r6
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f040 8245 	bne.w	8006efe <_dtoa_r+0x93e>
 8006a74:	9d01      	ldr	r5, [sp, #4]
 8006a76:	2331      	movs	r3, #49	; 0x31
 8006a78:	f805 3b01 	strb.w	r3, [r5], #1
 8006a7c:	9b00      	ldr	r3, [sp, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	e240      	b.n	8006f06 <_dtoa_r+0x946>
 8006a84:	07f2      	lsls	r2, r6, #31
 8006a86:	d505      	bpl.n	8006a94 <_dtoa_r+0x4d4>
 8006a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a8c:	f7f9 fdbc 	bl	8000608 <__aeabi_dmul>
 8006a90:	3501      	adds	r5, #1
 8006a92:	2301      	movs	r3, #1
 8006a94:	1076      	asrs	r6, r6, #1
 8006a96:	3708      	adds	r7, #8
 8006a98:	e777      	b.n	800698a <_dtoa_r+0x3ca>
 8006a9a:	2502      	movs	r5, #2
 8006a9c:	e779      	b.n	8006992 <_dtoa_r+0x3d2>
 8006a9e:	9f00      	ldr	r7, [sp, #0]
 8006aa0:	9e03      	ldr	r6, [sp, #12]
 8006aa2:	e794      	b.n	80069ce <_dtoa_r+0x40e>
 8006aa4:	9901      	ldr	r1, [sp, #4]
 8006aa6:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <_dtoa_r+0x618>)
 8006aa8:	4431      	add	r1, r6
 8006aaa:	910d      	str	r1, [sp, #52]	; 0x34
 8006aac:	9908      	ldr	r1, [sp, #32]
 8006aae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	d043      	beq.n	8006b42 <_dtoa_r+0x582>
 8006aba:	494d      	ldr	r1, [pc, #308]	; (8006bf0 <_dtoa_r+0x630>)
 8006abc:	2000      	movs	r0, #0
 8006abe:	f7f9 fecd 	bl	800085c <__aeabi_ddiv>
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	465b      	mov	r3, fp
 8006ac6:	f7f9 fbe7 	bl	8000298 <__aeabi_dsub>
 8006aca:	9d01      	ldr	r5, [sp, #4]
 8006acc:	4682      	mov	sl, r0
 8006ace:	468b      	mov	fp, r1
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	f7fa f848 	bl	8000b68 <__aeabi_d2iz>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	f7f9 fd2b 	bl	8000534 <__aeabi_i2d>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	f7f9 fbd7 	bl	8000298 <__aeabi_dsub>
 8006aea:	3630      	adds	r6, #48	; 0x30
 8006aec:	f805 6b01 	strb.w	r6, [r5], #1
 8006af0:	4652      	mov	r2, sl
 8006af2:	465b      	mov	r3, fp
 8006af4:	4680      	mov	r8, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	f7f9 fff8 	bl	8000aec <__aeabi_dcmplt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d163      	bne.n	8006bc8 <_dtoa_r+0x608>
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	4936      	ldr	r1, [pc, #216]	; (8006be0 <_dtoa_r+0x620>)
 8006b06:	2000      	movs	r0, #0
 8006b08:	f7f9 fbc6 	bl	8000298 <__aeabi_dsub>
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	465b      	mov	r3, fp
 8006b10:	f7f9 ffec 	bl	8000aec <__aeabi_dcmplt>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f040 80b5 	bne.w	8006c84 <_dtoa_r+0x6c4>
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	d081      	beq.n	8006a24 <_dtoa_r+0x464>
 8006b20:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <_dtoa_r+0x624>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	4650      	mov	r0, sl
 8006b26:	4659      	mov	r1, fp
 8006b28:	f7f9 fd6e 	bl	8000608 <__aeabi_dmul>
 8006b2c:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <_dtoa_r+0x624>)
 8006b2e:	4682      	mov	sl, r0
 8006b30:	468b      	mov	fp, r1
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	2200      	movs	r2, #0
 8006b38:	f7f9 fd66 	bl	8000608 <__aeabi_dmul>
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4689      	mov	r9, r1
 8006b40:	e7c6      	b.n	8006ad0 <_dtoa_r+0x510>
 8006b42:	4650      	mov	r0, sl
 8006b44:	4659      	mov	r1, fp
 8006b46:	f7f9 fd5f 	bl	8000608 <__aeabi_dmul>
 8006b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b4c:	9d01      	ldr	r5, [sp, #4]
 8006b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b50:	4682      	mov	sl, r0
 8006b52:	468b      	mov	fp, r1
 8006b54:	4649      	mov	r1, r9
 8006b56:	4640      	mov	r0, r8
 8006b58:	f7fa f806 	bl	8000b68 <__aeabi_d2iz>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f7f9 fce9 	bl	8000534 <__aeabi_i2d>
 8006b62:	3630      	adds	r6, #48	; 0x30
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fb94 	bl	8000298 <__aeabi_dsub>
 8006b70:	f805 6b01 	strb.w	r6, [r5], #1
 8006b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b76:	429d      	cmp	r5, r3
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	d124      	bne.n	8006bcc <_dtoa_r+0x60c>
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <_dtoa_r+0x630>)
 8006b84:	4650      	mov	r0, sl
 8006b86:	4659      	mov	r1, fp
 8006b88:	f7f9 fb88 	bl	800029c <__adddf3>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d173      	bne.n	8006c84 <_dtoa_r+0x6c4>
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	4913      	ldr	r1, [pc, #76]	; (8006bf0 <_dtoa_r+0x630>)
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f7f9 fb78 	bl	8000298 <__aeabi_dsub>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f43f af35 	beq.w	8006a24 <_dtoa_r+0x464>
 8006bba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bbc:	1e6b      	subs	r3, r5, #1
 8006bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bc4:	2b30      	cmp	r3, #48	; 0x30
 8006bc6:	d0f8      	beq.n	8006bba <_dtoa_r+0x5fa>
 8006bc8:	9700      	str	r7, [sp, #0]
 8006bca:	e049      	b.n	8006c60 <_dtoa_r+0x6a0>
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <_dtoa_r+0x624>)
 8006bce:	f7f9 fd1b 	bl	8000608 <__aeabi_dmul>
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	e7bd      	b.n	8006b54 <_dtoa_r+0x594>
 8006bd8:	0800a680 	.word	0x0800a680
 8006bdc:	0800a658 	.word	0x0800a658
 8006be0:	3ff00000 	.word	0x3ff00000
 8006be4:	40240000 	.word	0x40240000
 8006be8:	401c0000 	.word	0x401c0000
 8006bec:	40140000 	.word	0x40140000
 8006bf0:	3fe00000 	.word	0x3fe00000
 8006bf4:	9d01      	ldr	r5, [sp, #4]
 8006bf6:	4656      	mov	r6, sl
 8006bf8:	465f      	mov	r7, fp
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	4630      	mov	r0, r6
 8006c00:	4639      	mov	r1, r7
 8006c02:	f7f9 fe2b 	bl	800085c <__aeabi_ddiv>
 8006c06:	f7f9 ffaf 	bl	8000b68 <__aeabi_d2iz>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	f7f9 fc92 	bl	8000534 <__aeabi_i2d>
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	f7f9 fcf8 	bl	8000608 <__aeabi_dmul>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c24:	f7f9 fb38 	bl	8000298 <__aeabi_dsub>
 8006c28:	f805 6b01 	strb.w	r6, [r5], #1
 8006c2c:	9e01      	ldr	r6, [sp, #4]
 8006c2e:	9f03      	ldr	r7, [sp, #12]
 8006c30:	1bae      	subs	r6, r5, r6
 8006c32:	42b7      	cmp	r7, r6
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	d135      	bne.n	8006ca6 <_dtoa_r+0x6e6>
 8006c3a:	f7f9 fb2f 	bl	800029c <__adddf3>
 8006c3e:	4642      	mov	r2, r8
 8006c40:	464b      	mov	r3, r9
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	f7f9 ff6f 	bl	8000b28 <__aeabi_dcmpgt>
 8006c4a:	b9d0      	cbnz	r0, 8006c82 <_dtoa_r+0x6c2>
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c58:	b110      	cbz	r0, 8006c60 <_dtoa_r+0x6a0>
 8006c5a:	f01a 0f01 	tst.w	sl, #1
 8006c5e:	d110      	bne.n	8006c82 <_dtoa_r+0x6c2>
 8006c60:	4620      	mov	r0, r4
 8006c62:	ee18 1a10 	vmov	r1, s16
 8006c66:	f000 fe75 	bl	8007954 <_Bfree>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9800      	ldr	r0, [sp, #0]
 8006c6e:	702b      	strb	r3, [r5, #0]
 8006c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c72:	3001      	adds	r0, #1
 8006c74:	6018      	str	r0, [r3, #0]
 8006c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f43f acf1 	beq.w	8006660 <_dtoa_r+0xa0>
 8006c7e:	601d      	str	r5, [r3, #0]
 8006c80:	e4ee      	b.n	8006660 <_dtoa_r+0xa0>
 8006c82:	9f00      	ldr	r7, [sp, #0]
 8006c84:	462b      	mov	r3, r5
 8006c86:	461d      	mov	r5, r3
 8006c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c8c:	2a39      	cmp	r2, #57	; 0x39
 8006c8e:	d106      	bne.n	8006c9e <_dtoa_r+0x6de>
 8006c90:	9a01      	ldr	r2, [sp, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d1f7      	bne.n	8006c86 <_dtoa_r+0x6c6>
 8006c96:	9901      	ldr	r1, [sp, #4]
 8006c98:	2230      	movs	r2, #48	; 0x30
 8006c9a:	3701      	adds	r7, #1
 8006c9c:	700a      	strb	r2, [r1, #0]
 8006c9e:	781a      	ldrb	r2, [r3, #0]
 8006ca0:	3201      	adds	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e790      	b.n	8006bc8 <_dtoa_r+0x608>
 8006ca6:	4ba6      	ldr	r3, [pc, #664]	; (8006f40 <_dtoa_r+0x980>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f7f9 fcad 	bl	8000608 <__aeabi_dmul>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	f7f9 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d09d      	beq.n	8006bfa <_dtoa_r+0x63a>
 8006cbe:	e7cf      	b.n	8006c60 <_dtoa_r+0x6a0>
 8006cc0:	9a08      	ldr	r2, [sp, #32]
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	f000 80d7 	beq.w	8006e76 <_dtoa_r+0x8b6>
 8006cc8:	9a06      	ldr	r2, [sp, #24]
 8006cca:	2a01      	cmp	r2, #1
 8006ccc:	f300 80ba 	bgt.w	8006e44 <_dtoa_r+0x884>
 8006cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd2:	2a00      	cmp	r2, #0
 8006cd4:	f000 80b2 	beq.w	8006e3c <_dtoa_r+0x87c>
 8006cd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cdc:	9e07      	ldr	r6, [sp, #28]
 8006cde:	9d04      	ldr	r5, [sp, #16]
 8006ce0:	9a04      	ldr	r2, [sp, #16]
 8006ce2:	441a      	add	r2, r3
 8006ce4:	9204      	str	r2, [sp, #16]
 8006ce6:	9a05      	ldr	r2, [sp, #20]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	441a      	add	r2, r3
 8006cec:	4620      	mov	r0, r4
 8006cee:	9205      	str	r2, [sp, #20]
 8006cf0:	f000 ff32 	bl	8007b58 <__i2b>
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	dd0c      	ble.n	8006d14 <_dtoa_r+0x754>
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dd09      	ble.n	8006d14 <_dtoa_r+0x754>
 8006d00:	42ab      	cmp	r3, r5
 8006d02:	9a04      	ldr	r2, [sp, #16]
 8006d04:	bfa8      	it	ge
 8006d06:	462b      	movge	r3, r5
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	9204      	str	r2, [sp, #16]
 8006d0c:	9a05      	ldr	r2, [sp, #20]
 8006d0e:	1aed      	subs	r5, r5, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	9305      	str	r3, [sp, #20]
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	b31b      	cbz	r3, 8006d60 <_dtoa_r+0x7a0>
 8006d18:	9b08      	ldr	r3, [sp, #32]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80af 	beq.w	8006e7e <_dtoa_r+0x8be>
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	dd13      	ble.n	8006d4c <_dtoa_r+0x78c>
 8006d24:	4639      	mov	r1, r7
 8006d26:	4632      	mov	r2, r6
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 ffd5 	bl	8007cd8 <__pow5mult>
 8006d2e:	ee18 2a10 	vmov	r2, s16
 8006d32:	4601      	mov	r1, r0
 8006d34:	4607      	mov	r7, r0
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 ff24 	bl	8007b84 <__multiply>
 8006d3c:	ee18 1a10 	vmov	r1, s16
 8006d40:	4680      	mov	r8, r0
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fe06 	bl	8007954 <_Bfree>
 8006d48:	ee08 8a10 	vmov	s16, r8
 8006d4c:	9b07      	ldr	r3, [sp, #28]
 8006d4e:	1b9a      	subs	r2, r3, r6
 8006d50:	d006      	beq.n	8006d60 <_dtoa_r+0x7a0>
 8006d52:	ee18 1a10 	vmov	r1, s16
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 ffbe 	bl	8007cd8 <__pow5mult>
 8006d5c:	ee08 0a10 	vmov	s16, r0
 8006d60:	2101      	movs	r1, #1
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fef8 	bl	8007b58 <__i2b>
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	f340 8088 	ble.w	8006e82 <_dtoa_r+0x8c2>
 8006d72:	461a      	mov	r2, r3
 8006d74:	4601      	mov	r1, r0
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 ffae 	bl	8007cd8 <__pow5mult>
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	4606      	mov	r6, r0
 8006d82:	f340 8081 	ble.w	8006e88 <_dtoa_r+0x8c8>
 8006d86:	f04f 0800 	mov.w	r8, #0
 8006d8a:	6933      	ldr	r3, [r6, #16]
 8006d8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d90:	6918      	ldr	r0, [r3, #16]
 8006d92:	f000 fe91 	bl	8007ab8 <__hi0bits>
 8006d96:	f1c0 0020 	rsb	r0, r0, #32
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	4418      	add	r0, r3
 8006d9e:	f010 001f 	ands.w	r0, r0, #31
 8006da2:	f000 8092 	beq.w	8006eca <_dtoa_r+0x90a>
 8006da6:	f1c0 0320 	rsb	r3, r0, #32
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	f340 808a 	ble.w	8006ec4 <_dtoa_r+0x904>
 8006db0:	f1c0 001c 	rsb	r0, r0, #28
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	4403      	add	r3, r0
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	4403      	add	r3, r0
 8006dbe:	4405      	add	r5, r0
 8006dc0:	9305      	str	r3, [sp, #20]
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dd07      	ble.n	8006dd8 <_dtoa_r+0x818>
 8006dc8:	ee18 1a10 	vmov	r1, s16
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 ffdc 	bl	8007d8c <__lshift>
 8006dd4:	ee08 0a10 	vmov	s16, r0
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd05      	ble.n	8006dea <_dtoa_r+0x82a>
 8006dde:	4631      	mov	r1, r6
 8006de0:	461a      	mov	r2, r3
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 ffd2 	bl	8007d8c <__lshift>
 8006de8:	4606      	mov	r6, r0
 8006dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d06e      	beq.n	8006ece <_dtoa_r+0x90e>
 8006df0:	ee18 0a10 	vmov	r0, s16
 8006df4:	4631      	mov	r1, r6
 8006df6:	f001 f839 	bl	8007e6c <__mcmp>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	da67      	bge.n	8006ece <_dtoa_r+0x90e>
 8006dfe:	9b00      	ldr	r3, [sp, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	ee18 1a10 	vmov	r1, s16
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	220a      	movs	r2, #10
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fdc3 	bl	8007998 <__multadd>
 8006e12:	9b08      	ldr	r3, [sp, #32]
 8006e14:	ee08 0a10 	vmov	s16, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 81b1 	beq.w	8007180 <_dtoa_r+0xbc0>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4639      	mov	r1, r7
 8006e22:	220a      	movs	r2, #10
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fdb7 	bl	8007998 <__multadd>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	4607      	mov	r7, r0
 8006e30:	f300 808e 	bgt.w	8006f50 <_dtoa_r+0x990>
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	dc51      	bgt.n	8006ede <_dtoa_r+0x91e>
 8006e3a:	e089      	b.n	8006f50 <_dtoa_r+0x990>
 8006e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e42:	e74b      	b.n	8006cdc <_dtoa_r+0x71c>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	1e5e      	subs	r6, r3, #1
 8006e48:	9b07      	ldr	r3, [sp, #28]
 8006e4a:	42b3      	cmp	r3, r6
 8006e4c:	bfbf      	itttt	lt
 8006e4e:	9b07      	ldrlt	r3, [sp, #28]
 8006e50:	9607      	strlt	r6, [sp, #28]
 8006e52:	1af2      	sublt	r2, r6, r3
 8006e54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e56:	bfb6      	itet	lt
 8006e58:	189b      	addlt	r3, r3, r2
 8006e5a:	1b9e      	subge	r6, r3, r6
 8006e5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	bfb8      	it	lt
 8006e62:	2600      	movlt	r6, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb7      	itett	lt
 8006e68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e70:	1a9d      	sublt	r5, r3, r2
 8006e72:	2300      	movlt	r3, #0
 8006e74:	e734      	b.n	8006ce0 <_dtoa_r+0x720>
 8006e76:	9e07      	ldr	r6, [sp, #28]
 8006e78:	9d04      	ldr	r5, [sp, #16]
 8006e7a:	9f08      	ldr	r7, [sp, #32]
 8006e7c:	e73b      	b.n	8006cf6 <_dtoa_r+0x736>
 8006e7e:	9a07      	ldr	r2, [sp, #28]
 8006e80:	e767      	b.n	8006d52 <_dtoa_r+0x792>
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	dc18      	bgt.n	8006eba <_dtoa_r+0x8fa>
 8006e88:	f1ba 0f00 	cmp.w	sl, #0
 8006e8c:	d115      	bne.n	8006eba <_dtoa_r+0x8fa>
 8006e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e92:	b993      	cbnz	r3, 8006eba <_dtoa_r+0x8fa>
 8006e94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e98:	0d1b      	lsrs	r3, r3, #20
 8006e9a:	051b      	lsls	r3, r3, #20
 8006e9c:	b183      	cbz	r3, 8006ec0 <_dtoa_r+0x900>
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	9304      	str	r3, [sp, #16]
 8006ea4:	9b05      	ldr	r3, [sp, #20]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9305      	str	r3, [sp, #20]
 8006eaa:	f04f 0801 	mov.w	r8, #1
 8006eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f47f af6a 	bne.w	8006d8a <_dtoa_r+0x7ca>
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	e76f      	b.n	8006d9a <_dtoa_r+0x7da>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	e7f6      	b.n	8006eae <_dtoa_r+0x8ee>
 8006ec0:	4698      	mov	r8, r3
 8006ec2:	e7f4      	b.n	8006eae <_dtoa_r+0x8ee>
 8006ec4:	f43f af7d 	beq.w	8006dc2 <_dtoa_r+0x802>
 8006ec8:	4618      	mov	r0, r3
 8006eca:	301c      	adds	r0, #28
 8006ecc:	e772      	b.n	8006db4 <_dtoa_r+0x7f4>
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dc37      	bgt.n	8006f44 <_dtoa_r+0x984>
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	dd34      	ble.n	8006f44 <_dtoa_r+0x984>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	9302      	str	r3, [sp, #8]
 8006ede:	9b02      	ldr	r3, [sp, #8]
 8006ee0:	b96b      	cbnz	r3, 8006efe <_dtoa_r+0x93e>
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 fd56 	bl	8007998 <__multadd>
 8006eec:	4601      	mov	r1, r0
 8006eee:	4606      	mov	r6, r0
 8006ef0:	ee18 0a10 	vmov	r0, s16
 8006ef4:	f000 ffba 	bl	8007e6c <__mcmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f73f adbb 	bgt.w	8006a74 <_dtoa_r+0x4b4>
 8006efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f00:	9d01      	ldr	r5, [sp, #4]
 8006f02:	43db      	mvns	r3, r3
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	f04f 0800 	mov.w	r8, #0
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fd21 	bl	8007954 <_Bfree>
 8006f12:	2f00      	cmp	r7, #0
 8006f14:	f43f aea4 	beq.w	8006c60 <_dtoa_r+0x6a0>
 8006f18:	f1b8 0f00 	cmp.w	r8, #0
 8006f1c:	d005      	beq.n	8006f2a <_dtoa_r+0x96a>
 8006f1e:	45b8      	cmp	r8, r7
 8006f20:	d003      	beq.n	8006f2a <_dtoa_r+0x96a>
 8006f22:	4641      	mov	r1, r8
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 fd15 	bl	8007954 <_Bfree>
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fd11 	bl	8007954 <_Bfree>
 8006f32:	e695      	b.n	8006c60 <_dtoa_r+0x6a0>
 8006f34:	2600      	movs	r6, #0
 8006f36:	4637      	mov	r7, r6
 8006f38:	e7e1      	b.n	8006efe <_dtoa_r+0x93e>
 8006f3a:	9700      	str	r7, [sp, #0]
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	e599      	b.n	8006a74 <_dtoa_r+0x4b4>
 8006f40:	40240000 	.word	0x40240000
 8006f44:	9b08      	ldr	r3, [sp, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80ca 	beq.w	80070e0 <_dtoa_r+0xb20>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	9302      	str	r3, [sp, #8]
 8006f50:	2d00      	cmp	r5, #0
 8006f52:	dd05      	ble.n	8006f60 <_dtoa_r+0x9a0>
 8006f54:	4639      	mov	r1, r7
 8006f56:	462a      	mov	r2, r5
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 ff17 	bl	8007d8c <__lshift>
 8006f5e:	4607      	mov	r7, r0
 8006f60:	f1b8 0f00 	cmp.w	r8, #0
 8006f64:	d05b      	beq.n	800701e <_dtoa_r+0xa5e>
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fcb3 	bl	80078d4 <_Balloc>
 8006f6e:	4605      	mov	r5, r0
 8006f70:	b928      	cbnz	r0, 8006f7e <_dtoa_r+0x9be>
 8006f72:	4b87      	ldr	r3, [pc, #540]	; (8007190 <_dtoa_r+0xbd0>)
 8006f74:	4602      	mov	r2, r0
 8006f76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f7a:	f7ff bb3b 	b.w	80065f4 <_dtoa_r+0x34>
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	3202      	adds	r2, #2
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	f107 010c 	add.w	r1, r7, #12
 8006f88:	300c      	adds	r0, #12
 8006f8a:	f000 fc95 	bl	80078b8 <memcpy>
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4629      	mov	r1, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fefa 	bl	8007d8c <__lshift>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	f103 0901 	add.w	r9, r3, #1
 8006f9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	f00a 0301 	and.w	r3, sl, #1
 8006faa:	46b8      	mov	r8, r7
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	4607      	mov	r7, r0
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	ee18 0a10 	vmov	r0, s16
 8006fb6:	f7ff fa77 	bl	80064a8 <quorem>
 8006fba:	4641      	mov	r1, r8
 8006fbc:	9002      	str	r0, [sp, #8]
 8006fbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fc2:	ee18 0a10 	vmov	r0, s16
 8006fc6:	f000 ff51 	bl	8007e6c <__mcmp>
 8006fca:	463a      	mov	r2, r7
 8006fcc:	9003      	str	r0, [sp, #12]
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 ff67 	bl	8007ea4 <__mdiff>
 8006fd6:	68c2      	ldr	r2, [r0, #12]
 8006fd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006fdc:	4605      	mov	r5, r0
 8006fde:	bb02      	cbnz	r2, 8007022 <_dtoa_r+0xa62>
 8006fe0:	4601      	mov	r1, r0
 8006fe2:	ee18 0a10 	vmov	r0, s16
 8006fe6:	f000 ff41 	bl	8007e6c <__mcmp>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4629      	mov	r1, r5
 8006fee:	4620      	mov	r0, r4
 8006ff0:	9207      	str	r2, [sp, #28]
 8006ff2:	f000 fcaf 	bl	8007954 <_Bfree>
 8006ff6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ffa:	ea43 0102 	orr.w	r1, r3, r2
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	430b      	orrs	r3, r1
 8007002:	464d      	mov	r5, r9
 8007004:	d10f      	bne.n	8007026 <_dtoa_r+0xa66>
 8007006:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800700a:	d02a      	beq.n	8007062 <_dtoa_r+0xaa2>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd02      	ble.n	8007018 <_dtoa_r+0xa58>
 8007012:	9b02      	ldr	r3, [sp, #8]
 8007014:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007018:	f88b a000 	strb.w	sl, [fp]
 800701c:	e775      	b.n	8006f0a <_dtoa_r+0x94a>
 800701e:	4638      	mov	r0, r7
 8007020:	e7ba      	b.n	8006f98 <_dtoa_r+0x9d8>
 8007022:	2201      	movs	r2, #1
 8007024:	e7e2      	b.n	8006fec <_dtoa_r+0xa2c>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	db04      	blt.n	8007036 <_dtoa_r+0xa76>
 800702c:	9906      	ldr	r1, [sp, #24]
 800702e:	430b      	orrs	r3, r1
 8007030:	9904      	ldr	r1, [sp, #16]
 8007032:	430b      	orrs	r3, r1
 8007034:	d122      	bne.n	800707c <_dtoa_r+0xabc>
 8007036:	2a00      	cmp	r2, #0
 8007038:	ddee      	ble.n	8007018 <_dtoa_r+0xa58>
 800703a:	ee18 1a10 	vmov	r1, s16
 800703e:	2201      	movs	r2, #1
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fea3 	bl	8007d8c <__lshift>
 8007046:	4631      	mov	r1, r6
 8007048:	ee08 0a10 	vmov	s16, r0
 800704c:	f000 ff0e 	bl	8007e6c <__mcmp>
 8007050:	2800      	cmp	r0, #0
 8007052:	dc03      	bgt.n	800705c <_dtoa_r+0xa9c>
 8007054:	d1e0      	bne.n	8007018 <_dtoa_r+0xa58>
 8007056:	f01a 0f01 	tst.w	sl, #1
 800705a:	d0dd      	beq.n	8007018 <_dtoa_r+0xa58>
 800705c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007060:	d1d7      	bne.n	8007012 <_dtoa_r+0xa52>
 8007062:	2339      	movs	r3, #57	; 0x39
 8007064:	f88b 3000 	strb.w	r3, [fp]
 8007068:	462b      	mov	r3, r5
 800706a:	461d      	mov	r5, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007072:	2a39      	cmp	r2, #57	; 0x39
 8007074:	d071      	beq.n	800715a <_dtoa_r+0xb9a>
 8007076:	3201      	adds	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e746      	b.n	8006f0a <_dtoa_r+0x94a>
 800707c:	2a00      	cmp	r2, #0
 800707e:	dd07      	ble.n	8007090 <_dtoa_r+0xad0>
 8007080:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007084:	d0ed      	beq.n	8007062 <_dtoa_r+0xaa2>
 8007086:	f10a 0301 	add.w	r3, sl, #1
 800708a:	f88b 3000 	strb.w	r3, [fp]
 800708e:	e73c      	b.n	8006f0a <_dtoa_r+0x94a>
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007096:	4599      	cmp	r9, r3
 8007098:	d047      	beq.n	800712a <_dtoa_r+0xb6a>
 800709a:	ee18 1a10 	vmov	r1, s16
 800709e:	2300      	movs	r3, #0
 80070a0:	220a      	movs	r2, #10
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fc78 	bl	8007998 <__multadd>
 80070a8:	45b8      	cmp	r8, r7
 80070aa:	ee08 0a10 	vmov	s16, r0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	f04f 020a 	mov.w	r2, #10
 80070b6:	4641      	mov	r1, r8
 80070b8:	4620      	mov	r0, r4
 80070ba:	d106      	bne.n	80070ca <_dtoa_r+0xb0a>
 80070bc:	f000 fc6c 	bl	8007998 <__multadd>
 80070c0:	4680      	mov	r8, r0
 80070c2:	4607      	mov	r7, r0
 80070c4:	f109 0901 	add.w	r9, r9, #1
 80070c8:	e772      	b.n	8006fb0 <_dtoa_r+0x9f0>
 80070ca:	f000 fc65 	bl	8007998 <__multadd>
 80070ce:	4639      	mov	r1, r7
 80070d0:	4680      	mov	r8, r0
 80070d2:	2300      	movs	r3, #0
 80070d4:	220a      	movs	r2, #10
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fc5e 	bl	8007998 <__multadd>
 80070dc:	4607      	mov	r7, r0
 80070de:	e7f1      	b.n	80070c4 <_dtoa_r+0xb04>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	9302      	str	r3, [sp, #8]
 80070e4:	9d01      	ldr	r5, [sp, #4]
 80070e6:	ee18 0a10 	vmov	r0, s16
 80070ea:	4631      	mov	r1, r6
 80070ec:	f7ff f9dc 	bl	80064a8 <quorem>
 80070f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	f805 ab01 	strb.w	sl, [r5], #1
 80070fa:	1aea      	subs	r2, r5, r3
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	4293      	cmp	r3, r2
 8007100:	dd09      	ble.n	8007116 <_dtoa_r+0xb56>
 8007102:	ee18 1a10 	vmov	r1, s16
 8007106:	2300      	movs	r3, #0
 8007108:	220a      	movs	r2, #10
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fc44 	bl	8007998 <__multadd>
 8007110:	ee08 0a10 	vmov	s16, r0
 8007114:	e7e7      	b.n	80070e6 <_dtoa_r+0xb26>
 8007116:	9b02      	ldr	r3, [sp, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfc8      	it	gt
 800711c:	461d      	movgt	r5, r3
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	bfd8      	it	le
 8007122:	2501      	movle	r5, #1
 8007124:	441d      	add	r5, r3
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ee18 1a10 	vmov	r1, s16
 800712e:	2201      	movs	r2, #1
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fe2b 	bl	8007d8c <__lshift>
 8007136:	4631      	mov	r1, r6
 8007138:	ee08 0a10 	vmov	s16, r0
 800713c:	f000 fe96 	bl	8007e6c <__mcmp>
 8007140:	2800      	cmp	r0, #0
 8007142:	dc91      	bgt.n	8007068 <_dtoa_r+0xaa8>
 8007144:	d102      	bne.n	800714c <_dtoa_r+0xb8c>
 8007146:	f01a 0f01 	tst.w	sl, #1
 800714a:	d18d      	bne.n	8007068 <_dtoa_r+0xaa8>
 800714c:	462b      	mov	r3, r5
 800714e:	461d      	mov	r5, r3
 8007150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007154:	2a30      	cmp	r2, #48	; 0x30
 8007156:	d0fa      	beq.n	800714e <_dtoa_r+0xb8e>
 8007158:	e6d7      	b.n	8006f0a <_dtoa_r+0x94a>
 800715a:	9a01      	ldr	r2, [sp, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d184      	bne.n	800706a <_dtoa_r+0xaaa>
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2331      	movs	r3, #49	; 0x31
 8007168:	7013      	strb	r3, [r2, #0]
 800716a:	e6ce      	b.n	8006f0a <_dtoa_r+0x94a>
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <_dtoa_r+0xbd4>)
 800716e:	f7ff ba95 	b.w	800669c <_dtoa_r+0xdc>
 8007172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f aa6e 	bne.w	8006656 <_dtoa_r+0x96>
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <_dtoa_r+0xbd8>)
 800717c:	f7ff ba8e 	b.w	800669c <_dtoa_r+0xdc>
 8007180:	9b02      	ldr	r3, [sp, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	dcae      	bgt.n	80070e4 <_dtoa_r+0xb24>
 8007186:	9b06      	ldr	r3, [sp, #24]
 8007188:	2b02      	cmp	r3, #2
 800718a:	f73f aea8 	bgt.w	8006ede <_dtoa_r+0x91e>
 800718e:	e7a9      	b.n	80070e4 <_dtoa_r+0xb24>
 8007190:	0800a570 	.word	0x0800a570
 8007194:	0800a374 	.word	0x0800a374
 8007198:	0800a4f1 	.word	0x0800a4f1

0800719c <rshift>:
 800719c:	6903      	ldr	r3, [r0, #16]
 800719e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80071a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80071aa:	f100 0414 	add.w	r4, r0, #20
 80071ae:	dd45      	ble.n	800723c <rshift+0xa0>
 80071b0:	f011 011f 	ands.w	r1, r1, #31
 80071b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80071b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80071bc:	d10c      	bne.n	80071d8 <rshift+0x3c>
 80071be:	f100 0710 	add.w	r7, r0, #16
 80071c2:	4629      	mov	r1, r5
 80071c4:	42b1      	cmp	r1, r6
 80071c6:	d334      	bcc.n	8007232 <rshift+0x96>
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	1eea      	subs	r2, r5, #3
 80071ce:	4296      	cmp	r6, r2
 80071d0:	bf38      	it	cc
 80071d2:	2300      	movcc	r3, #0
 80071d4:	4423      	add	r3, r4
 80071d6:	e015      	b.n	8007204 <rshift+0x68>
 80071d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071dc:	f1c1 0820 	rsb	r8, r1, #32
 80071e0:	40cf      	lsrs	r7, r1
 80071e2:	f105 0e04 	add.w	lr, r5, #4
 80071e6:	46a1      	mov	r9, r4
 80071e8:	4576      	cmp	r6, lr
 80071ea:	46f4      	mov	ip, lr
 80071ec:	d815      	bhi.n	800721a <rshift+0x7e>
 80071ee:	1a9a      	subs	r2, r3, r2
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	3a04      	subs	r2, #4
 80071f4:	3501      	adds	r5, #1
 80071f6:	42ae      	cmp	r6, r5
 80071f8:	bf38      	it	cc
 80071fa:	2200      	movcc	r2, #0
 80071fc:	18a3      	adds	r3, r4, r2
 80071fe:	50a7      	str	r7, [r4, r2]
 8007200:	b107      	cbz	r7, 8007204 <rshift+0x68>
 8007202:	3304      	adds	r3, #4
 8007204:	1b1a      	subs	r2, r3, r4
 8007206:	42a3      	cmp	r3, r4
 8007208:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800720c:	bf08      	it	eq
 800720e:	2300      	moveq	r3, #0
 8007210:	6102      	str	r2, [r0, #16]
 8007212:	bf08      	it	eq
 8007214:	6143      	streq	r3, [r0, #20]
 8007216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800721a:	f8dc c000 	ldr.w	ip, [ip]
 800721e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007222:	ea4c 0707 	orr.w	r7, ip, r7
 8007226:	f849 7b04 	str.w	r7, [r9], #4
 800722a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800722e:	40cf      	lsrs	r7, r1
 8007230:	e7da      	b.n	80071e8 <rshift+0x4c>
 8007232:	f851 cb04 	ldr.w	ip, [r1], #4
 8007236:	f847 cf04 	str.w	ip, [r7, #4]!
 800723a:	e7c3      	b.n	80071c4 <rshift+0x28>
 800723c:	4623      	mov	r3, r4
 800723e:	e7e1      	b.n	8007204 <rshift+0x68>

08007240 <__hexdig_fun>:
 8007240:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007244:	2b09      	cmp	r3, #9
 8007246:	d802      	bhi.n	800724e <__hexdig_fun+0xe>
 8007248:	3820      	subs	r0, #32
 800724a:	b2c0      	uxtb	r0, r0
 800724c:	4770      	bx	lr
 800724e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007252:	2b05      	cmp	r3, #5
 8007254:	d801      	bhi.n	800725a <__hexdig_fun+0x1a>
 8007256:	3847      	subs	r0, #71	; 0x47
 8007258:	e7f7      	b.n	800724a <__hexdig_fun+0xa>
 800725a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800725e:	2b05      	cmp	r3, #5
 8007260:	d801      	bhi.n	8007266 <__hexdig_fun+0x26>
 8007262:	3827      	subs	r0, #39	; 0x27
 8007264:	e7f1      	b.n	800724a <__hexdig_fun+0xa>
 8007266:	2000      	movs	r0, #0
 8007268:	4770      	bx	lr
	...

0800726c <__gethex>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	ed2d 8b02 	vpush	{d8}
 8007274:	b089      	sub	sp, #36	; 0x24
 8007276:	ee08 0a10 	vmov	s16, r0
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	4bb4      	ldr	r3, [pc, #720]	; (8007550 <__gethex+0x2e4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	468b      	mov	fp, r1
 8007286:	4690      	mov	r8, r2
 8007288:	f7f8 ffaa 	bl	80001e0 <strlen>
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	f8db 2000 	ldr.w	r2, [fp]
 8007292:	4403      	add	r3, r0
 8007294:	4682      	mov	sl, r0
 8007296:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	1c93      	adds	r3, r2, #2
 800729e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80072a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80072a6:	32fe      	adds	r2, #254	; 0xfe
 80072a8:	18d1      	adds	r1, r2, r3
 80072aa:	461f      	mov	r7, r3
 80072ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072b0:	9100      	str	r1, [sp, #0]
 80072b2:	2830      	cmp	r0, #48	; 0x30
 80072b4:	d0f8      	beq.n	80072a8 <__gethex+0x3c>
 80072b6:	f7ff ffc3 	bl	8007240 <__hexdig_fun>
 80072ba:	4604      	mov	r4, r0
 80072bc:	2800      	cmp	r0, #0
 80072be:	d13a      	bne.n	8007336 <__gethex+0xca>
 80072c0:	9901      	ldr	r1, [sp, #4]
 80072c2:	4652      	mov	r2, sl
 80072c4:	4638      	mov	r0, r7
 80072c6:	f001 fa33 	bl	8008730 <strncmp>
 80072ca:	4605      	mov	r5, r0
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d168      	bne.n	80073a2 <__gethex+0x136>
 80072d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80072d4:	eb07 060a 	add.w	r6, r7, sl
 80072d8:	f7ff ffb2 	bl	8007240 <__hexdig_fun>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d062      	beq.n	80073a6 <__gethex+0x13a>
 80072e0:	4633      	mov	r3, r6
 80072e2:	7818      	ldrb	r0, [r3, #0]
 80072e4:	2830      	cmp	r0, #48	; 0x30
 80072e6:	461f      	mov	r7, r3
 80072e8:	f103 0301 	add.w	r3, r3, #1
 80072ec:	d0f9      	beq.n	80072e2 <__gethex+0x76>
 80072ee:	f7ff ffa7 	bl	8007240 <__hexdig_fun>
 80072f2:	2301      	movs	r3, #1
 80072f4:	fab0 f480 	clz	r4, r0
 80072f8:	0964      	lsrs	r4, r4, #5
 80072fa:	4635      	mov	r5, r6
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	463a      	mov	r2, r7
 8007300:	4616      	mov	r6, r2
 8007302:	3201      	adds	r2, #1
 8007304:	7830      	ldrb	r0, [r6, #0]
 8007306:	f7ff ff9b 	bl	8007240 <__hexdig_fun>
 800730a:	2800      	cmp	r0, #0
 800730c:	d1f8      	bne.n	8007300 <__gethex+0x94>
 800730e:	9901      	ldr	r1, [sp, #4]
 8007310:	4652      	mov	r2, sl
 8007312:	4630      	mov	r0, r6
 8007314:	f001 fa0c 	bl	8008730 <strncmp>
 8007318:	b980      	cbnz	r0, 800733c <__gethex+0xd0>
 800731a:	b94d      	cbnz	r5, 8007330 <__gethex+0xc4>
 800731c:	eb06 050a 	add.w	r5, r6, sl
 8007320:	462a      	mov	r2, r5
 8007322:	4616      	mov	r6, r2
 8007324:	3201      	adds	r2, #1
 8007326:	7830      	ldrb	r0, [r6, #0]
 8007328:	f7ff ff8a 	bl	8007240 <__hexdig_fun>
 800732c:	2800      	cmp	r0, #0
 800732e:	d1f8      	bne.n	8007322 <__gethex+0xb6>
 8007330:	1bad      	subs	r5, r5, r6
 8007332:	00ad      	lsls	r5, r5, #2
 8007334:	e004      	b.n	8007340 <__gethex+0xd4>
 8007336:	2400      	movs	r4, #0
 8007338:	4625      	mov	r5, r4
 800733a:	e7e0      	b.n	80072fe <__gethex+0x92>
 800733c:	2d00      	cmp	r5, #0
 800733e:	d1f7      	bne.n	8007330 <__gethex+0xc4>
 8007340:	7833      	ldrb	r3, [r6, #0]
 8007342:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007346:	2b50      	cmp	r3, #80	; 0x50
 8007348:	d13b      	bne.n	80073c2 <__gethex+0x156>
 800734a:	7873      	ldrb	r3, [r6, #1]
 800734c:	2b2b      	cmp	r3, #43	; 0x2b
 800734e:	d02c      	beq.n	80073aa <__gethex+0x13e>
 8007350:	2b2d      	cmp	r3, #45	; 0x2d
 8007352:	d02e      	beq.n	80073b2 <__gethex+0x146>
 8007354:	1c71      	adds	r1, r6, #1
 8007356:	f04f 0900 	mov.w	r9, #0
 800735a:	7808      	ldrb	r0, [r1, #0]
 800735c:	f7ff ff70 	bl	8007240 <__hexdig_fun>
 8007360:	1e43      	subs	r3, r0, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b18      	cmp	r3, #24
 8007366:	d82c      	bhi.n	80073c2 <__gethex+0x156>
 8007368:	f1a0 0210 	sub.w	r2, r0, #16
 800736c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007370:	f7ff ff66 	bl	8007240 <__hexdig_fun>
 8007374:	1e43      	subs	r3, r0, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b18      	cmp	r3, #24
 800737a:	d91d      	bls.n	80073b8 <__gethex+0x14c>
 800737c:	f1b9 0f00 	cmp.w	r9, #0
 8007380:	d000      	beq.n	8007384 <__gethex+0x118>
 8007382:	4252      	negs	r2, r2
 8007384:	4415      	add	r5, r2
 8007386:	f8cb 1000 	str.w	r1, [fp]
 800738a:	b1e4      	cbz	r4, 80073c6 <__gethex+0x15a>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bf14      	ite	ne
 8007392:	2700      	movne	r7, #0
 8007394:	2706      	moveq	r7, #6
 8007396:	4638      	mov	r0, r7
 8007398:	b009      	add	sp, #36	; 0x24
 800739a:	ecbd 8b02 	vpop	{d8}
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	463e      	mov	r6, r7
 80073a4:	4625      	mov	r5, r4
 80073a6:	2401      	movs	r4, #1
 80073a8:	e7ca      	b.n	8007340 <__gethex+0xd4>
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	1cb1      	adds	r1, r6, #2
 80073b0:	e7d3      	b.n	800735a <__gethex+0xee>
 80073b2:	f04f 0901 	mov.w	r9, #1
 80073b6:	e7fa      	b.n	80073ae <__gethex+0x142>
 80073b8:	230a      	movs	r3, #10
 80073ba:	fb03 0202 	mla	r2, r3, r2, r0
 80073be:	3a10      	subs	r2, #16
 80073c0:	e7d4      	b.n	800736c <__gethex+0x100>
 80073c2:	4631      	mov	r1, r6
 80073c4:	e7df      	b.n	8007386 <__gethex+0x11a>
 80073c6:	1bf3      	subs	r3, r6, r7
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4621      	mov	r1, r4
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	dc0b      	bgt.n	80073e8 <__gethex+0x17c>
 80073d0:	ee18 0a10 	vmov	r0, s16
 80073d4:	f000 fa7e 	bl	80078d4 <_Balloc>
 80073d8:	4604      	mov	r4, r0
 80073da:	b940      	cbnz	r0, 80073ee <__gethex+0x182>
 80073dc:	4b5d      	ldr	r3, [pc, #372]	; (8007554 <__gethex+0x2e8>)
 80073de:	4602      	mov	r2, r0
 80073e0:	21de      	movs	r1, #222	; 0xde
 80073e2:	485d      	ldr	r0, [pc, #372]	; (8007558 <__gethex+0x2ec>)
 80073e4:	f001 f9c6 	bl	8008774 <__assert_func>
 80073e8:	3101      	adds	r1, #1
 80073ea:	105b      	asrs	r3, r3, #1
 80073ec:	e7ee      	b.n	80073cc <__gethex+0x160>
 80073ee:	f100 0914 	add.w	r9, r0, #20
 80073f2:	f04f 0b00 	mov.w	fp, #0
 80073f6:	f1ca 0301 	rsb	r3, sl, #1
 80073fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80073fe:	f8cd b000 	str.w	fp, [sp]
 8007402:	9306      	str	r3, [sp, #24]
 8007404:	42b7      	cmp	r7, r6
 8007406:	d340      	bcc.n	800748a <__gethex+0x21e>
 8007408:	9802      	ldr	r0, [sp, #8]
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	f840 3b04 	str.w	r3, [r0], #4
 8007410:	eba0 0009 	sub.w	r0, r0, r9
 8007414:	1080      	asrs	r0, r0, #2
 8007416:	0146      	lsls	r6, r0, #5
 8007418:	6120      	str	r0, [r4, #16]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fb4c 	bl	8007ab8 <__hi0bits>
 8007420:	1a30      	subs	r0, r6, r0
 8007422:	f8d8 6000 	ldr.w	r6, [r8]
 8007426:	42b0      	cmp	r0, r6
 8007428:	dd63      	ble.n	80074f2 <__gethex+0x286>
 800742a:	1b87      	subs	r7, r0, r6
 800742c:	4639      	mov	r1, r7
 800742e:	4620      	mov	r0, r4
 8007430:	f000 fef0 	bl	8008214 <__any_on>
 8007434:	4682      	mov	sl, r0
 8007436:	b1a8      	cbz	r0, 8007464 <__gethex+0x1f8>
 8007438:	1e7b      	subs	r3, r7, #1
 800743a:	1159      	asrs	r1, r3, #5
 800743c:	f003 021f 	and.w	r2, r3, #31
 8007440:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007444:	f04f 0a01 	mov.w	sl, #1
 8007448:	fa0a f202 	lsl.w	r2, sl, r2
 800744c:	420a      	tst	r2, r1
 800744e:	d009      	beq.n	8007464 <__gethex+0x1f8>
 8007450:	4553      	cmp	r3, sl
 8007452:	dd05      	ble.n	8007460 <__gethex+0x1f4>
 8007454:	1eb9      	subs	r1, r7, #2
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fedc 	bl	8008214 <__any_on>
 800745c:	2800      	cmp	r0, #0
 800745e:	d145      	bne.n	80074ec <__gethex+0x280>
 8007460:	f04f 0a02 	mov.w	sl, #2
 8007464:	4639      	mov	r1, r7
 8007466:	4620      	mov	r0, r4
 8007468:	f7ff fe98 	bl	800719c <rshift>
 800746c:	443d      	add	r5, r7
 800746e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007472:	42ab      	cmp	r3, r5
 8007474:	da4c      	bge.n	8007510 <__gethex+0x2a4>
 8007476:	ee18 0a10 	vmov	r0, s16
 800747a:	4621      	mov	r1, r4
 800747c:	f000 fa6a 	bl	8007954 <_Bfree>
 8007480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007482:	2300      	movs	r3, #0
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	27a3      	movs	r7, #163	; 0xa3
 8007488:	e785      	b.n	8007396 <__gethex+0x12a>
 800748a:	1e73      	subs	r3, r6, #1
 800748c:	9a05      	ldr	r2, [sp, #20]
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007494:	4293      	cmp	r3, r2
 8007496:	d019      	beq.n	80074cc <__gethex+0x260>
 8007498:	f1bb 0f20 	cmp.w	fp, #32
 800749c:	d107      	bne.n	80074ae <__gethex+0x242>
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	9a00      	ldr	r2, [sp, #0]
 80074a2:	f843 2b04 	str.w	r2, [r3], #4
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	2300      	movs	r3, #0
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	469b      	mov	fp, r3
 80074ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074b2:	f7ff fec5 	bl	8007240 <__hexdig_fun>
 80074b6:	9b00      	ldr	r3, [sp, #0]
 80074b8:	f000 000f 	and.w	r0, r0, #15
 80074bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80074c0:	4303      	orrs	r3, r0
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	f10b 0b04 	add.w	fp, fp, #4
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	e00d      	b.n	80074e8 <__gethex+0x27c>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	9a06      	ldr	r2, [sp, #24]
 80074d0:	4413      	add	r3, r2
 80074d2:	42bb      	cmp	r3, r7
 80074d4:	d3e0      	bcc.n	8007498 <__gethex+0x22c>
 80074d6:	4618      	mov	r0, r3
 80074d8:	9901      	ldr	r1, [sp, #4]
 80074da:	9307      	str	r3, [sp, #28]
 80074dc:	4652      	mov	r2, sl
 80074de:	f001 f927 	bl	8008730 <strncmp>
 80074e2:	9b07      	ldr	r3, [sp, #28]
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1d7      	bne.n	8007498 <__gethex+0x22c>
 80074e8:	461e      	mov	r6, r3
 80074ea:	e78b      	b.n	8007404 <__gethex+0x198>
 80074ec:	f04f 0a03 	mov.w	sl, #3
 80074f0:	e7b8      	b.n	8007464 <__gethex+0x1f8>
 80074f2:	da0a      	bge.n	800750a <__gethex+0x29e>
 80074f4:	1a37      	subs	r7, r6, r0
 80074f6:	4621      	mov	r1, r4
 80074f8:	ee18 0a10 	vmov	r0, s16
 80074fc:	463a      	mov	r2, r7
 80074fe:	f000 fc45 	bl	8007d8c <__lshift>
 8007502:	1bed      	subs	r5, r5, r7
 8007504:	4604      	mov	r4, r0
 8007506:	f100 0914 	add.w	r9, r0, #20
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	e7ae      	b.n	800746e <__gethex+0x202>
 8007510:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007514:	42a8      	cmp	r0, r5
 8007516:	dd72      	ble.n	80075fe <__gethex+0x392>
 8007518:	1b45      	subs	r5, r0, r5
 800751a:	42ae      	cmp	r6, r5
 800751c:	dc36      	bgt.n	800758c <__gethex+0x320>
 800751e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d02a      	beq.n	800757c <__gethex+0x310>
 8007526:	2b03      	cmp	r3, #3
 8007528:	d02c      	beq.n	8007584 <__gethex+0x318>
 800752a:	2b01      	cmp	r3, #1
 800752c:	d11c      	bne.n	8007568 <__gethex+0x2fc>
 800752e:	42ae      	cmp	r6, r5
 8007530:	d11a      	bne.n	8007568 <__gethex+0x2fc>
 8007532:	2e01      	cmp	r6, #1
 8007534:	d112      	bne.n	800755c <__gethex+0x2f0>
 8007536:	9a04      	ldr	r2, [sp, #16]
 8007538:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	2301      	movs	r3, #1
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	f8c9 3000 	str.w	r3, [r9]
 8007546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007548:	2762      	movs	r7, #98	; 0x62
 800754a:	601c      	str	r4, [r3, #0]
 800754c:	e723      	b.n	8007396 <__gethex+0x12a>
 800754e:	bf00      	nop
 8007550:	0800a5e8 	.word	0x0800a5e8
 8007554:	0800a570 	.word	0x0800a570
 8007558:	0800a581 	.word	0x0800a581
 800755c:	1e71      	subs	r1, r6, #1
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fe58 	bl	8008214 <__any_on>
 8007564:	2800      	cmp	r0, #0
 8007566:	d1e6      	bne.n	8007536 <__gethex+0x2ca>
 8007568:	ee18 0a10 	vmov	r0, s16
 800756c:	4621      	mov	r1, r4
 800756e:	f000 f9f1 	bl	8007954 <_Bfree>
 8007572:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007574:	2300      	movs	r3, #0
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	2750      	movs	r7, #80	; 0x50
 800757a:	e70c      	b.n	8007396 <__gethex+0x12a>
 800757c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f2      	bne.n	8007568 <__gethex+0x2fc>
 8007582:	e7d8      	b.n	8007536 <__gethex+0x2ca>
 8007584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1d5      	bne.n	8007536 <__gethex+0x2ca>
 800758a:	e7ed      	b.n	8007568 <__gethex+0x2fc>
 800758c:	1e6f      	subs	r7, r5, #1
 800758e:	f1ba 0f00 	cmp.w	sl, #0
 8007592:	d131      	bne.n	80075f8 <__gethex+0x38c>
 8007594:	b127      	cbz	r7, 80075a0 <__gethex+0x334>
 8007596:	4639      	mov	r1, r7
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fe3b 	bl	8008214 <__any_on>
 800759e:	4682      	mov	sl, r0
 80075a0:	117b      	asrs	r3, r7, #5
 80075a2:	2101      	movs	r1, #1
 80075a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80075a8:	f007 071f 	and.w	r7, r7, #31
 80075ac:	fa01 f707 	lsl.w	r7, r1, r7
 80075b0:	421f      	tst	r7, r3
 80075b2:	4629      	mov	r1, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	bf18      	it	ne
 80075b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80075bc:	1b76      	subs	r6, r6, r5
 80075be:	f7ff fded 	bl	800719c <rshift>
 80075c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80075c6:	2702      	movs	r7, #2
 80075c8:	f1ba 0f00 	cmp.w	sl, #0
 80075cc:	d048      	beq.n	8007660 <__gethex+0x3f4>
 80075ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d015      	beq.n	8007602 <__gethex+0x396>
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d017      	beq.n	800760a <__gethex+0x39e>
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d109      	bne.n	80075f2 <__gethex+0x386>
 80075de:	f01a 0f02 	tst.w	sl, #2
 80075e2:	d006      	beq.n	80075f2 <__gethex+0x386>
 80075e4:	f8d9 0000 	ldr.w	r0, [r9]
 80075e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80075ec:	f01a 0f01 	tst.w	sl, #1
 80075f0:	d10e      	bne.n	8007610 <__gethex+0x3a4>
 80075f2:	f047 0710 	orr.w	r7, r7, #16
 80075f6:	e033      	b.n	8007660 <__gethex+0x3f4>
 80075f8:	f04f 0a01 	mov.w	sl, #1
 80075fc:	e7d0      	b.n	80075a0 <__gethex+0x334>
 80075fe:	2701      	movs	r7, #1
 8007600:	e7e2      	b.n	80075c8 <__gethex+0x35c>
 8007602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007604:	f1c3 0301 	rsb	r3, r3, #1
 8007608:	9315      	str	r3, [sp, #84]	; 0x54
 800760a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0f0      	beq.n	80075f2 <__gethex+0x386>
 8007610:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007614:	f104 0314 	add.w	r3, r4, #20
 8007618:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800761c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007620:	f04f 0c00 	mov.w	ip, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f853 2b04 	ldr.w	r2, [r3], #4
 800762a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800762e:	d01c      	beq.n	800766a <__gethex+0x3fe>
 8007630:	3201      	adds	r2, #1
 8007632:	6002      	str	r2, [r0, #0]
 8007634:	2f02      	cmp	r7, #2
 8007636:	f104 0314 	add.w	r3, r4, #20
 800763a:	d13f      	bne.n	80076bc <__gethex+0x450>
 800763c:	f8d8 2000 	ldr.w	r2, [r8]
 8007640:	3a01      	subs	r2, #1
 8007642:	42b2      	cmp	r2, r6
 8007644:	d10a      	bne.n	800765c <__gethex+0x3f0>
 8007646:	1171      	asrs	r1, r6, #5
 8007648:	2201      	movs	r2, #1
 800764a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800764e:	f006 061f 	and.w	r6, r6, #31
 8007652:	fa02 f606 	lsl.w	r6, r2, r6
 8007656:	421e      	tst	r6, r3
 8007658:	bf18      	it	ne
 800765a:	4617      	movne	r7, r2
 800765c:	f047 0720 	orr.w	r7, r7, #32
 8007660:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007662:	601c      	str	r4, [r3, #0]
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	601d      	str	r5, [r3, #0]
 8007668:	e695      	b.n	8007396 <__gethex+0x12a>
 800766a:	4299      	cmp	r1, r3
 800766c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007670:	d8d8      	bhi.n	8007624 <__gethex+0x3b8>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	459b      	cmp	fp, r3
 8007676:	db19      	blt.n	80076ac <__gethex+0x440>
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	ee18 0a10 	vmov	r0, s16
 800767e:	3101      	adds	r1, #1
 8007680:	f000 f928 	bl	80078d4 <_Balloc>
 8007684:	4681      	mov	r9, r0
 8007686:	b918      	cbnz	r0, 8007690 <__gethex+0x424>
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <__gethex+0x488>)
 800768a:	4602      	mov	r2, r0
 800768c:	2184      	movs	r1, #132	; 0x84
 800768e:	e6a8      	b.n	80073e2 <__gethex+0x176>
 8007690:	6922      	ldr	r2, [r4, #16]
 8007692:	3202      	adds	r2, #2
 8007694:	f104 010c 	add.w	r1, r4, #12
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	300c      	adds	r0, #12
 800769c:	f000 f90c 	bl	80078b8 <memcpy>
 80076a0:	4621      	mov	r1, r4
 80076a2:	ee18 0a10 	vmov	r0, s16
 80076a6:	f000 f955 	bl	8007954 <_Bfree>
 80076aa:	464c      	mov	r4, r9
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076b4:	6122      	str	r2, [r4, #16]
 80076b6:	2201      	movs	r2, #1
 80076b8:	615a      	str	r2, [r3, #20]
 80076ba:	e7bb      	b.n	8007634 <__gethex+0x3c8>
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	455a      	cmp	r2, fp
 80076c0:	dd0b      	ble.n	80076da <__gethex+0x46e>
 80076c2:	2101      	movs	r1, #1
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7ff fd69 	bl	800719c <rshift>
 80076ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076ce:	3501      	adds	r5, #1
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	f6ff aed0 	blt.w	8007476 <__gethex+0x20a>
 80076d6:	2701      	movs	r7, #1
 80076d8:	e7c0      	b.n	800765c <__gethex+0x3f0>
 80076da:	f016 061f 	ands.w	r6, r6, #31
 80076de:	d0fa      	beq.n	80076d6 <__gethex+0x46a>
 80076e0:	4453      	add	r3, sl
 80076e2:	f1c6 0620 	rsb	r6, r6, #32
 80076e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80076ea:	f000 f9e5 	bl	8007ab8 <__hi0bits>
 80076ee:	42b0      	cmp	r0, r6
 80076f0:	dbe7      	blt.n	80076c2 <__gethex+0x456>
 80076f2:	e7f0      	b.n	80076d6 <__gethex+0x46a>
 80076f4:	0800a570 	.word	0x0800a570

080076f8 <L_shift>:
 80076f8:	f1c2 0208 	rsb	r2, r2, #8
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	b570      	push	{r4, r5, r6, lr}
 8007700:	f1c2 0620 	rsb	r6, r2, #32
 8007704:	6843      	ldr	r3, [r0, #4]
 8007706:	6804      	ldr	r4, [r0, #0]
 8007708:	fa03 f506 	lsl.w	r5, r3, r6
 800770c:	432c      	orrs	r4, r5
 800770e:	40d3      	lsrs	r3, r2
 8007710:	6004      	str	r4, [r0, #0]
 8007712:	f840 3f04 	str.w	r3, [r0, #4]!
 8007716:	4288      	cmp	r0, r1
 8007718:	d3f4      	bcc.n	8007704 <L_shift+0xc>
 800771a:	bd70      	pop	{r4, r5, r6, pc}

0800771c <__match>:
 800771c:	b530      	push	{r4, r5, lr}
 800771e:	6803      	ldr	r3, [r0, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007726:	b914      	cbnz	r4, 800772e <__match+0x12>
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	2001      	movs	r0, #1
 800772c:	bd30      	pop	{r4, r5, pc}
 800772e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007732:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007736:	2d19      	cmp	r5, #25
 8007738:	bf98      	it	ls
 800773a:	3220      	addls	r2, #32
 800773c:	42a2      	cmp	r2, r4
 800773e:	d0f0      	beq.n	8007722 <__match+0x6>
 8007740:	2000      	movs	r0, #0
 8007742:	e7f3      	b.n	800772c <__match+0x10>

08007744 <__hexnan>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	680b      	ldr	r3, [r1, #0]
 800774a:	115e      	asrs	r6, r3, #5
 800774c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007750:	f013 031f 	ands.w	r3, r3, #31
 8007754:	b087      	sub	sp, #28
 8007756:	bf18      	it	ne
 8007758:	3604      	addne	r6, #4
 800775a:	2500      	movs	r5, #0
 800775c:	1f37      	subs	r7, r6, #4
 800775e:	4690      	mov	r8, r2
 8007760:	6802      	ldr	r2, [r0, #0]
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	4682      	mov	sl, r0
 8007766:	f846 5c04 	str.w	r5, [r6, #-4]
 800776a:	46b9      	mov	r9, r7
 800776c:	463c      	mov	r4, r7
 800776e:	9502      	str	r5, [sp, #8]
 8007770:	46ab      	mov	fp, r5
 8007772:	7851      	ldrb	r1, [r2, #1]
 8007774:	1c53      	adds	r3, r2, #1
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	b341      	cbz	r1, 80077cc <__hexnan+0x88>
 800777a:	4608      	mov	r0, r1
 800777c:	9205      	str	r2, [sp, #20]
 800777e:	9104      	str	r1, [sp, #16]
 8007780:	f7ff fd5e 	bl	8007240 <__hexdig_fun>
 8007784:	2800      	cmp	r0, #0
 8007786:	d14f      	bne.n	8007828 <__hexnan+0xe4>
 8007788:	9904      	ldr	r1, [sp, #16]
 800778a:	9a05      	ldr	r2, [sp, #20]
 800778c:	2920      	cmp	r1, #32
 800778e:	d818      	bhi.n	80077c2 <__hexnan+0x7e>
 8007790:	9b02      	ldr	r3, [sp, #8]
 8007792:	459b      	cmp	fp, r3
 8007794:	dd13      	ble.n	80077be <__hexnan+0x7a>
 8007796:	454c      	cmp	r4, r9
 8007798:	d206      	bcs.n	80077a8 <__hexnan+0x64>
 800779a:	2d07      	cmp	r5, #7
 800779c:	dc04      	bgt.n	80077a8 <__hexnan+0x64>
 800779e:	462a      	mov	r2, r5
 80077a0:	4649      	mov	r1, r9
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff ffa8 	bl	80076f8 <L_shift>
 80077a8:	4544      	cmp	r4, r8
 80077aa:	d950      	bls.n	800784e <__hexnan+0x10a>
 80077ac:	2300      	movs	r3, #0
 80077ae:	f1a4 0904 	sub.w	r9, r4, #4
 80077b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80077b6:	f8cd b008 	str.w	fp, [sp, #8]
 80077ba:	464c      	mov	r4, r9
 80077bc:	461d      	mov	r5, r3
 80077be:	9a03      	ldr	r2, [sp, #12]
 80077c0:	e7d7      	b.n	8007772 <__hexnan+0x2e>
 80077c2:	2929      	cmp	r1, #41	; 0x29
 80077c4:	d156      	bne.n	8007874 <__hexnan+0x130>
 80077c6:	3202      	adds	r2, #2
 80077c8:	f8ca 2000 	str.w	r2, [sl]
 80077cc:	f1bb 0f00 	cmp.w	fp, #0
 80077d0:	d050      	beq.n	8007874 <__hexnan+0x130>
 80077d2:	454c      	cmp	r4, r9
 80077d4:	d206      	bcs.n	80077e4 <__hexnan+0xa0>
 80077d6:	2d07      	cmp	r5, #7
 80077d8:	dc04      	bgt.n	80077e4 <__hexnan+0xa0>
 80077da:	462a      	mov	r2, r5
 80077dc:	4649      	mov	r1, r9
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff ff8a 	bl	80076f8 <L_shift>
 80077e4:	4544      	cmp	r4, r8
 80077e6:	d934      	bls.n	8007852 <__hexnan+0x10e>
 80077e8:	f1a8 0204 	sub.w	r2, r8, #4
 80077ec:	4623      	mov	r3, r4
 80077ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80077f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80077f6:	429f      	cmp	r7, r3
 80077f8:	d2f9      	bcs.n	80077ee <__hexnan+0xaa>
 80077fa:	1b3b      	subs	r3, r7, r4
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	3304      	adds	r3, #4
 8007802:	3401      	adds	r4, #1
 8007804:	3e03      	subs	r6, #3
 8007806:	42b4      	cmp	r4, r6
 8007808:	bf88      	it	hi
 800780a:	2304      	movhi	r3, #4
 800780c:	4443      	add	r3, r8
 800780e:	2200      	movs	r2, #0
 8007810:	f843 2b04 	str.w	r2, [r3], #4
 8007814:	429f      	cmp	r7, r3
 8007816:	d2fb      	bcs.n	8007810 <__hexnan+0xcc>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	b91b      	cbnz	r3, 8007824 <__hexnan+0xe0>
 800781c:	4547      	cmp	r7, r8
 800781e:	d127      	bne.n	8007870 <__hexnan+0x12c>
 8007820:	2301      	movs	r3, #1
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	2005      	movs	r0, #5
 8007826:	e026      	b.n	8007876 <__hexnan+0x132>
 8007828:	3501      	adds	r5, #1
 800782a:	2d08      	cmp	r5, #8
 800782c:	f10b 0b01 	add.w	fp, fp, #1
 8007830:	dd06      	ble.n	8007840 <__hexnan+0xfc>
 8007832:	4544      	cmp	r4, r8
 8007834:	d9c3      	bls.n	80077be <__hexnan+0x7a>
 8007836:	2300      	movs	r3, #0
 8007838:	f844 3c04 	str.w	r3, [r4, #-4]
 800783c:	2501      	movs	r5, #1
 800783e:	3c04      	subs	r4, #4
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	f000 000f 	and.w	r0, r0, #15
 8007846:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800784a:	6022      	str	r2, [r4, #0]
 800784c:	e7b7      	b.n	80077be <__hexnan+0x7a>
 800784e:	2508      	movs	r5, #8
 8007850:	e7b5      	b.n	80077be <__hexnan+0x7a>
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0df      	beq.n	8007818 <__hexnan+0xd4>
 8007858:	f04f 32ff 	mov.w	r2, #4294967295
 800785c:	f1c3 0320 	rsb	r3, r3, #32
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007868:	401a      	ands	r2, r3
 800786a:	f846 2c04 	str.w	r2, [r6, #-4]
 800786e:	e7d3      	b.n	8007818 <__hexnan+0xd4>
 8007870:	3f04      	subs	r7, #4
 8007872:	e7d1      	b.n	8007818 <__hexnan+0xd4>
 8007874:	2004      	movs	r0, #4
 8007876:	b007      	add	sp, #28
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800787c <_localeconv_r>:
 800787c:	4800      	ldr	r0, [pc, #0]	; (8007880 <_localeconv_r+0x4>)
 800787e:	4770      	bx	lr
 8007880:	2000018c 	.word	0x2000018c

08007884 <malloc>:
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <malloc+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f000 bd67 	b.w	800835c <_malloc_r>
 800788e:	bf00      	nop
 8007890:	20000034 	.word	0x20000034

08007894 <__ascii_mbtowc>:
 8007894:	b082      	sub	sp, #8
 8007896:	b901      	cbnz	r1, 800789a <__ascii_mbtowc+0x6>
 8007898:	a901      	add	r1, sp, #4
 800789a:	b142      	cbz	r2, 80078ae <__ascii_mbtowc+0x1a>
 800789c:	b14b      	cbz	r3, 80078b2 <__ascii_mbtowc+0x1e>
 800789e:	7813      	ldrb	r3, [r2, #0]
 80078a0:	600b      	str	r3, [r1, #0]
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	1e10      	subs	r0, r2, #0
 80078a6:	bf18      	it	ne
 80078a8:	2001      	movne	r0, #1
 80078aa:	b002      	add	sp, #8
 80078ac:	4770      	bx	lr
 80078ae:	4610      	mov	r0, r2
 80078b0:	e7fb      	b.n	80078aa <__ascii_mbtowc+0x16>
 80078b2:	f06f 0001 	mvn.w	r0, #1
 80078b6:	e7f8      	b.n	80078aa <__ascii_mbtowc+0x16>

080078b8 <memcpy>:
 80078b8:	440a      	add	r2, r1
 80078ba:	4291      	cmp	r1, r2
 80078bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c0:	d100      	bne.n	80078c4 <memcpy+0xc>
 80078c2:	4770      	bx	lr
 80078c4:	b510      	push	{r4, lr}
 80078c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d1f9      	bne.n	80078c6 <memcpy+0xe>
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <_Balloc>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078d8:	4604      	mov	r4, r0
 80078da:	460d      	mov	r5, r1
 80078dc:	b976      	cbnz	r6, 80078fc <_Balloc+0x28>
 80078de:	2010      	movs	r0, #16
 80078e0:	f7ff ffd0 	bl	8007884 <malloc>
 80078e4:	4602      	mov	r2, r0
 80078e6:	6260      	str	r0, [r4, #36]	; 0x24
 80078e8:	b920      	cbnz	r0, 80078f4 <_Balloc+0x20>
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <_Balloc+0x78>)
 80078ec:	4818      	ldr	r0, [pc, #96]	; (8007950 <_Balloc+0x7c>)
 80078ee:	2166      	movs	r1, #102	; 0x66
 80078f0:	f000 ff40 	bl	8008774 <__assert_func>
 80078f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f8:	6006      	str	r6, [r0, #0]
 80078fa:	60c6      	str	r6, [r0, #12]
 80078fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078fe:	68f3      	ldr	r3, [r6, #12]
 8007900:	b183      	cbz	r3, 8007924 <_Balloc+0x50>
 8007902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800790a:	b9b8      	cbnz	r0, 800793c <_Balloc+0x68>
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f605 	lsl.w	r6, r1, r5
 8007912:	1d72      	adds	r2, r6, #5
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fc9d 	bl	8008256 <_calloc_r>
 800791c:	b160      	cbz	r0, 8007938 <_Balloc+0x64>
 800791e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007922:	e00e      	b.n	8007942 <_Balloc+0x6e>
 8007924:	2221      	movs	r2, #33	; 0x21
 8007926:	2104      	movs	r1, #4
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fc94 	bl	8008256 <_calloc_r>
 800792e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007930:	60f0      	str	r0, [r6, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e4      	bne.n	8007902 <_Balloc+0x2e>
 8007938:	2000      	movs	r0, #0
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	6802      	ldr	r2, [r0, #0]
 800793e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007942:	2300      	movs	r3, #0
 8007944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007948:	e7f7      	b.n	800793a <_Balloc+0x66>
 800794a:	bf00      	nop
 800794c:	0800a4fe 	.word	0x0800a4fe
 8007950:	0800a5fc 	.word	0x0800a5fc

08007954 <_Bfree>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b976      	cbnz	r6, 800797c <_Bfree+0x28>
 800795e:	2010      	movs	r0, #16
 8007960:	f7ff ff90 	bl	8007884 <malloc>
 8007964:	4602      	mov	r2, r0
 8007966:	6268      	str	r0, [r5, #36]	; 0x24
 8007968:	b920      	cbnz	r0, 8007974 <_Bfree+0x20>
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <_Bfree+0x3c>)
 800796c:	4809      	ldr	r0, [pc, #36]	; (8007994 <_Bfree+0x40>)
 800796e:	218a      	movs	r1, #138	; 0x8a
 8007970:	f000 ff00 	bl	8008774 <__assert_func>
 8007974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007978:	6006      	str	r6, [r0, #0]
 800797a:	60c6      	str	r6, [r0, #12]
 800797c:	b13c      	cbz	r4, 800798e <_Bfree+0x3a>
 800797e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007980:	6862      	ldr	r2, [r4, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007988:	6021      	str	r1, [r4, #0]
 800798a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	0800a4fe 	.word	0x0800a4fe
 8007994:	0800a5fc 	.word	0x0800a5fc

08007998 <__multadd>:
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	690d      	ldr	r5, [r1, #16]
 800799e:	4607      	mov	r7, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	461e      	mov	r6, r3
 80079a4:	f101 0c14 	add.w	ip, r1, #20
 80079a8:	2000      	movs	r0, #0
 80079aa:	f8dc 3000 	ldr.w	r3, [ip]
 80079ae:	b299      	uxth	r1, r3
 80079b0:	fb02 6101 	mla	r1, r2, r1, r6
 80079b4:	0c1e      	lsrs	r6, r3, #16
 80079b6:	0c0b      	lsrs	r3, r1, #16
 80079b8:	fb02 3306 	mla	r3, r2, r6, r3
 80079bc:	b289      	uxth	r1, r1
 80079be:	3001      	adds	r0, #1
 80079c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079c4:	4285      	cmp	r5, r0
 80079c6:	f84c 1b04 	str.w	r1, [ip], #4
 80079ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ce:	dcec      	bgt.n	80079aa <__multadd+0x12>
 80079d0:	b30e      	cbz	r6, 8007a16 <__multadd+0x7e>
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	dc19      	bgt.n	8007a0c <__multadd+0x74>
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	4638      	mov	r0, r7
 80079dc:	3101      	adds	r1, #1
 80079de:	f7ff ff79 	bl	80078d4 <_Balloc>
 80079e2:	4680      	mov	r8, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__multadd+0x5a>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <__multadd+0x84>)
 80079ea:	480d      	ldr	r0, [pc, #52]	; (8007a20 <__multadd+0x88>)
 80079ec:	21b5      	movs	r1, #181	; 0xb5
 80079ee:	f000 fec1 	bl	8008774 <__assert_func>
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	3202      	adds	r2, #2
 80079f6:	f104 010c 	add.w	r1, r4, #12
 80079fa:	0092      	lsls	r2, r2, #2
 80079fc:	300c      	adds	r0, #12
 80079fe:	f7ff ff5b 	bl	80078b8 <memcpy>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ffa5 	bl	8007954 <_Bfree>
 8007a0a:	4644      	mov	r4, r8
 8007a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a10:	3501      	adds	r5, #1
 8007a12:	615e      	str	r6, [r3, #20]
 8007a14:	6125      	str	r5, [r4, #16]
 8007a16:	4620      	mov	r0, r4
 8007a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1c:	0800a570 	.word	0x0800a570
 8007a20:	0800a5fc 	.word	0x0800a5fc

08007a24 <__s2b>:
 8007a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a28:	460c      	mov	r4, r1
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	461f      	mov	r7, r3
 8007a2e:	2209      	movs	r2, #9
 8007a30:	3308      	adds	r3, #8
 8007a32:	4606      	mov	r6, r0
 8007a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	db09      	blt.n	8007a54 <__s2b+0x30>
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7ff ff47 	bl	80078d4 <_Balloc>
 8007a46:	b940      	cbnz	r0, 8007a5a <__s2b+0x36>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	4b19      	ldr	r3, [pc, #100]	; (8007ab0 <__s2b+0x8c>)
 8007a4c:	4819      	ldr	r0, [pc, #100]	; (8007ab4 <__s2b+0x90>)
 8007a4e:	21ce      	movs	r1, #206	; 0xce
 8007a50:	f000 fe90 	bl	8008774 <__assert_func>
 8007a54:	0052      	lsls	r2, r2, #1
 8007a56:	3101      	adds	r1, #1
 8007a58:	e7f0      	b.n	8007a3c <__s2b+0x18>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	6143      	str	r3, [r0, #20]
 8007a5e:	2d09      	cmp	r5, #9
 8007a60:	f04f 0301 	mov.w	r3, #1
 8007a64:	6103      	str	r3, [r0, #16]
 8007a66:	dd16      	ble.n	8007a96 <__s2b+0x72>
 8007a68:	f104 0909 	add.w	r9, r4, #9
 8007a6c:	46c8      	mov	r8, r9
 8007a6e:	442c      	add	r4, r5
 8007a70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a74:	4601      	mov	r1, r0
 8007a76:	3b30      	subs	r3, #48	; 0x30
 8007a78:	220a      	movs	r2, #10
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ff8c 	bl	8007998 <__multadd>
 8007a80:	45a0      	cmp	r8, r4
 8007a82:	d1f5      	bne.n	8007a70 <__s2b+0x4c>
 8007a84:	f1a5 0408 	sub.w	r4, r5, #8
 8007a88:	444c      	add	r4, r9
 8007a8a:	1b2d      	subs	r5, r5, r4
 8007a8c:	1963      	adds	r3, r4, r5
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	db04      	blt.n	8007a9c <__s2b+0x78>
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	340a      	adds	r4, #10
 8007a98:	2509      	movs	r5, #9
 8007a9a:	e7f6      	b.n	8007a8a <__s2b+0x66>
 8007a9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007aa0:	4601      	mov	r1, r0
 8007aa2:	3b30      	subs	r3, #48	; 0x30
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff ff76 	bl	8007998 <__multadd>
 8007aac:	e7ee      	b.n	8007a8c <__s2b+0x68>
 8007aae:	bf00      	nop
 8007ab0:	0800a570 	.word	0x0800a570
 8007ab4:	0800a5fc 	.word	0x0800a5fc

08007ab8 <__hi0bits>:
 8007ab8:	0c03      	lsrs	r3, r0, #16
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	b9d3      	cbnz	r3, 8007af4 <__hi0bits+0x3c>
 8007abe:	0400      	lsls	r0, r0, #16
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	0200      	lsleq	r0, r0, #8
 8007aca:	3308      	addeq	r3, #8
 8007acc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ad0:	bf04      	itt	eq
 8007ad2:	0100      	lsleq	r0, r0, #4
 8007ad4:	3304      	addeq	r3, #4
 8007ad6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ada:	bf04      	itt	eq
 8007adc:	0080      	lsleq	r0, r0, #2
 8007ade:	3302      	addeq	r3, #2
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	db05      	blt.n	8007af0 <__hi0bits+0x38>
 8007ae4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ae8:	f103 0301 	add.w	r3, r3, #1
 8007aec:	bf08      	it	eq
 8007aee:	2320      	moveq	r3, #32
 8007af0:	4618      	mov	r0, r3
 8007af2:	4770      	bx	lr
 8007af4:	2300      	movs	r3, #0
 8007af6:	e7e4      	b.n	8007ac2 <__hi0bits+0xa>

08007af8 <__lo0bits>:
 8007af8:	6803      	ldr	r3, [r0, #0]
 8007afa:	f013 0207 	ands.w	r2, r3, #7
 8007afe:	4601      	mov	r1, r0
 8007b00:	d00b      	beq.n	8007b1a <__lo0bits+0x22>
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d423      	bmi.n	8007b4e <__lo0bits+0x56>
 8007b06:	0798      	lsls	r0, r3, #30
 8007b08:	bf49      	itett	mi
 8007b0a:	085b      	lsrmi	r3, r3, #1
 8007b0c:	089b      	lsrpl	r3, r3, #2
 8007b0e:	2001      	movmi	r0, #1
 8007b10:	600b      	strmi	r3, [r1, #0]
 8007b12:	bf5c      	itt	pl
 8007b14:	600b      	strpl	r3, [r1, #0]
 8007b16:	2002      	movpl	r0, #2
 8007b18:	4770      	bx	lr
 8007b1a:	b298      	uxth	r0, r3
 8007b1c:	b9a8      	cbnz	r0, 8007b4a <__lo0bits+0x52>
 8007b1e:	0c1b      	lsrs	r3, r3, #16
 8007b20:	2010      	movs	r0, #16
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	b90a      	cbnz	r2, 8007b2a <__lo0bits+0x32>
 8007b26:	3008      	adds	r0, #8
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	071a      	lsls	r2, r3, #28
 8007b2c:	bf04      	itt	eq
 8007b2e:	091b      	lsreq	r3, r3, #4
 8007b30:	3004      	addeq	r0, #4
 8007b32:	079a      	lsls	r2, r3, #30
 8007b34:	bf04      	itt	eq
 8007b36:	089b      	lsreq	r3, r3, #2
 8007b38:	3002      	addeq	r0, #2
 8007b3a:	07da      	lsls	r2, r3, #31
 8007b3c:	d403      	bmi.n	8007b46 <__lo0bits+0x4e>
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	f100 0001 	add.w	r0, r0, #1
 8007b44:	d005      	beq.n	8007b52 <__lo0bits+0x5a>
 8007b46:	600b      	str	r3, [r1, #0]
 8007b48:	4770      	bx	lr
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	e7e9      	b.n	8007b22 <__lo0bits+0x2a>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	4770      	bx	lr
 8007b52:	2020      	movs	r0, #32
 8007b54:	4770      	bx	lr
	...

08007b58 <__i2b>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	f7ff feb9 	bl	80078d4 <_Balloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <__i2b+0x1a>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <__i2b+0x24>)
 8007b68:	4805      	ldr	r0, [pc, #20]	; (8007b80 <__i2b+0x28>)
 8007b6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b6e:	f000 fe01 	bl	8008774 <__assert_func>
 8007b72:	2301      	movs	r3, #1
 8007b74:	6144      	str	r4, [r0, #20]
 8007b76:	6103      	str	r3, [r0, #16]
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	0800a570 	.word	0x0800a570
 8007b80:	0800a5fc 	.word	0x0800a5fc

08007b84 <__multiply>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4691      	mov	r9, r2
 8007b8a:	690a      	ldr	r2, [r1, #16]
 8007b8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	bfb8      	it	lt
 8007b94:	460b      	movlt	r3, r1
 8007b96:	460c      	mov	r4, r1
 8007b98:	bfbc      	itt	lt
 8007b9a:	464c      	movlt	r4, r9
 8007b9c:	4699      	movlt	r9, r3
 8007b9e:	6927      	ldr	r7, [r4, #16]
 8007ba0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	6861      	ldr	r1, [r4, #4]
 8007ba8:	eb07 060a 	add.w	r6, r7, sl
 8007bac:	42b3      	cmp	r3, r6
 8007bae:	b085      	sub	sp, #20
 8007bb0:	bfb8      	it	lt
 8007bb2:	3101      	addlt	r1, #1
 8007bb4:	f7ff fe8e 	bl	80078d4 <_Balloc>
 8007bb8:	b930      	cbnz	r0, 8007bc8 <__multiply+0x44>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <__multiply+0x14c>)
 8007bbe:	4845      	ldr	r0, [pc, #276]	; (8007cd4 <__multiply+0x150>)
 8007bc0:	f240 115d 	movw	r1, #349	; 0x15d
 8007bc4:	f000 fdd6 	bl	8008774 <__assert_func>
 8007bc8:	f100 0514 	add.w	r5, r0, #20
 8007bcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4543      	cmp	r3, r8
 8007bd6:	d321      	bcc.n	8007c1c <__multiply+0x98>
 8007bd8:	f104 0314 	add.w	r3, r4, #20
 8007bdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007be0:	f109 0314 	add.w	r3, r9, #20
 8007be4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007be8:	9202      	str	r2, [sp, #8]
 8007bea:	1b3a      	subs	r2, r7, r4
 8007bec:	3a15      	subs	r2, #21
 8007bee:	f022 0203 	bic.w	r2, r2, #3
 8007bf2:	3204      	adds	r2, #4
 8007bf4:	f104 0115 	add.w	r1, r4, #21
 8007bf8:	428f      	cmp	r7, r1
 8007bfa:	bf38      	it	cc
 8007bfc:	2204      	movcc	r2, #4
 8007bfe:	9201      	str	r2, [sp, #4]
 8007c00:	9a02      	ldr	r2, [sp, #8]
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d80c      	bhi.n	8007c22 <__multiply+0x9e>
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	dd03      	ble.n	8007c14 <__multiply+0x90>
 8007c0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d05a      	beq.n	8007cca <__multiply+0x146>
 8007c14:	6106      	str	r6, [r0, #16]
 8007c16:	b005      	add	sp, #20
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	f843 2b04 	str.w	r2, [r3], #4
 8007c20:	e7d8      	b.n	8007bd4 <__multiply+0x50>
 8007c22:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c26:	f1ba 0f00 	cmp.w	sl, #0
 8007c2a:	d024      	beq.n	8007c76 <__multiply+0xf2>
 8007c2c:	f104 0e14 	add.w	lr, r4, #20
 8007c30:	46a9      	mov	r9, r5
 8007c32:	f04f 0c00 	mov.w	ip, #0
 8007c36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c3a:	f8d9 1000 	ldr.w	r1, [r9]
 8007c3e:	fa1f fb82 	uxth.w	fp, r2
 8007c42:	b289      	uxth	r1, r1
 8007c44:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c50:	4461      	add	r1, ip
 8007c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c56:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c5e:	b289      	uxth	r1, r1
 8007c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c64:	4577      	cmp	r7, lr
 8007c66:	f849 1b04 	str.w	r1, [r9], #4
 8007c6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c6e:	d8e2      	bhi.n	8007c36 <__multiply+0xb2>
 8007c70:	9a01      	ldr	r2, [sp, #4]
 8007c72:	f845 c002 	str.w	ip, [r5, r2]
 8007c76:	9a03      	ldr	r2, [sp, #12]
 8007c78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	d020      	beq.n	8007cc6 <__multiply+0x142>
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	f104 0c14 	add.w	ip, r4, #20
 8007c8a:	46ae      	mov	lr, r5
 8007c8c:	f04f 0a00 	mov.w	sl, #0
 8007c90:	f8bc b000 	ldrh.w	fp, [ip]
 8007c94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c98:	fb09 220b 	mla	r2, r9, fp, r2
 8007c9c:	4492      	add	sl, r2
 8007c9e:	b289      	uxth	r1, r1
 8007ca0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ca4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ca8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cac:	f8be 1000 	ldrh.w	r1, [lr]
 8007cb0:	0c12      	lsrs	r2, r2, #16
 8007cb2:	fb09 1102 	mla	r1, r9, r2, r1
 8007cb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007cba:	4567      	cmp	r7, ip
 8007cbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cc0:	d8e6      	bhi.n	8007c90 <__multiply+0x10c>
 8007cc2:	9a01      	ldr	r2, [sp, #4]
 8007cc4:	50a9      	str	r1, [r5, r2]
 8007cc6:	3504      	adds	r5, #4
 8007cc8:	e79a      	b.n	8007c00 <__multiply+0x7c>
 8007cca:	3e01      	subs	r6, #1
 8007ccc:	e79c      	b.n	8007c08 <__multiply+0x84>
 8007cce:	bf00      	nop
 8007cd0:	0800a570 	.word	0x0800a570
 8007cd4:	0800a5fc 	.word	0x0800a5fc

08007cd8 <__pow5mult>:
 8007cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	4615      	mov	r5, r2
 8007cde:	f012 0203 	ands.w	r2, r2, #3
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460f      	mov	r7, r1
 8007ce6:	d007      	beq.n	8007cf8 <__pow5mult+0x20>
 8007ce8:	4c25      	ldr	r4, [pc, #148]	; (8007d80 <__pow5mult+0xa8>)
 8007cea:	3a01      	subs	r2, #1
 8007cec:	2300      	movs	r3, #0
 8007cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cf2:	f7ff fe51 	bl	8007998 <__multadd>
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	10ad      	asrs	r5, r5, #2
 8007cfa:	d03d      	beq.n	8007d78 <__pow5mult+0xa0>
 8007cfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cfe:	b97c      	cbnz	r4, 8007d20 <__pow5mult+0x48>
 8007d00:	2010      	movs	r0, #16
 8007d02:	f7ff fdbf 	bl	8007884 <malloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	6270      	str	r0, [r6, #36]	; 0x24
 8007d0a:	b928      	cbnz	r0, 8007d18 <__pow5mult+0x40>
 8007d0c:	4b1d      	ldr	r3, [pc, #116]	; (8007d84 <__pow5mult+0xac>)
 8007d0e:	481e      	ldr	r0, [pc, #120]	; (8007d88 <__pow5mult+0xb0>)
 8007d10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d14:	f000 fd2e 	bl	8008774 <__assert_func>
 8007d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d1c:	6004      	str	r4, [r0, #0]
 8007d1e:	60c4      	str	r4, [r0, #12]
 8007d20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d28:	b94c      	cbnz	r4, 8007d3e <__pow5mult+0x66>
 8007d2a:	f240 2171 	movw	r1, #625	; 0x271
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff ff12 	bl	8007b58 <__i2b>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	f04f 0900 	mov.w	r9, #0
 8007d42:	07eb      	lsls	r3, r5, #31
 8007d44:	d50a      	bpl.n	8007d5c <__pow5mult+0x84>
 8007d46:	4639      	mov	r1, r7
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff ff1a 	bl	8007b84 <__multiply>
 8007d50:	4639      	mov	r1, r7
 8007d52:	4680      	mov	r8, r0
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff fdfd 	bl	8007954 <_Bfree>
 8007d5a:	4647      	mov	r7, r8
 8007d5c:	106d      	asrs	r5, r5, #1
 8007d5e:	d00b      	beq.n	8007d78 <__pow5mult+0xa0>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	b938      	cbnz	r0, 8007d74 <__pow5mult+0x9c>
 8007d64:	4622      	mov	r2, r4
 8007d66:	4621      	mov	r1, r4
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff ff0b 	bl	8007b84 <__multiply>
 8007d6e:	6020      	str	r0, [r4, #0]
 8007d70:	f8c0 9000 	str.w	r9, [r0]
 8007d74:	4604      	mov	r4, r0
 8007d76:	e7e4      	b.n	8007d42 <__pow5mult+0x6a>
 8007d78:	4638      	mov	r0, r7
 8007d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7e:	bf00      	nop
 8007d80:	0800a748 	.word	0x0800a748
 8007d84:	0800a4fe 	.word	0x0800a4fe
 8007d88:	0800a5fc 	.word	0x0800a5fc

08007d8c <__lshift>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	6849      	ldr	r1, [r1, #4]
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	4691      	mov	r9, r2
 8007da0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007da4:	f108 0601 	add.w	r6, r8, #1
 8007da8:	42b3      	cmp	r3, r6
 8007daa:	db0b      	blt.n	8007dc4 <__lshift+0x38>
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fd91 	bl	80078d4 <_Balloc>
 8007db2:	4605      	mov	r5, r0
 8007db4:	b948      	cbnz	r0, 8007dca <__lshift+0x3e>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <__lshift+0xd8>)
 8007dba:	482b      	ldr	r0, [pc, #172]	; (8007e68 <__lshift+0xdc>)
 8007dbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dc0:	f000 fcd8 	bl	8008774 <__assert_func>
 8007dc4:	3101      	adds	r1, #1
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	e7ee      	b.n	8007da8 <__lshift+0x1c>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f100 0114 	add.w	r1, r0, #20
 8007dd0:	f100 0210 	add.w	r2, r0, #16
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	4553      	cmp	r3, sl
 8007dd8:	db37      	blt.n	8007e4a <__lshift+0xbe>
 8007dda:	6920      	ldr	r0, [r4, #16]
 8007ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007de0:	f104 0314 	add.w	r3, r4, #20
 8007de4:	f019 091f 	ands.w	r9, r9, #31
 8007de8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007df0:	d02f      	beq.n	8007e52 <__lshift+0xc6>
 8007df2:	f1c9 0e20 	rsb	lr, r9, #32
 8007df6:	468a      	mov	sl, r1
 8007df8:	f04f 0c00 	mov.w	ip, #0
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	fa02 f209 	lsl.w	r2, r2, r9
 8007e02:	ea42 020c 	orr.w	r2, r2, ip
 8007e06:	f84a 2b04 	str.w	r2, [sl], #4
 8007e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0e:	4298      	cmp	r0, r3
 8007e10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e14:	d8f2      	bhi.n	8007dfc <__lshift+0x70>
 8007e16:	1b03      	subs	r3, r0, r4
 8007e18:	3b15      	subs	r3, #21
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	3304      	adds	r3, #4
 8007e20:	f104 0215 	add.w	r2, r4, #21
 8007e24:	4290      	cmp	r0, r2
 8007e26:	bf38      	it	cc
 8007e28:	2304      	movcc	r3, #4
 8007e2a:	f841 c003 	str.w	ip, [r1, r3]
 8007e2e:	f1bc 0f00 	cmp.w	ip, #0
 8007e32:	d001      	beq.n	8007e38 <__lshift+0xac>
 8007e34:	f108 0602 	add.w	r6, r8, #2
 8007e38:	3e01      	subs	r6, #1
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	612e      	str	r6, [r5, #16]
 8007e3e:	4621      	mov	r1, r4
 8007e40:	f7ff fd88 	bl	8007954 <_Bfree>
 8007e44:	4628      	mov	r0, r5
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e4e:	3301      	adds	r3, #1
 8007e50:	e7c1      	b.n	8007dd6 <__lshift+0x4a>
 8007e52:	3904      	subs	r1, #4
 8007e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e5c:	4298      	cmp	r0, r3
 8007e5e:	d8f9      	bhi.n	8007e54 <__lshift+0xc8>
 8007e60:	e7ea      	b.n	8007e38 <__lshift+0xac>
 8007e62:	bf00      	nop
 8007e64:	0800a570 	.word	0x0800a570
 8007e68:	0800a5fc 	.word	0x0800a5fc

08007e6c <__mcmp>:
 8007e6c:	b530      	push	{r4, r5, lr}
 8007e6e:	6902      	ldr	r2, [r0, #16]
 8007e70:	690c      	ldr	r4, [r1, #16]
 8007e72:	1b12      	subs	r2, r2, r4
 8007e74:	d10e      	bne.n	8007e94 <__mcmp+0x28>
 8007e76:	f100 0314 	add.w	r3, r0, #20
 8007e7a:	3114      	adds	r1, #20
 8007e7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e8c:	42a5      	cmp	r5, r4
 8007e8e:	d003      	beq.n	8007e98 <__mcmp+0x2c>
 8007e90:	d305      	bcc.n	8007e9e <__mcmp+0x32>
 8007e92:	2201      	movs	r2, #1
 8007e94:	4610      	mov	r0, r2
 8007e96:	bd30      	pop	{r4, r5, pc}
 8007e98:	4283      	cmp	r3, r0
 8007e9a:	d3f3      	bcc.n	8007e84 <__mcmp+0x18>
 8007e9c:	e7fa      	b.n	8007e94 <__mcmp+0x28>
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	e7f7      	b.n	8007e94 <__mcmp+0x28>

08007ea4 <__mdiff>:
 8007ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	4606      	mov	r6, r0
 8007eac:	4611      	mov	r1, r2
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4690      	mov	r8, r2
 8007eb2:	f7ff ffdb 	bl	8007e6c <__mcmp>
 8007eb6:	1e05      	subs	r5, r0, #0
 8007eb8:	d110      	bne.n	8007edc <__mdiff+0x38>
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff fd09 	bl	80078d4 <_Balloc>
 8007ec2:	b930      	cbnz	r0, 8007ed2 <__mdiff+0x2e>
 8007ec4:	4b3a      	ldr	r3, [pc, #232]	; (8007fb0 <__mdiff+0x10c>)
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	f240 2132 	movw	r1, #562	; 0x232
 8007ecc:	4839      	ldr	r0, [pc, #228]	; (8007fb4 <__mdiff+0x110>)
 8007ece:	f000 fc51 	bl	8008774 <__assert_func>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	bfa4      	itt	ge
 8007ede:	4643      	movge	r3, r8
 8007ee0:	46a0      	movge	r8, r4
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ee8:	bfa6      	itte	ge
 8007eea:	461c      	movge	r4, r3
 8007eec:	2500      	movge	r5, #0
 8007eee:	2501      	movlt	r5, #1
 8007ef0:	f7ff fcf0 	bl	80078d4 <_Balloc>
 8007ef4:	b920      	cbnz	r0, 8007f00 <__mdiff+0x5c>
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <__mdiff+0x10c>)
 8007ef8:	4602      	mov	r2, r0
 8007efa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007efe:	e7e5      	b.n	8007ecc <__mdiff+0x28>
 8007f00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f04:	6926      	ldr	r6, [r4, #16]
 8007f06:	60c5      	str	r5, [r0, #12]
 8007f08:	f104 0914 	add.w	r9, r4, #20
 8007f0c:	f108 0514 	add.w	r5, r8, #20
 8007f10:	f100 0e14 	add.w	lr, r0, #20
 8007f14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f1c:	f108 0210 	add.w	r2, r8, #16
 8007f20:	46f2      	mov	sl, lr
 8007f22:	2100      	movs	r1, #0
 8007f24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f2c:	fa1f f883 	uxth.w	r8, r3
 8007f30:	fa11 f18b 	uxtah	r1, r1, fp
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	eba1 0808 	sub.w	r8, r1, r8
 8007f3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f42:	fa1f f888 	uxth.w	r8, r8
 8007f46:	1419      	asrs	r1, r3, #16
 8007f48:	454e      	cmp	r6, r9
 8007f4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f4e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f52:	d8e7      	bhi.n	8007f24 <__mdiff+0x80>
 8007f54:	1b33      	subs	r3, r6, r4
 8007f56:	3b15      	subs	r3, #21
 8007f58:	f023 0303 	bic.w	r3, r3, #3
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	3415      	adds	r4, #21
 8007f60:	42a6      	cmp	r6, r4
 8007f62:	bf38      	it	cc
 8007f64:	2304      	movcc	r3, #4
 8007f66:	441d      	add	r5, r3
 8007f68:	4473      	add	r3, lr
 8007f6a:	469e      	mov	lr, r3
 8007f6c:	462e      	mov	r6, r5
 8007f6e:	4566      	cmp	r6, ip
 8007f70:	d30e      	bcc.n	8007f90 <__mdiff+0xec>
 8007f72:	f10c 0203 	add.w	r2, ip, #3
 8007f76:	1b52      	subs	r2, r2, r5
 8007f78:	f022 0203 	bic.w	r2, r2, #3
 8007f7c:	3d03      	subs	r5, #3
 8007f7e:	45ac      	cmp	ip, r5
 8007f80:	bf38      	it	cc
 8007f82:	2200      	movcc	r2, #0
 8007f84:	441a      	add	r2, r3
 8007f86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f8a:	b17b      	cbz	r3, 8007fac <__mdiff+0x108>
 8007f8c:	6107      	str	r7, [r0, #16]
 8007f8e:	e7a3      	b.n	8007ed8 <__mdiff+0x34>
 8007f90:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f94:	fa11 f288 	uxtah	r2, r1, r8
 8007f98:	1414      	asrs	r4, r2, #16
 8007f9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f9e:	b292      	uxth	r2, r2
 8007fa0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fa4:	f84e 2b04 	str.w	r2, [lr], #4
 8007fa8:	1421      	asrs	r1, r4, #16
 8007faa:	e7e0      	b.n	8007f6e <__mdiff+0xca>
 8007fac:	3f01      	subs	r7, #1
 8007fae:	e7ea      	b.n	8007f86 <__mdiff+0xe2>
 8007fb0:	0800a570 	.word	0x0800a570
 8007fb4:	0800a5fc 	.word	0x0800a5fc

08007fb8 <__ulp>:
 8007fb8:	b082      	sub	sp, #8
 8007fba:	ed8d 0b00 	vstr	d0, [sp]
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	4912      	ldr	r1, [pc, #72]	; (800800c <__ulp+0x54>)
 8007fc2:	4019      	ands	r1, r3
 8007fc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	dd05      	ble.n	8007fd8 <__ulp+0x20>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	ec43 2b10 	vmov	d0, r2, r3
 8007fd4:	b002      	add	sp, #8
 8007fd6:	4770      	bx	lr
 8007fd8:	4249      	negs	r1, r1
 8007fda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007fde:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	da04      	bge.n	8007ff6 <__ulp+0x3e>
 8007fec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ff0:	fa41 f300 	asr.w	r3, r1, r0
 8007ff4:	e7ec      	b.n	8007fd0 <__ulp+0x18>
 8007ff6:	f1a0 0114 	sub.w	r1, r0, #20
 8007ffa:	291e      	cmp	r1, #30
 8007ffc:	bfda      	itte	le
 8007ffe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008002:	fa20 f101 	lsrle.w	r1, r0, r1
 8008006:	2101      	movgt	r1, #1
 8008008:	460a      	mov	r2, r1
 800800a:	e7e1      	b.n	8007fd0 <__ulp+0x18>
 800800c:	7ff00000 	.word	0x7ff00000

08008010 <__b2d>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	6905      	ldr	r5, [r0, #16]
 8008014:	f100 0714 	add.w	r7, r0, #20
 8008018:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800801c:	1f2e      	subs	r6, r5, #4
 800801e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008022:	4620      	mov	r0, r4
 8008024:	f7ff fd48 	bl	8007ab8 <__hi0bits>
 8008028:	f1c0 0320 	rsb	r3, r0, #32
 800802c:	280a      	cmp	r0, #10
 800802e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80080ac <__b2d+0x9c>
 8008032:	600b      	str	r3, [r1, #0]
 8008034:	dc14      	bgt.n	8008060 <__b2d+0x50>
 8008036:	f1c0 0e0b 	rsb	lr, r0, #11
 800803a:	fa24 f10e 	lsr.w	r1, r4, lr
 800803e:	42b7      	cmp	r7, r6
 8008040:	ea41 030c 	orr.w	r3, r1, ip
 8008044:	bf34      	ite	cc
 8008046:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800804a:	2100      	movcs	r1, #0
 800804c:	3015      	adds	r0, #21
 800804e:	fa04 f000 	lsl.w	r0, r4, r0
 8008052:	fa21 f10e 	lsr.w	r1, r1, lr
 8008056:	ea40 0201 	orr.w	r2, r0, r1
 800805a:	ec43 2b10 	vmov	d0, r2, r3
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008060:	42b7      	cmp	r7, r6
 8008062:	bf3a      	itte	cc
 8008064:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008068:	f1a5 0608 	subcc.w	r6, r5, #8
 800806c:	2100      	movcs	r1, #0
 800806e:	380b      	subs	r0, #11
 8008070:	d017      	beq.n	80080a2 <__b2d+0x92>
 8008072:	f1c0 0c20 	rsb	ip, r0, #32
 8008076:	fa04 f500 	lsl.w	r5, r4, r0
 800807a:	42be      	cmp	r6, r7
 800807c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008080:	ea45 0504 	orr.w	r5, r5, r4
 8008084:	bf8c      	ite	hi
 8008086:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800808a:	2400      	movls	r4, #0
 800808c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008090:	fa01 f000 	lsl.w	r0, r1, r0
 8008094:	fa24 f40c 	lsr.w	r4, r4, ip
 8008098:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800809c:	ea40 0204 	orr.w	r2, r0, r4
 80080a0:	e7db      	b.n	800805a <__b2d+0x4a>
 80080a2:	ea44 030c 	orr.w	r3, r4, ip
 80080a6:	460a      	mov	r2, r1
 80080a8:	e7d7      	b.n	800805a <__b2d+0x4a>
 80080aa:	bf00      	nop
 80080ac:	3ff00000 	.word	0x3ff00000

080080b0 <__d2b>:
 80080b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	4689      	mov	r9, r1
 80080b6:	2101      	movs	r1, #1
 80080b8:	ec57 6b10 	vmov	r6, r7, d0
 80080bc:	4690      	mov	r8, r2
 80080be:	f7ff fc09 	bl	80078d4 <_Balloc>
 80080c2:	4604      	mov	r4, r0
 80080c4:	b930      	cbnz	r0, 80080d4 <__d2b+0x24>
 80080c6:	4602      	mov	r2, r0
 80080c8:	4b25      	ldr	r3, [pc, #148]	; (8008160 <__d2b+0xb0>)
 80080ca:	4826      	ldr	r0, [pc, #152]	; (8008164 <__d2b+0xb4>)
 80080cc:	f240 310a 	movw	r1, #778	; 0x30a
 80080d0:	f000 fb50 	bl	8008774 <__assert_func>
 80080d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080dc:	bb35      	cbnz	r5, 800812c <__d2b+0x7c>
 80080de:	2e00      	cmp	r6, #0
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	d028      	beq.n	8008136 <__d2b+0x86>
 80080e4:	4668      	mov	r0, sp
 80080e6:	9600      	str	r6, [sp, #0]
 80080e8:	f7ff fd06 	bl	8007af8 <__lo0bits>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	b300      	cbz	r0, 8008132 <__d2b+0x82>
 80080f0:	9a01      	ldr	r2, [sp, #4]
 80080f2:	f1c0 0320 	rsb	r3, r0, #32
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	430b      	orrs	r3, r1
 80080fc:	40c2      	lsrs	r2, r0
 80080fe:	6163      	str	r3, [r4, #20]
 8008100:	9201      	str	r2, [sp, #4]
 8008102:	9b01      	ldr	r3, [sp, #4]
 8008104:	61a3      	str	r3, [r4, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2202      	movne	r2, #2
 800810c:	2201      	moveq	r2, #1
 800810e:	6122      	str	r2, [r4, #16]
 8008110:	b1d5      	cbz	r5, 8008148 <__d2b+0x98>
 8008112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008116:	4405      	add	r5, r0
 8008118:	f8c9 5000 	str.w	r5, [r9]
 800811c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008120:	f8c8 0000 	str.w	r0, [r8]
 8008124:	4620      	mov	r0, r4
 8008126:	b003      	add	sp, #12
 8008128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800812c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008130:	e7d5      	b.n	80080de <__d2b+0x2e>
 8008132:	6161      	str	r1, [r4, #20]
 8008134:	e7e5      	b.n	8008102 <__d2b+0x52>
 8008136:	a801      	add	r0, sp, #4
 8008138:	f7ff fcde 	bl	8007af8 <__lo0bits>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	2201      	movs	r2, #1
 8008142:	6122      	str	r2, [r4, #16]
 8008144:	3020      	adds	r0, #32
 8008146:	e7e3      	b.n	8008110 <__d2b+0x60>
 8008148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800814c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008150:	f8c9 0000 	str.w	r0, [r9]
 8008154:	6918      	ldr	r0, [r3, #16]
 8008156:	f7ff fcaf 	bl	8007ab8 <__hi0bits>
 800815a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800815e:	e7df      	b.n	8008120 <__d2b+0x70>
 8008160:	0800a570 	.word	0x0800a570
 8008164:	0800a5fc 	.word	0x0800a5fc

08008168 <__ratio>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	4688      	mov	r8, r1
 800816e:	4669      	mov	r1, sp
 8008170:	4681      	mov	r9, r0
 8008172:	f7ff ff4d 	bl	8008010 <__b2d>
 8008176:	a901      	add	r1, sp, #4
 8008178:	4640      	mov	r0, r8
 800817a:	ec55 4b10 	vmov	r4, r5, d0
 800817e:	f7ff ff47 	bl	8008010 <__b2d>
 8008182:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008186:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800818a:	eba3 0c02 	sub.w	ip, r3, r2
 800818e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008198:	ec51 0b10 	vmov	r0, r1, d0
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfd6      	itet	le
 80081a0:	460a      	movle	r2, r1
 80081a2:	462a      	movgt	r2, r5
 80081a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081a8:	468b      	mov	fp, r1
 80081aa:	462f      	mov	r7, r5
 80081ac:	bfd4      	ite	le
 80081ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80081b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081b6:	4620      	mov	r0, r4
 80081b8:	ee10 2a10 	vmov	r2, s0
 80081bc:	465b      	mov	r3, fp
 80081be:	4639      	mov	r1, r7
 80081c0:	f7f8 fb4c 	bl	800085c <__aeabi_ddiv>
 80081c4:	ec41 0b10 	vmov	d0, r0, r1
 80081c8:	b003      	add	sp, #12
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081ce <__copybits>:
 80081ce:	3901      	subs	r1, #1
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	1149      	asrs	r1, r1, #5
 80081d4:	6914      	ldr	r4, [r2, #16]
 80081d6:	3101      	adds	r1, #1
 80081d8:	f102 0314 	add.w	r3, r2, #20
 80081dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081e4:	1f05      	subs	r5, r0, #4
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	d30c      	bcc.n	8008204 <__copybits+0x36>
 80081ea:	1aa3      	subs	r3, r4, r2
 80081ec:	3b11      	subs	r3, #17
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	3211      	adds	r2, #17
 80081f4:	42a2      	cmp	r2, r4
 80081f6:	bf88      	it	hi
 80081f8:	2300      	movhi	r3, #0
 80081fa:	4418      	add	r0, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	4288      	cmp	r0, r1
 8008200:	d305      	bcc.n	800820e <__copybits+0x40>
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f853 6b04 	ldr.w	r6, [r3], #4
 8008208:	f845 6f04 	str.w	r6, [r5, #4]!
 800820c:	e7eb      	b.n	80081e6 <__copybits+0x18>
 800820e:	f840 3b04 	str.w	r3, [r0], #4
 8008212:	e7f4      	b.n	80081fe <__copybits+0x30>

08008214 <__any_on>:
 8008214:	f100 0214 	add.w	r2, r0, #20
 8008218:	6900      	ldr	r0, [r0, #16]
 800821a:	114b      	asrs	r3, r1, #5
 800821c:	4298      	cmp	r0, r3
 800821e:	b510      	push	{r4, lr}
 8008220:	db11      	blt.n	8008246 <__any_on+0x32>
 8008222:	dd0a      	ble.n	800823a <__any_on+0x26>
 8008224:	f011 011f 	ands.w	r1, r1, #31
 8008228:	d007      	beq.n	800823a <__any_on+0x26>
 800822a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800822e:	fa24 f001 	lsr.w	r0, r4, r1
 8008232:	fa00 f101 	lsl.w	r1, r0, r1
 8008236:	428c      	cmp	r4, r1
 8008238:	d10b      	bne.n	8008252 <__any_on+0x3e>
 800823a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800823e:	4293      	cmp	r3, r2
 8008240:	d803      	bhi.n	800824a <__any_on+0x36>
 8008242:	2000      	movs	r0, #0
 8008244:	bd10      	pop	{r4, pc}
 8008246:	4603      	mov	r3, r0
 8008248:	e7f7      	b.n	800823a <__any_on+0x26>
 800824a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800824e:	2900      	cmp	r1, #0
 8008250:	d0f5      	beq.n	800823e <__any_on+0x2a>
 8008252:	2001      	movs	r0, #1
 8008254:	e7f6      	b.n	8008244 <__any_on+0x30>

08008256 <_calloc_r>:
 8008256:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008258:	fba1 2402 	umull	r2, r4, r1, r2
 800825c:	b94c      	cbnz	r4, 8008272 <_calloc_r+0x1c>
 800825e:	4611      	mov	r1, r2
 8008260:	9201      	str	r2, [sp, #4]
 8008262:	f000 f87b 	bl	800835c <_malloc_r>
 8008266:	9a01      	ldr	r2, [sp, #4]
 8008268:	4605      	mov	r5, r0
 800826a:	b930      	cbnz	r0, 800827a <_calloc_r+0x24>
 800826c:	4628      	mov	r0, r5
 800826e:	b003      	add	sp, #12
 8008270:	bd30      	pop	{r4, r5, pc}
 8008272:	220c      	movs	r2, #12
 8008274:	6002      	str	r2, [r0, #0]
 8008276:	2500      	movs	r5, #0
 8008278:	e7f8      	b.n	800826c <_calloc_r+0x16>
 800827a:	4621      	mov	r1, r4
 800827c:	f7fc fbc0 	bl	8004a00 <memset>
 8008280:	e7f4      	b.n	800826c <_calloc_r+0x16>
	...

08008284 <_free_r>:
 8008284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008286:	2900      	cmp	r1, #0
 8008288:	d044      	beq.n	8008314 <_free_r+0x90>
 800828a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828e:	9001      	str	r0, [sp, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f1a1 0404 	sub.w	r4, r1, #4
 8008296:	bfb8      	it	lt
 8008298:	18e4      	addlt	r4, r4, r3
 800829a:	f000 fab5 	bl	8008808 <__malloc_lock>
 800829e:	4a1e      	ldr	r2, [pc, #120]	; (8008318 <_free_r+0x94>)
 80082a0:	9801      	ldr	r0, [sp, #4]
 80082a2:	6813      	ldr	r3, [r2, #0]
 80082a4:	b933      	cbnz	r3, 80082b4 <_free_r+0x30>
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6014      	str	r4, [r2, #0]
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b0:	f000 bab0 	b.w	8008814 <__malloc_unlock>
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	d908      	bls.n	80082ca <_free_r+0x46>
 80082b8:	6825      	ldr	r5, [r4, #0]
 80082ba:	1961      	adds	r1, r4, r5
 80082bc:	428b      	cmp	r3, r1
 80082be:	bf01      	itttt	eq
 80082c0:	6819      	ldreq	r1, [r3, #0]
 80082c2:	685b      	ldreq	r3, [r3, #4]
 80082c4:	1949      	addeq	r1, r1, r5
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	e7ed      	b.n	80082a6 <_free_r+0x22>
 80082ca:	461a      	mov	r2, r3
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	b10b      	cbz	r3, 80082d4 <_free_r+0x50>
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	d9fa      	bls.n	80082ca <_free_r+0x46>
 80082d4:	6811      	ldr	r1, [r2, #0]
 80082d6:	1855      	adds	r5, r2, r1
 80082d8:	42a5      	cmp	r5, r4
 80082da:	d10b      	bne.n	80082f4 <_free_r+0x70>
 80082dc:	6824      	ldr	r4, [r4, #0]
 80082de:	4421      	add	r1, r4
 80082e0:	1854      	adds	r4, r2, r1
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	d1e0      	bne.n	80082aa <_free_r+0x26>
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	6053      	str	r3, [r2, #4]
 80082ee:	4421      	add	r1, r4
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	e7da      	b.n	80082aa <_free_r+0x26>
 80082f4:	d902      	bls.n	80082fc <_free_r+0x78>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	e7d6      	b.n	80082aa <_free_r+0x26>
 80082fc:	6825      	ldr	r5, [r4, #0]
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	428b      	cmp	r3, r1
 8008302:	bf04      	itt	eq
 8008304:	6819      	ldreq	r1, [r3, #0]
 8008306:	685b      	ldreq	r3, [r3, #4]
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	bf04      	itt	eq
 800830c:	1949      	addeq	r1, r1, r5
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	6054      	str	r4, [r2, #4]
 8008312:	e7ca      	b.n	80082aa <_free_r+0x26>
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
 8008318:	200003ec 	.word	0x200003ec

0800831c <sbrk_aligned>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	4e0e      	ldr	r6, [pc, #56]	; (8008358 <sbrk_aligned+0x3c>)
 8008320:	460c      	mov	r4, r1
 8008322:	6831      	ldr	r1, [r6, #0]
 8008324:	4605      	mov	r5, r0
 8008326:	b911      	cbnz	r1, 800832e <sbrk_aligned+0x12>
 8008328:	f000 f9f2 	bl	8008710 <_sbrk_r>
 800832c:	6030      	str	r0, [r6, #0]
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	f000 f9ed 	bl	8008710 <_sbrk_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d00a      	beq.n	8008350 <sbrk_aligned+0x34>
 800833a:	1cc4      	adds	r4, r0, #3
 800833c:	f024 0403 	bic.w	r4, r4, #3
 8008340:	42a0      	cmp	r0, r4
 8008342:	d007      	beq.n	8008354 <sbrk_aligned+0x38>
 8008344:	1a21      	subs	r1, r4, r0
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f9e2 	bl	8008710 <_sbrk_r>
 800834c:	3001      	adds	r0, #1
 800834e:	d101      	bne.n	8008354 <sbrk_aligned+0x38>
 8008350:	f04f 34ff 	mov.w	r4, #4294967295
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	200003f0 	.word	0x200003f0

0800835c <_malloc_r>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	1ccd      	adds	r5, r1, #3
 8008362:	f025 0503 	bic.w	r5, r5, #3
 8008366:	3508      	adds	r5, #8
 8008368:	2d0c      	cmp	r5, #12
 800836a:	bf38      	it	cc
 800836c:	250c      	movcc	r5, #12
 800836e:	2d00      	cmp	r5, #0
 8008370:	4607      	mov	r7, r0
 8008372:	db01      	blt.n	8008378 <_malloc_r+0x1c>
 8008374:	42a9      	cmp	r1, r5
 8008376:	d905      	bls.n	8008384 <_malloc_r+0x28>
 8008378:	230c      	movs	r3, #12
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	2600      	movs	r6, #0
 800837e:	4630      	mov	r0, r6
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4e2e      	ldr	r6, [pc, #184]	; (8008440 <_malloc_r+0xe4>)
 8008386:	f000 fa3f 	bl	8008808 <__malloc_lock>
 800838a:	6833      	ldr	r3, [r6, #0]
 800838c:	461c      	mov	r4, r3
 800838e:	bb34      	cbnz	r4, 80083de <_malloc_r+0x82>
 8008390:	4629      	mov	r1, r5
 8008392:	4638      	mov	r0, r7
 8008394:	f7ff ffc2 	bl	800831c <sbrk_aligned>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	4604      	mov	r4, r0
 800839c:	d14d      	bne.n	800843a <_malloc_r+0xde>
 800839e:	6834      	ldr	r4, [r6, #0]
 80083a0:	4626      	mov	r6, r4
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	d140      	bne.n	8008428 <_malloc_r+0xcc>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	4631      	mov	r1, r6
 80083aa:	4638      	mov	r0, r7
 80083ac:	eb04 0803 	add.w	r8, r4, r3
 80083b0:	f000 f9ae 	bl	8008710 <_sbrk_r>
 80083b4:	4580      	cmp	r8, r0
 80083b6:	d13a      	bne.n	800842e <_malloc_r+0xd2>
 80083b8:	6821      	ldr	r1, [r4, #0]
 80083ba:	3503      	adds	r5, #3
 80083bc:	1a6d      	subs	r5, r5, r1
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	4629      	mov	r1, r5
 80083cc:	4638      	mov	r0, r7
 80083ce:	f7ff ffa5 	bl	800831c <sbrk_aligned>
 80083d2:	3001      	adds	r0, #1
 80083d4:	d02b      	beq.n	800842e <_malloc_r+0xd2>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	442b      	add	r3, r5
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	e00e      	b.n	80083fc <_malloc_r+0xa0>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	1b52      	subs	r2, r2, r5
 80083e2:	d41e      	bmi.n	8008422 <_malloc_r+0xc6>
 80083e4:	2a0b      	cmp	r2, #11
 80083e6:	d916      	bls.n	8008416 <_malloc_r+0xba>
 80083e8:	1961      	adds	r1, r4, r5
 80083ea:	42a3      	cmp	r3, r4
 80083ec:	6025      	str	r5, [r4, #0]
 80083ee:	bf18      	it	ne
 80083f0:	6059      	strne	r1, [r3, #4]
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	bf08      	it	eq
 80083f6:	6031      	streq	r1, [r6, #0]
 80083f8:	5162      	str	r2, [r4, r5]
 80083fa:	604b      	str	r3, [r1, #4]
 80083fc:	4638      	mov	r0, r7
 80083fe:	f104 060b 	add.w	r6, r4, #11
 8008402:	f000 fa07 	bl	8008814 <__malloc_unlock>
 8008406:	f026 0607 	bic.w	r6, r6, #7
 800840a:	1d23      	adds	r3, r4, #4
 800840c:	1af2      	subs	r2, r6, r3
 800840e:	d0b6      	beq.n	800837e <_malloc_r+0x22>
 8008410:	1b9b      	subs	r3, r3, r6
 8008412:	50a3      	str	r3, [r4, r2]
 8008414:	e7b3      	b.n	800837e <_malloc_r+0x22>
 8008416:	6862      	ldr	r2, [r4, #4]
 8008418:	42a3      	cmp	r3, r4
 800841a:	bf0c      	ite	eq
 800841c:	6032      	streq	r2, [r6, #0]
 800841e:	605a      	strne	r2, [r3, #4]
 8008420:	e7ec      	b.n	80083fc <_malloc_r+0xa0>
 8008422:	4623      	mov	r3, r4
 8008424:	6864      	ldr	r4, [r4, #4]
 8008426:	e7b2      	b.n	800838e <_malloc_r+0x32>
 8008428:	4634      	mov	r4, r6
 800842a:	6876      	ldr	r6, [r6, #4]
 800842c:	e7b9      	b.n	80083a2 <_malloc_r+0x46>
 800842e:	230c      	movs	r3, #12
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4638      	mov	r0, r7
 8008434:	f000 f9ee 	bl	8008814 <__malloc_unlock>
 8008438:	e7a1      	b.n	800837e <_malloc_r+0x22>
 800843a:	6025      	str	r5, [r4, #0]
 800843c:	e7de      	b.n	80083fc <_malloc_r+0xa0>
 800843e:	bf00      	nop
 8008440:	200003ec 	.word	0x200003ec

08008444 <__ssputs_r>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	688e      	ldr	r6, [r1, #8]
 800844a:	429e      	cmp	r6, r3
 800844c:	4682      	mov	sl, r0
 800844e:	460c      	mov	r4, r1
 8008450:	4690      	mov	r8, r2
 8008452:	461f      	mov	r7, r3
 8008454:	d838      	bhi.n	80084c8 <__ssputs_r+0x84>
 8008456:	898a      	ldrh	r2, [r1, #12]
 8008458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800845c:	d032      	beq.n	80084c4 <__ssputs_r+0x80>
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	6909      	ldr	r1, [r1, #16]
 8008462:	eba5 0901 	sub.w	r9, r5, r1
 8008466:	6965      	ldr	r5, [r4, #20]
 8008468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008470:	3301      	adds	r3, #1
 8008472:	444b      	add	r3, r9
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	429d      	cmp	r5, r3
 8008478:	bf38      	it	cc
 800847a:	461d      	movcc	r5, r3
 800847c:	0553      	lsls	r3, r2, #21
 800847e:	d531      	bpl.n	80084e4 <__ssputs_r+0xa0>
 8008480:	4629      	mov	r1, r5
 8008482:	f7ff ff6b 	bl	800835c <_malloc_r>
 8008486:	4606      	mov	r6, r0
 8008488:	b950      	cbnz	r0, 80084a0 <__ssputs_r+0x5c>
 800848a:	230c      	movs	r3, #12
 800848c:	f8ca 3000 	str.w	r3, [sl]
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	6921      	ldr	r1, [r4, #16]
 80084a2:	464a      	mov	r2, r9
 80084a4:	f7ff fa08 	bl	80078b8 <memcpy>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	6126      	str	r6, [r4, #16]
 80084b6:	6165      	str	r5, [r4, #20]
 80084b8:	444e      	add	r6, r9
 80084ba:	eba5 0509 	sub.w	r5, r5, r9
 80084be:	6026      	str	r6, [r4, #0]
 80084c0:	60a5      	str	r5, [r4, #8]
 80084c2:	463e      	mov	r6, r7
 80084c4:	42be      	cmp	r6, r7
 80084c6:	d900      	bls.n	80084ca <__ssputs_r+0x86>
 80084c8:	463e      	mov	r6, r7
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	4632      	mov	r2, r6
 80084ce:	4641      	mov	r1, r8
 80084d0:	f000 f980 	bl	80087d4 <memmove>
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	1b9b      	subs	r3, r3, r6
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	4433      	add	r3, r6
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7db      	b.n	800849c <__ssputs_r+0x58>
 80084e4:	462a      	mov	r2, r5
 80084e6:	f000 f99b 	bl	8008820 <_realloc_r>
 80084ea:	4606      	mov	r6, r0
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1e1      	bne.n	80084b4 <__ssputs_r+0x70>
 80084f0:	6921      	ldr	r1, [r4, #16]
 80084f2:	4650      	mov	r0, sl
 80084f4:	f7ff fec6 	bl	8008284 <_free_r>
 80084f8:	e7c7      	b.n	800848a <__ssputs_r+0x46>
	...

080084fc <_svfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	898b      	ldrh	r3, [r1, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	b09d      	sub	sp, #116	; 0x74
 8008508:	4607      	mov	r7, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
 800850e:	d50e      	bpl.n	800852e <_svfiprintf_r+0x32>
 8008510:	690b      	ldr	r3, [r1, #16]
 8008512:	b963      	cbnz	r3, 800852e <_svfiprintf_r+0x32>
 8008514:	2140      	movs	r1, #64	; 0x40
 8008516:	f7ff ff21 	bl	800835c <_malloc_r>
 800851a:	6028      	str	r0, [r5, #0]
 800851c:	6128      	str	r0, [r5, #16]
 800851e:	b920      	cbnz	r0, 800852a <_svfiprintf_r+0x2e>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e0d1      	b.n	80086ce <_svfiprintf_r+0x1d2>
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	616b      	str	r3, [r5, #20]
 800852e:	2300      	movs	r3, #0
 8008530:	9309      	str	r3, [sp, #36]	; 0x24
 8008532:	2320      	movs	r3, #32
 8008534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008538:	f8cd 800c 	str.w	r8, [sp, #12]
 800853c:	2330      	movs	r3, #48	; 0x30
 800853e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086e8 <_svfiprintf_r+0x1ec>
 8008542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008546:	f04f 0901 	mov.w	r9, #1
 800854a:	4623      	mov	r3, r4
 800854c:	469a      	mov	sl, r3
 800854e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008552:	b10a      	cbz	r2, 8008558 <_svfiprintf_r+0x5c>
 8008554:	2a25      	cmp	r2, #37	; 0x25
 8008556:	d1f9      	bne.n	800854c <_svfiprintf_r+0x50>
 8008558:	ebba 0b04 	subs.w	fp, sl, r4
 800855c:	d00b      	beq.n	8008576 <_svfiprintf_r+0x7a>
 800855e:	465b      	mov	r3, fp
 8008560:	4622      	mov	r2, r4
 8008562:	4629      	mov	r1, r5
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff ff6d 	bl	8008444 <__ssputs_r>
 800856a:	3001      	adds	r0, #1
 800856c:	f000 80aa 	beq.w	80086c4 <_svfiprintf_r+0x1c8>
 8008570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008572:	445a      	add	r2, fp
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 80a2 	beq.w	80086c4 <_svfiprintf_r+0x1c8>
 8008580:	2300      	movs	r3, #0
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858a:	f10a 0a01 	add.w	sl, sl, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	9307      	str	r3, [sp, #28]
 8008592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008596:	931a      	str	r3, [sp, #104]	; 0x68
 8008598:	4654      	mov	r4, sl
 800859a:	2205      	movs	r2, #5
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	4851      	ldr	r0, [pc, #324]	; (80086e8 <_svfiprintf_r+0x1ec>)
 80085a2:	f7f7 fe25 	bl	80001f0 <memchr>
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	b9d8      	cbnz	r0, 80085e2 <_svfiprintf_r+0xe6>
 80085aa:	06d0      	lsls	r0, r2, #27
 80085ac:	bf44      	itt	mi
 80085ae:	2320      	movmi	r3, #32
 80085b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b4:	0711      	lsls	r1, r2, #28
 80085b6:	bf44      	itt	mi
 80085b8:	232b      	movmi	r3, #43	; 0x2b
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b2a      	cmp	r3, #42	; 0x2a
 80085c4:	d015      	beq.n	80085f2 <_svfiprintf_r+0xf6>
 80085c6:	9a07      	ldr	r2, [sp, #28]
 80085c8:	4654      	mov	r4, sl
 80085ca:	2000      	movs	r0, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	4621      	mov	r1, r4
 80085d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d6:	3b30      	subs	r3, #48	; 0x30
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d94e      	bls.n	800867a <_svfiprintf_r+0x17e>
 80085dc:	b1b0      	cbz	r0, 800860c <_svfiprintf_r+0x110>
 80085de:	9207      	str	r2, [sp, #28]
 80085e0:	e014      	b.n	800860c <_svfiprintf_r+0x110>
 80085e2:	eba0 0308 	sub.w	r3, r0, r8
 80085e6:	fa09 f303 	lsl.w	r3, r9, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	46a2      	mov	sl, r4
 80085f0:	e7d2      	b.n	8008598 <_svfiprintf_r+0x9c>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	1d19      	adds	r1, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9103      	str	r1, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfbb      	ittet	lt
 80085fe:	425b      	neglt	r3, r3
 8008600:	f042 0202 	orrlt.w	r2, r2, #2
 8008604:	9307      	strge	r3, [sp, #28]
 8008606:	9307      	strlt	r3, [sp, #28]
 8008608:	bfb8      	it	lt
 800860a:	9204      	strlt	r2, [sp, #16]
 800860c:	7823      	ldrb	r3, [r4, #0]
 800860e:	2b2e      	cmp	r3, #46	; 0x2e
 8008610:	d10c      	bne.n	800862c <_svfiprintf_r+0x130>
 8008612:	7863      	ldrb	r3, [r4, #1]
 8008614:	2b2a      	cmp	r3, #42	; 0x2a
 8008616:	d135      	bne.n	8008684 <_svfiprintf_r+0x188>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9203      	str	r2, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfb8      	it	lt
 8008624:	f04f 33ff 	movlt.w	r3, #4294967295
 8008628:	3402      	adds	r4, #2
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086f8 <_svfiprintf_r+0x1fc>
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	f7f7 fddb 	bl	80001f0 <memchr>
 800863a:	b140      	cbz	r0, 800864e <_svfiprintf_r+0x152>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	fa03 f000 	lsl.w	r0, r3, r0
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	4303      	orrs	r3, r0
 800864a:	3401      	adds	r4, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008652:	4826      	ldr	r0, [pc, #152]	; (80086ec <_svfiprintf_r+0x1f0>)
 8008654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008658:	2206      	movs	r2, #6
 800865a:	f7f7 fdc9 	bl	80001f0 <memchr>
 800865e:	2800      	cmp	r0, #0
 8008660:	d038      	beq.n	80086d4 <_svfiprintf_r+0x1d8>
 8008662:	4b23      	ldr	r3, [pc, #140]	; (80086f0 <_svfiprintf_r+0x1f4>)
 8008664:	bb1b      	cbnz	r3, 80086ae <_svfiprintf_r+0x1b2>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	3307      	adds	r3, #7
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	3308      	adds	r3, #8
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008674:	4433      	add	r3, r6
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	e767      	b.n	800854a <_svfiprintf_r+0x4e>
 800867a:	fb0c 3202 	mla	r2, ip, r2, r3
 800867e:	460c      	mov	r4, r1
 8008680:	2001      	movs	r0, #1
 8008682:	e7a5      	b.n	80085d0 <_svfiprintf_r+0xd4>
 8008684:	2300      	movs	r3, #0
 8008686:	3401      	adds	r4, #1
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	4619      	mov	r1, r3
 800868c:	f04f 0c0a 	mov.w	ip, #10
 8008690:	4620      	mov	r0, r4
 8008692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008696:	3a30      	subs	r2, #48	; 0x30
 8008698:	2a09      	cmp	r2, #9
 800869a:	d903      	bls.n	80086a4 <_svfiprintf_r+0x1a8>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0c5      	beq.n	800862c <_svfiprintf_r+0x130>
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	e7c3      	b.n	800862c <_svfiprintf_r+0x130>
 80086a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a8:	4604      	mov	r4, r0
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7f0      	b.n	8008690 <_svfiprintf_r+0x194>
 80086ae:	ab03      	add	r3, sp, #12
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <_svfiprintf_r+0x1f8>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7fc fa49 	bl	8004b50 <_printf_float>
 80086be:	1c42      	adds	r2, r0, #1
 80086c0:	4606      	mov	r6, r0
 80086c2:	d1d6      	bne.n	8008672 <_svfiprintf_r+0x176>
 80086c4:	89ab      	ldrh	r3, [r5, #12]
 80086c6:	065b      	lsls	r3, r3, #25
 80086c8:	f53f af2c 	bmi.w	8008524 <_svfiprintf_r+0x28>
 80086cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ce:	b01d      	add	sp, #116	; 0x74
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <_svfiprintf_r+0x1f8>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4638      	mov	r0, r7
 80086e0:	f7fc fcda 	bl	8005098 <_printf_i>
 80086e4:	e7eb      	b.n	80086be <_svfiprintf_r+0x1c2>
 80086e6:	bf00      	nop
 80086e8:	0800a754 	.word	0x0800a754
 80086ec:	0800a75e 	.word	0x0800a75e
 80086f0:	08004b51 	.word	0x08004b51
 80086f4:	08008445 	.word	0x08008445
 80086f8:	0800a75a 	.word	0x0800a75a
 80086fc:	00000000 	.word	0x00000000

08008700 <nan>:
 8008700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008708 <nan+0x8>
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	00000000 	.word	0x00000000
 800870c:	7ff80000 	.word	0x7ff80000

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	; (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7fb feaa 	bl	8004474 <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200003f4 	.word	0x200003f4

08008730 <strncmp>:
 8008730:	b510      	push	{r4, lr}
 8008732:	b17a      	cbz	r2, 8008754 <strncmp+0x24>
 8008734:	4603      	mov	r3, r0
 8008736:	3901      	subs	r1, #1
 8008738:	1884      	adds	r4, r0, r2
 800873a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800873e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008742:	4290      	cmp	r0, r2
 8008744:	d101      	bne.n	800874a <strncmp+0x1a>
 8008746:	42a3      	cmp	r3, r4
 8008748:	d101      	bne.n	800874e <strncmp+0x1e>
 800874a:	1a80      	subs	r0, r0, r2
 800874c:	bd10      	pop	{r4, pc}
 800874e:	2800      	cmp	r0, #0
 8008750:	d1f3      	bne.n	800873a <strncmp+0xa>
 8008752:	e7fa      	b.n	800874a <strncmp+0x1a>
 8008754:	4610      	mov	r0, r2
 8008756:	e7f9      	b.n	800874c <strncmp+0x1c>

08008758 <__ascii_wctomb>:
 8008758:	b149      	cbz	r1, 800876e <__ascii_wctomb+0x16>
 800875a:	2aff      	cmp	r2, #255	; 0xff
 800875c:	bf85      	ittet	hi
 800875e:	238a      	movhi	r3, #138	; 0x8a
 8008760:	6003      	strhi	r3, [r0, #0]
 8008762:	700a      	strbls	r2, [r1, #0]
 8008764:	f04f 30ff 	movhi.w	r0, #4294967295
 8008768:	bf98      	it	ls
 800876a:	2001      	movls	r0, #1
 800876c:	4770      	bx	lr
 800876e:	4608      	mov	r0, r1
 8008770:	4770      	bx	lr
	...

08008774 <__assert_func>:
 8008774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008776:	4614      	mov	r4, r2
 8008778:	461a      	mov	r2, r3
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <__assert_func+0x2c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4605      	mov	r5, r0
 8008780:	68d8      	ldr	r0, [r3, #12]
 8008782:	b14c      	cbz	r4, 8008798 <__assert_func+0x24>
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <__assert_func+0x30>)
 8008786:	9100      	str	r1, [sp, #0]
 8008788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800878c:	4906      	ldr	r1, [pc, #24]	; (80087a8 <__assert_func+0x34>)
 800878e:	462b      	mov	r3, r5
 8008790:	f000 f80e 	bl	80087b0 <fiprintf>
 8008794:	f000 fa8c 	bl	8008cb0 <abort>
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <__assert_func+0x38>)
 800879a:	461c      	mov	r4, r3
 800879c:	e7f3      	b.n	8008786 <__assert_func+0x12>
 800879e:	bf00      	nop
 80087a0:	20000034 	.word	0x20000034
 80087a4:	0800a765 	.word	0x0800a765
 80087a8:	0800a772 	.word	0x0800a772
 80087ac:	0800a7a0 	.word	0x0800a7a0

080087b0 <fiprintf>:
 80087b0:	b40e      	push	{r1, r2, r3}
 80087b2:	b503      	push	{r0, r1, lr}
 80087b4:	4601      	mov	r1, r0
 80087b6:	ab03      	add	r3, sp, #12
 80087b8:	4805      	ldr	r0, [pc, #20]	; (80087d0 <fiprintf+0x20>)
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	6800      	ldr	r0, [r0, #0]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	f000 f885 	bl	80088d0 <_vfiprintf_r>
 80087c6:	b002      	add	sp, #8
 80087c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087cc:	b003      	add	sp, #12
 80087ce:	4770      	bx	lr
 80087d0:	20000034 	.word	0x20000034

080087d4 <memmove>:
 80087d4:	4288      	cmp	r0, r1
 80087d6:	b510      	push	{r4, lr}
 80087d8:	eb01 0402 	add.w	r4, r1, r2
 80087dc:	d902      	bls.n	80087e4 <memmove+0x10>
 80087de:	4284      	cmp	r4, r0
 80087e0:	4623      	mov	r3, r4
 80087e2:	d807      	bhi.n	80087f4 <memmove+0x20>
 80087e4:	1e43      	subs	r3, r0, #1
 80087e6:	42a1      	cmp	r1, r4
 80087e8:	d008      	beq.n	80087fc <memmove+0x28>
 80087ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f2:	e7f8      	b.n	80087e6 <memmove+0x12>
 80087f4:	4402      	add	r2, r0
 80087f6:	4601      	mov	r1, r0
 80087f8:	428a      	cmp	r2, r1
 80087fa:	d100      	bne.n	80087fe <memmove+0x2a>
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008806:	e7f7      	b.n	80087f8 <memmove+0x24>

08008808 <__malloc_lock>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__malloc_lock+0x8>)
 800880a:	f000 bc11 	b.w	8009030 <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	200003f8 	.word	0x200003f8

08008814 <__malloc_unlock>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__malloc_unlock+0x8>)
 8008816:	f000 bc0c 	b.w	8009032 <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	200003f8 	.word	0x200003f8

08008820 <_realloc_r>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	4680      	mov	r8, r0
 8008826:	4614      	mov	r4, r2
 8008828:	460e      	mov	r6, r1
 800882a:	b921      	cbnz	r1, 8008836 <_realloc_r+0x16>
 800882c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4611      	mov	r1, r2
 8008832:	f7ff bd93 	b.w	800835c <_malloc_r>
 8008836:	b92a      	cbnz	r2, 8008844 <_realloc_r+0x24>
 8008838:	f7ff fd24 	bl	8008284 <_free_r>
 800883c:	4625      	mov	r5, r4
 800883e:	4628      	mov	r0, r5
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f000 fc5c 	bl	8009100 <_malloc_usable_size_r>
 8008848:	4284      	cmp	r4, r0
 800884a:	4607      	mov	r7, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008852:	d812      	bhi.n	800887a <_realloc_r+0x5a>
 8008854:	4621      	mov	r1, r4
 8008856:	4640      	mov	r0, r8
 8008858:	f7ff fd80 	bl	800835c <_malloc_r>
 800885c:	4605      	mov	r5, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ed      	beq.n	800883e <_realloc_r+0x1e>
 8008862:	42bc      	cmp	r4, r7
 8008864:	4622      	mov	r2, r4
 8008866:	4631      	mov	r1, r6
 8008868:	bf28      	it	cs
 800886a:	463a      	movcs	r2, r7
 800886c:	f7ff f824 	bl	80078b8 <memcpy>
 8008870:	4631      	mov	r1, r6
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff fd06 	bl	8008284 <_free_r>
 8008878:	e7e1      	b.n	800883e <_realloc_r+0x1e>
 800887a:	4635      	mov	r5, r6
 800887c:	e7df      	b.n	800883e <_realloc_r+0x1e>

0800887e <__sfputc_r>:
 800887e:	6893      	ldr	r3, [r2, #8]
 8008880:	3b01      	subs	r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	b410      	push	{r4}
 8008886:	6093      	str	r3, [r2, #8]
 8008888:	da08      	bge.n	800889c <__sfputc_r+0x1e>
 800888a:	6994      	ldr	r4, [r2, #24]
 800888c:	42a3      	cmp	r3, r4
 800888e:	db01      	blt.n	8008894 <__sfputc_r+0x16>
 8008890:	290a      	cmp	r1, #10
 8008892:	d103      	bne.n	800889c <__sfputc_r+0x1e>
 8008894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008898:	f000 b94a 	b.w	8008b30 <__swbuf_r>
 800889c:	6813      	ldr	r3, [r2, #0]
 800889e:	1c58      	adds	r0, r3, #1
 80088a0:	6010      	str	r0, [r2, #0]
 80088a2:	7019      	strb	r1, [r3, #0]
 80088a4:	4608      	mov	r0, r1
 80088a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <__sfputs_r>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	4614      	mov	r4, r2
 80088b4:	18d5      	adds	r5, r2, r3
 80088b6:	42ac      	cmp	r4, r5
 80088b8:	d101      	bne.n	80088be <__sfputs_r+0x12>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e007      	b.n	80088ce <__sfputs_r+0x22>
 80088be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c2:	463a      	mov	r2, r7
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff ffda 	bl	800887e <__sfputc_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d1f3      	bne.n	80088b6 <__sfputs_r+0xa>
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088d0 <_vfiprintf_r>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	460d      	mov	r5, r1
 80088d6:	b09d      	sub	sp, #116	; 0x74
 80088d8:	4614      	mov	r4, r2
 80088da:	4698      	mov	r8, r3
 80088dc:	4606      	mov	r6, r0
 80088de:	b118      	cbz	r0, 80088e8 <_vfiprintf_r+0x18>
 80088e0:	6983      	ldr	r3, [r0, #24]
 80088e2:	b90b      	cbnz	r3, 80088e8 <_vfiprintf_r+0x18>
 80088e4:	f000 fb06 	bl	8008ef4 <__sinit>
 80088e8:	4b89      	ldr	r3, [pc, #548]	; (8008b10 <_vfiprintf_r+0x240>)
 80088ea:	429d      	cmp	r5, r3
 80088ec:	d11b      	bne.n	8008926 <_vfiprintf_r+0x56>
 80088ee:	6875      	ldr	r5, [r6, #4]
 80088f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d405      	bmi.n	8008902 <_vfiprintf_r+0x32>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	059a      	lsls	r2, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_vfiprintf_r+0x32>
 80088fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088fe:	f000 fb97 	bl	8009030 <__retarget_lock_acquire_recursive>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	071b      	lsls	r3, r3, #28
 8008906:	d501      	bpl.n	800890c <_vfiprintf_r+0x3c>
 8008908:	692b      	ldr	r3, [r5, #16]
 800890a:	b9eb      	cbnz	r3, 8008948 <_vfiprintf_r+0x78>
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f000 f960 	bl	8008bd4 <__swsetup_r>
 8008914:	b1c0      	cbz	r0, 8008948 <_vfiprintf_r+0x78>
 8008916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008918:	07dc      	lsls	r4, r3, #31
 800891a:	d50e      	bpl.n	800893a <_vfiprintf_r+0x6a>
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	b01d      	add	sp, #116	; 0x74
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	4b7b      	ldr	r3, [pc, #492]	; (8008b14 <_vfiprintf_r+0x244>)
 8008928:	429d      	cmp	r5, r3
 800892a:	d101      	bne.n	8008930 <_vfiprintf_r+0x60>
 800892c:	68b5      	ldr	r5, [r6, #8]
 800892e:	e7df      	b.n	80088f0 <_vfiprintf_r+0x20>
 8008930:	4b79      	ldr	r3, [pc, #484]	; (8008b18 <_vfiprintf_r+0x248>)
 8008932:	429d      	cmp	r5, r3
 8008934:	bf08      	it	eq
 8008936:	68f5      	ldreq	r5, [r6, #12]
 8008938:	e7da      	b.n	80088f0 <_vfiprintf_r+0x20>
 800893a:	89ab      	ldrh	r3, [r5, #12]
 800893c:	0598      	lsls	r0, r3, #22
 800893e:	d4ed      	bmi.n	800891c <_vfiprintf_r+0x4c>
 8008940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008942:	f000 fb76 	bl	8009032 <__retarget_lock_release_recursive>
 8008946:	e7e9      	b.n	800891c <_vfiprintf_r+0x4c>
 8008948:	2300      	movs	r3, #0
 800894a:	9309      	str	r3, [sp, #36]	; 0x24
 800894c:	2320      	movs	r3, #32
 800894e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008952:	f8cd 800c 	str.w	r8, [sp, #12]
 8008956:	2330      	movs	r3, #48	; 0x30
 8008958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b1c <_vfiprintf_r+0x24c>
 800895c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008960:	f04f 0901 	mov.w	r9, #1
 8008964:	4623      	mov	r3, r4
 8008966:	469a      	mov	sl, r3
 8008968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800896c:	b10a      	cbz	r2, 8008972 <_vfiprintf_r+0xa2>
 800896e:	2a25      	cmp	r2, #37	; 0x25
 8008970:	d1f9      	bne.n	8008966 <_vfiprintf_r+0x96>
 8008972:	ebba 0b04 	subs.w	fp, sl, r4
 8008976:	d00b      	beq.n	8008990 <_vfiprintf_r+0xc0>
 8008978:	465b      	mov	r3, fp
 800897a:	4622      	mov	r2, r4
 800897c:	4629      	mov	r1, r5
 800897e:	4630      	mov	r0, r6
 8008980:	f7ff ff94 	bl	80088ac <__sfputs_r>
 8008984:	3001      	adds	r0, #1
 8008986:	f000 80aa 	beq.w	8008ade <_vfiprintf_r+0x20e>
 800898a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800898c:	445a      	add	r2, fp
 800898e:	9209      	str	r2, [sp, #36]	; 0x24
 8008990:	f89a 3000 	ldrb.w	r3, [sl]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80a2 	beq.w	8008ade <_vfiprintf_r+0x20e>
 800899a:	2300      	movs	r3, #0
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a4:	f10a 0a01 	add.w	sl, sl, #1
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	9307      	str	r3, [sp, #28]
 80089ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b0:	931a      	str	r3, [sp, #104]	; 0x68
 80089b2:	4654      	mov	r4, sl
 80089b4:	2205      	movs	r2, #5
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4858      	ldr	r0, [pc, #352]	; (8008b1c <_vfiprintf_r+0x24c>)
 80089bc:	f7f7 fc18 	bl	80001f0 <memchr>
 80089c0:	9a04      	ldr	r2, [sp, #16]
 80089c2:	b9d8      	cbnz	r0, 80089fc <_vfiprintf_r+0x12c>
 80089c4:	06d1      	lsls	r1, r2, #27
 80089c6:	bf44      	itt	mi
 80089c8:	2320      	movmi	r3, #32
 80089ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ce:	0713      	lsls	r3, r2, #28
 80089d0:	bf44      	itt	mi
 80089d2:	232b      	movmi	r3, #43	; 0x2b
 80089d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d8:	f89a 3000 	ldrb.w	r3, [sl]
 80089dc:	2b2a      	cmp	r3, #42	; 0x2a
 80089de:	d015      	beq.n	8008a0c <_vfiprintf_r+0x13c>
 80089e0:	9a07      	ldr	r2, [sp, #28]
 80089e2:	4654      	mov	r4, sl
 80089e4:	2000      	movs	r0, #0
 80089e6:	f04f 0c0a 	mov.w	ip, #10
 80089ea:	4621      	mov	r1, r4
 80089ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f0:	3b30      	subs	r3, #48	; 0x30
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d94e      	bls.n	8008a94 <_vfiprintf_r+0x1c4>
 80089f6:	b1b0      	cbz	r0, 8008a26 <_vfiprintf_r+0x156>
 80089f8:	9207      	str	r2, [sp, #28]
 80089fa:	e014      	b.n	8008a26 <_vfiprintf_r+0x156>
 80089fc:	eba0 0308 	sub.w	r3, r0, r8
 8008a00:	fa09 f303 	lsl.w	r3, r9, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	46a2      	mov	sl, r4
 8008a0a:	e7d2      	b.n	80089b2 <_vfiprintf_r+0xe2>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1d19      	adds	r1, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9103      	str	r1, [sp, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfbb      	ittet	lt
 8008a18:	425b      	neglt	r3, r3
 8008a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a1e:	9307      	strge	r3, [sp, #28]
 8008a20:	9307      	strlt	r3, [sp, #28]
 8008a22:	bfb8      	it	lt
 8008a24:	9204      	strlt	r2, [sp, #16]
 8008a26:	7823      	ldrb	r3, [r4, #0]
 8008a28:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2a:	d10c      	bne.n	8008a46 <_vfiprintf_r+0x176>
 8008a2c:	7863      	ldrb	r3, [r4, #1]
 8008a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a30:	d135      	bne.n	8008a9e <_vfiprintf_r+0x1ce>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	9203      	str	r2, [sp, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bfb8      	it	lt
 8008a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a42:	3402      	adds	r4, #2
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b2c <_vfiprintf_r+0x25c>
 8008a4a:	7821      	ldrb	r1, [r4, #0]
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	4650      	mov	r0, sl
 8008a50:	f7f7 fbce 	bl	80001f0 <memchr>
 8008a54:	b140      	cbz	r0, 8008a68 <_vfiprintf_r+0x198>
 8008a56:	2340      	movs	r3, #64	; 0x40
 8008a58:	eba0 000a 	sub.w	r0, r0, sl
 8008a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a60:	9b04      	ldr	r3, [sp, #16]
 8008a62:	4303      	orrs	r3, r0
 8008a64:	3401      	adds	r4, #1
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6c:	482c      	ldr	r0, [pc, #176]	; (8008b20 <_vfiprintf_r+0x250>)
 8008a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a72:	2206      	movs	r2, #6
 8008a74:	f7f7 fbbc 	bl	80001f0 <memchr>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d03f      	beq.n	8008afc <_vfiprintf_r+0x22c>
 8008a7c:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <_vfiprintf_r+0x254>)
 8008a7e:	bb1b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x1f8>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	3307      	adds	r3, #7
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	3308      	adds	r3, #8
 8008a8a:	9303      	str	r3, [sp, #12]
 8008a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8e:	443b      	add	r3, r7
 8008a90:	9309      	str	r3, [sp, #36]	; 0x24
 8008a92:	e767      	b.n	8008964 <_vfiprintf_r+0x94>
 8008a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a98:	460c      	mov	r4, r1
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	e7a5      	b.n	80089ea <_vfiprintf_r+0x11a>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	3401      	adds	r4, #1
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f04f 0c0a 	mov.w	ip, #10
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab0:	3a30      	subs	r2, #48	; 0x30
 8008ab2:	2a09      	cmp	r2, #9
 8008ab4:	d903      	bls.n	8008abe <_vfiprintf_r+0x1ee>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c5      	beq.n	8008a46 <_vfiprintf_r+0x176>
 8008aba:	9105      	str	r1, [sp, #20]
 8008abc:	e7c3      	b.n	8008a46 <_vfiprintf_r+0x176>
 8008abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e7f0      	b.n	8008aaa <_vfiprintf_r+0x1da>
 8008ac8:	ab03      	add	r3, sp, #12
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	462a      	mov	r2, r5
 8008ace:	4b16      	ldr	r3, [pc, #88]	; (8008b28 <_vfiprintf_r+0x258>)
 8008ad0:	a904      	add	r1, sp, #16
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7fc f83c 	bl	8004b50 <_printf_float>
 8008ad8:	4607      	mov	r7, r0
 8008ada:	1c78      	adds	r0, r7, #1
 8008adc:	d1d6      	bne.n	8008a8c <_vfiprintf_r+0x1bc>
 8008ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae0:	07d9      	lsls	r1, r3, #31
 8008ae2:	d405      	bmi.n	8008af0 <_vfiprintf_r+0x220>
 8008ae4:	89ab      	ldrh	r3, [r5, #12]
 8008ae6:	059a      	lsls	r2, r3, #22
 8008ae8:	d402      	bmi.n	8008af0 <_vfiprintf_r+0x220>
 8008aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aec:	f000 faa1 	bl	8009032 <__retarget_lock_release_recursive>
 8008af0:	89ab      	ldrh	r3, [r5, #12]
 8008af2:	065b      	lsls	r3, r3, #25
 8008af4:	f53f af12 	bmi.w	800891c <_vfiprintf_r+0x4c>
 8008af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008afa:	e711      	b.n	8008920 <_vfiprintf_r+0x50>
 8008afc:	ab03      	add	r3, sp, #12
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	462a      	mov	r2, r5
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <_vfiprintf_r+0x258>)
 8008b04:	a904      	add	r1, sp, #16
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7fc fac6 	bl	8005098 <_printf_i>
 8008b0c:	e7e4      	b.n	8008ad8 <_vfiprintf_r+0x208>
 8008b0e:	bf00      	nop
 8008b10:	0800a7c4 	.word	0x0800a7c4
 8008b14:	0800a7e4 	.word	0x0800a7e4
 8008b18:	0800a7a4 	.word	0x0800a7a4
 8008b1c:	0800a754 	.word	0x0800a754
 8008b20:	0800a75e 	.word	0x0800a75e
 8008b24:	08004b51 	.word	0x08004b51
 8008b28:	080088ad 	.word	0x080088ad
 8008b2c:	0800a75a 	.word	0x0800a75a

08008b30 <__swbuf_r>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	460e      	mov	r6, r1
 8008b34:	4614      	mov	r4, r2
 8008b36:	4605      	mov	r5, r0
 8008b38:	b118      	cbz	r0, 8008b42 <__swbuf_r+0x12>
 8008b3a:	6983      	ldr	r3, [r0, #24]
 8008b3c:	b90b      	cbnz	r3, 8008b42 <__swbuf_r+0x12>
 8008b3e:	f000 f9d9 	bl	8008ef4 <__sinit>
 8008b42:	4b21      	ldr	r3, [pc, #132]	; (8008bc8 <__swbuf_r+0x98>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	d12b      	bne.n	8008ba0 <__swbuf_r+0x70>
 8008b48:	686c      	ldr	r4, [r5, #4]
 8008b4a:	69a3      	ldr	r3, [r4, #24]
 8008b4c:	60a3      	str	r3, [r4, #8]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	071a      	lsls	r2, r3, #28
 8008b52:	d52f      	bpl.n	8008bb4 <__swbuf_r+0x84>
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	b36b      	cbz	r3, 8008bb4 <__swbuf_r+0x84>
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	1ac0      	subs	r0, r0, r3
 8008b5e:	6963      	ldr	r3, [r4, #20]
 8008b60:	b2f6      	uxtb	r6, r6
 8008b62:	4283      	cmp	r3, r0
 8008b64:	4637      	mov	r7, r6
 8008b66:	dc04      	bgt.n	8008b72 <__swbuf_r+0x42>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f92e 	bl	8008dcc <_fflush_r>
 8008b70:	bb30      	cbnz	r0, 8008bc0 <__swbuf_r+0x90>
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	60a3      	str	r3, [r4, #8]
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	6022      	str	r2, [r4, #0]
 8008b7e:	701e      	strb	r6, [r3, #0]
 8008b80:	6963      	ldr	r3, [r4, #20]
 8008b82:	3001      	adds	r0, #1
 8008b84:	4283      	cmp	r3, r0
 8008b86:	d004      	beq.n	8008b92 <__swbuf_r+0x62>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	07db      	lsls	r3, r3, #31
 8008b8c:	d506      	bpl.n	8008b9c <__swbuf_r+0x6c>
 8008b8e:	2e0a      	cmp	r6, #10
 8008b90:	d104      	bne.n	8008b9c <__swbuf_r+0x6c>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f919 	bl	8008dcc <_fflush_r>
 8008b9a:	b988      	cbnz	r0, 8008bc0 <__swbuf_r+0x90>
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <__swbuf_r+0x9c>)
 8008ba2:	429c      	cmp	r4, r3
 8008ba4:	d101      	bne.n	8008baa <__swbuf_r+0x7a>
 8008ba6:	68ac      	ldr	r4, [r5, #8]
 8008ba8:	e7cf      	b.n	8008b4a <__swbuf_r+0x1a>
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <__swbuf_r+0xa0>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	bf08      	it	eq
 8008bb0:	68ec      	ldreq	r4, [r5, #12]
 8008bb2:	e7ca      	b.n	8008b4a <__swbuf_r+0x1a>
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 f80c 	bl	8008bd4 <__swsetup_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d0cb      	beq.n	8008b58 <__swbuf_r+0x28>
 8008bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc4:	e7ea      	b.n	8008b9c <__swbuf_r+0x6c>
 8008bc6:	bf00      	nop
 8008bc8:	0800a7c4 	.word	0x0800a7c4
 8008bcc:	0800a7e4 	.word	0x0800a7e4
 8008bd0:	0800a7a4 	.word	0x0800a7a4

08008bd4 <__swsetup_r>:
 8008bd4:	4b32      	ldr	r3, [pc, #200]	; (8008ca0 <__swsetup_r+0xcc>)
 8008bd6:	b570      	push	{r4, r5, r6, lr}
 8008bd8:	681d      	ldr	r5, [r3, #0]
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460c      	mov	r4, r1
 8008bde:	b125      	cbz	r5, 8008bea <__swsetup_r+0x16>
 8008be0:	69ab      	ldr	r3, [r5, #24]
 8008be2:	b913      	cbnz	r3, 8008bea <__swsetup_r+0x16>
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f985 	bl	8008ef4 <__sinit>
 8008bea:	4b2e      	ldr	r3, [pc, #184]	; (8008ca4 <__swsetup_r+0xd0>)
 8008bec:	429c      	cmp	r4, r3
 8008bee:	d10f      	bne.n	8008c10 <__swsetup_r+0x3c>
 8008bf0:	686c      	ldr	r4, [r5, #4]
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bf8:	0719      	lsls	r1, r3, #28
 8008bfa:	d42c      	bmi.n	8008c56 <__swsetup_r+0x82>
 8008bfc:	06dd      	lsls	r5, r3, #27
 8008bfe:	d411      	bmi.n	8008c24 <__swsetup_r+0x50>
 8008c00:	2309      	movs	r3, #9
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	e03e      	b.n	8008c8e <__swsetup_r+0xba>
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <__swsetup_r+0xd4>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	d101      	bne.n	8008c1a <__swsetup_r+0x46>
 8008c16:	68ac      	ldr	r4, [r5, #8]
 8008c18:	e7eb      	b.n	8008bf2 <__swsetup_r+0x1e>
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <__swsetup_r+0xd8>)
 8008c1c:	429c      	cmp	r4, r3
 8008c1e:	bf08      	it	eq
 8008c20:	68ec      	ldreq	r4, [r5, #12]
 8008c22:	e7e6      	b.n	8008bf2 <__swsetup_r+0x1e>
 8008c24:	0758      	lsls	r0, r3, #29
 8008c26:	d512      	bpl.n	8008c4e <__swsetup_r+0x7a>
 8008c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c2a:	b141      	cbz	r1, 8008c3e <__swsetup_r+0x6a>
 8008c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d002      	beq.n	8008c3a <__swsetup_r+0x66>
 8008c34:	4630      	mov	r0, r6
 8008c36:	f7ff fb25 	bl	8008284 <_free_r>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c44:	81a3      	strh	r3, [r4, #12]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6063      	str	r3, [r4, #4]
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f043 0308 	orr.w	r3, r3, #8
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	b94b      	cbnz	r3, 8008c6e <__swsetup_r+0x9a>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c64:	d003      	beq.n	8008c6e <__swsetup_r+0x9a>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f000 fa09 	bl	8009080 <__smakebuf_r>
 8008c6e:	89a0      	ldrh	r0, [r4, #12]
 8008c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c74:	f010 0301 	ands.w	r3, r0, #1
 8008c78:	d00a      	beq.n	8008c90 <__swsetup_r+0xbc>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	6963      	ldr	r3, [r4, #20]
 8008c80:	425b      	negs	r3, r3
 8008c82:	61a3      	str	r3, [r4, #24]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	b943      	cbnz	r3, 8008c9a <__swsetup_r+0xc6>
 8008c88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c8c:	d1ba      	bne.n	8008c04 <__swsetup_r+0x30>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	0781      	lsls	r1, r0, #30
 8008c92:	bf58      	it	pl
 8008c94:	6963      	ldrpl	r3, [r4, #20]
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	e7f4      	b.n	8008c84 <__swsetup_r+0xb0>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e7f7      	b.n	8008c8e <__swsetup_r+0xba>
 8008c9e:	bf00      	nop
 8008ca0:	20000034 	.word	0x20000034
 8008ca4:	0800a7c4 	.word	0x0800a7c4
 8008ca8:	0800a7e4 	.word	0x0800a7e4
 8008cac:	0800a7a4 	.word	0x0800a7a4

08008cb0 <abort>:
 8008cb0:	b508      	push	{r3, lr}
 8008cb2:	2006      	movs	r0, #6
 8008cb4:	f000 fa54 	bl	8009160 <raise>
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7fb fb63 	bl	8004384 <_exit>
	...

08008cc0 <__sflush_r>:
 8008cc0:	898a      	ldrh	r2, [r1, #12]
 8008cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	0710      	lsls	r0, r2, #28
 8008cca:	460c      	mov	r4, r1
 8008ccc:	d458      	bmi.n	8008d80 <__sflush_r+0xc0>
 8008cce:	684b      	ldr	r3, [r1, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	dc05      	bgt.n	8008ce0 <__sflush_r+0x20>
 8008cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc02      	bgt.n	8008ce0 <__sflush_r+0x20>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	d0f9      	beq.n	8008cda <__sflush_r+0x1a>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cec:	682f      	ldr	r7, [r5, #0]
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	d032      	beq.n	8008d58 <__sflush_r+0x98>
 8008cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	075a      	lsls	r2, r3, #29
 8008cf8:	d505      	bpl.n	8008d06 <__sflush_r+0x46>
 8008cfa:	6863      	ldr	r3, [r4, #4]
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d00:	b10b      	cbz	r3, 8008d06 <__sflush_r+0x46>
 8008d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d04:	1ac0      	subs	r0, r0, r3
 8008d06:	2300      	movs	r3, #0
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b0      	blx	r6
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	d106      	bne.n	8008d26 <__sflush_r+0x66>
 8008d18:	6829      	ldr	r1, [r5, #0]
 8008d1a:	291d      	cmp	r1, #29
 8008d1c:	d82c      	bhi.n	8008d78 <__sflush_r+0xb8>
 8008d1e:	4a2a      	ldr	r2, [pc, #168]	; (8008dc8 <__sflush_r+0x108>)
 8008d20:	40ca      	lsrs	r2, r1
 8008d22:	07d6      	lsls	r6, r2, #31
 8008d24:	d528      	bpl.n	8008d78 <__sflush_r+0xb8>
 8008d26:	2200      	movs	r2, #0
 8008d28:	6062      	str	r2, [r4, #4]
 8008d2a:	04d9      	lsls	r1, r3, #19
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	6022      	str	r2, [r4, #0]
 8008d30:	d504      	bpl.n	8008d3c <__sflush_r+0x7c>
 8008d32:	1c42      	adds	r2, r0, #1
 8008d34:	d101      	bne.n	8008d3a <__sflush_r+0x7a>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b903      	cbnz	r3, 8008d3c <__sflush_r+0x7c>
 8008d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3e:	602f      	str	r7, [r5, #0]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d0ca      	beq.n	8008cda <__sflush_r+0x1a>
 8008d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	d002      	beq.n	8008d52 <__sflush_r+0x92>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f7ff fa99 	bl	8008284 <_free_r>
 8008d52:	2000      	movs	r0, #0
 8008d54:	6360      	str	r0, [r4, #52]	; 0x34
 8008d56:	e7c1      	b.n	8008cdc <__sflush_r+0x1c>
 8008d58:	6a21      	ldr	r1, [r4, #32]
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b0      	blx	r6
 8008d60:	1c41      	adds	r1, r0, #1
 8008d62:	d1c7      	bne.n	8008cf4 <__sflush_r+0x34>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0c4      	beq.n	8008cf4 <__sflush_r+0x34>
 8008d6a:	2b1d      	cmp	r3, #29
 8008d6c:	d001      	beq.n	8008d72 <__sflush_r+0xb2>
 8008d6e:	2b16      	cmp	r3, #22
 8008d70:	d101      	bne.n	8008d76 <__sflush_r+0xb6>
 8008d72:	602f      	str	r7, [r5, #0]
 8008d74:	e7b1      	b.n	8008cda <__sflush_r+0x1a>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	e7ad      	b.n	8008cdc <__sflush_r+0x1c>
 8008d80:	690f      	ldr	r7, [r1, #16]
 8008d82:	2f00      	cmp	r7, #0
 8008d84:	d0a9      	beq.n	8008cda <__sflush_r+0x1a>
 8008d86:	0793      	lsls	r3, r2, #30
 8008d88:	680e      	ldr	r6, [r1, #0]
 8008d8a:	bf08      	it	eq
 8008d8c:	694b      	ldreq	r3, [r1, #20]
 8008d8e:	600f      	str	r7, [r1, #0]
 8008d90:	bf18      	it	ne
 8008d92:	2300      	movne	r3, #0
 8008d94:	eba6 0807 	sub.w	r8, r6, r7
 8008d98:	608b      	str	r3, [r1, #8]
 8008d9a:	f1b8 0f00 	cmp.w	r8, #0
 8008d9e:	dd9c      	ble.n	8008cda <__sflush_r+0x1a>
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008da4:	4643      	mov	r3, r8
 8008da6:	463a      	mov	r2, r7
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	2800      	cmp	r0, #0
 8008dae:	dc06      	bgt.n	8008dbe <__sflush_r+0xfe>
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	e78e      	b.n	8008cdc <__sflush_r+0x1c>
 8008dbe:	4407      	add	r7, r0
 8008dc0:	eba8 0800 	sub.w	r8, r8, r0
 8008dc4:	e7e9      	b.n	8008d9a <__sflush_r+0xda>
 8008dc6:	bf00      	nop
 8008dc8:	20400001 	.word	0x20400001

08008dcc <_fflush_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	690b      	ldr	r3, [r1, #16]
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b913      	cbnz	r3, 8008ddc <_fflush_r+0x10>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	4628      	mov	r0, r5
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	b118      	cbz	r0, 8008de6 <_fflush_r+0x1a>
 8008dde:	6983      	ldr	r3, [r0, #24]
 8008de0:	b90b      	cbnz	r3, 8008de6 <_fflush_r+0x1a>
 8008de2:	f000 f887 	bl	8008ef4 <__sinit>
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <_fflush_r+0x6c>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	d11b      	bne.n	8008e24 <_fflush_r+0x58>
 8008dec:	686c      	ldr	r4, [r5, #4]
 8008dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0ef      	beq.n	8008dd6 <_fflush_r+0xa>
 8008df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008df8:	07d0      	lsls	r0, r2, #31
 8008dfa:	d404      	bmi.n	8008e06 <_fflush_r+0x3a>
 8008dfc:	0599      	lsls	r1, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_fflush_r+0x3a>
 8008e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e02:	f000 f915 	bl	8009030 <__retarget_lock_acquire_recursive>
 8008e06:	4628      	mov	r0, r5
 8008e08:	4621      	mov	r1, r4
 8008e0a:	f7ff ff59 	bl	8008cc0 <__sflush_r>
 8008e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e10:	07da      	lsls	r2, r3, #31
 8008e12:	4605      	mov	r5, r0
 8008e14:	d4e0      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	059b      	lsls	r3, r3, #22
 8008e1a:	d4dd      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1e:	f000 f908 	bl	8009032 <__retarget_lock_release_recursive>
 8008e22:	e7d9      	b.n	8008dd8 <_fflush_r+0xc>
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <_fflush_r+0x70>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d101      	bne.n	8008e2e <_fflush_r+0x62>
 8008e2a:	68ac      	ldr	r4, [r5, #8]
 8008e2c:	e7df      	b.n	8008dee <_fflush_r+0x22>
 8008e2e:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <_fflush_r+0x74>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	bf08      	it	eq
 8008e34:	68ec      	ldreq	r4, [r5, #12]
 8008e36:	e7da      	b.n	8008dee <_fflush_r+0x22>
 8008e38:	0800a7c4 	.word	0x0800a7c4
 8008e3c:	0800a7e4 	.word	0x0800a7e4
 8008e40:	0800a7a4 	.word	0x0800a7a4

08008e44 <std>:
 8008e44:	2300      	movs	r3, #0
 8008e46:	b510      	push	{r4, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e52:	6083      	str	r3, [r0, #8]
 8008e54:	8181      	strh	r1, [r0, #12]
 8008e56:	6643      	str	r3, [r0, #100]	; 0x64
 8008e58:	81c2      	strh	r2, [r0, #14]
 8008e5a:	6183      	str	r3, [r0, #24]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	2208      	movs	r2, #8
 8008e60:	305c      	adds	r0, #92	; 0x5c
 8008e62:	f7fb fdcd 	bl	8004a00 <memset>
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <std+0x38>)
 8008e68:	6263      	str	r3, [r4, #36]	; 0x24
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <std+0x3c>)
 8008e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <std+0x40>)
 8008e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e72:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <std+0x44>)
 8008e74:	6224      	str	r4, [r4, #32]
 8008e76:	6323      	str	r3, [r4, #48]	; 0x30
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08009199 	.word	0x08009199
 8008e80:	080091bb 	.word	0x080091bb
 8008e84:	080091f3 	.word	0x080091f3
 8008e88:	08009217 	.word	0x08009217

08008e8c <_cleanup_r>:
 8008e8c:	4901      	ldr	r1, [pc, #4]	; (8008e94 <_cleanup_r+0x8>)
 8008e8e:	f000 b8af 	b.w	8008ff0 <_fwalk_reent>
 8008e92:	bf00      	nop
 8008e94:	08008dcd 	.word	0x08008dcd

08008e98 <__sfmoreglue>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	2268      	movs	r2, #104	; 0x68
 8008e9c:	1e4d      	subs	r5, r1, #1
 8008e9e:	4355      	muls	r5, r2
 8008ea0:	460e      	mov	r6, r1
 8008ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ea6:	f7ff fa59 	bl	800835c <_malloc_r>
 8008eaa:	4604      	mov	r4, r0
 8008eac:	b140      	cbz	r0, 8008ec0 <__sfmoreglue+0x28>
 8008eae:	2100      	movs	r1, #0
 8008eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8008eb4:	300c      	adds	r0, #12
 8008eb6:	60a0      	str	r0, [r4, #8]
 8008eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ebc:	f7fb fda0 	bl	8004a00 <memset>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}

08008ec4 <__sfp_lock_acquire>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	; (8008ecc <__sfp_lock_acquire+0x8>)
 8008ec6:	f000 b8b3 	b.w	8009030 <__retarget_lock_acquire_recursive>
 8008eca:	bf00      	nop
 8008ecc:	200003f9 	.word	0x200003f9

08008ed0 <__sfp_lock_release>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__sfp_lock_release+0x8>)
 8008ed2:	f000 b8ae 	b.w	8009032 <__retarget_lock_release_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	200003f9 	.word	0x200003f9

08008edc <__sinit_lock_acquire>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__sinit_lock_acquire+0x8>)
 8008ede:	f000 b8a7 	b.w	8009030 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	200003fa 	.word	0x200003fa

08008ee8 <__sinit_lock_release>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__sinit_lock_release+0x8>)
 8008eea:	f000 b8a2 	b.w	8009032 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	200003fa 	.word	0x200003fa

08008ef4 <__sinit>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	f7ff fff0 	bl	8008edc <__sinit_lock_acquire>
 8008efc:	69a3      	ldr	r3, [r4, #24]
 8008efe:	b11b      	cbz	r3, 8008f08 <__sinit+0x14>
 8008f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f04:	f7ff bff0 	b.w	8008ee8 <__sinit_lock_release>
 8008f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f0e:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <__sinit+0x68>)
 8008f10:	4a13      	ldr	r2, [pc, #76]	; (8008f60 <__sinit+0x6c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	bf04      	itt	eq
 8008f1a:	2301      	moveq	r3, #1
 8008f1c:	61a3      	streq	r3, [r4, #24]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 f820 	bl	8008f64 <__sfp>
 8008f24:	6060      	str	r0, [r4, #4]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 f81c 	bl	8008f64 <__sfp>
 8008f2c:	60a0      	str	r0, [r4, #8]
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 f818 	bl	8008f64 <__sfp>
 8008f34:	2200      	movs	r2, #0
 8008f36:	60e0      	str	r0, [r4, #12]
 8008f38:	2104      	movs	r1, #4
 8008f3a:	6860      	ldr	r0, [r4, #4]
 8008f3c:	f7ff ff82 	bl	8008e44 <std>
 8008f40:	68a0      	ldr	r0, [r4, #8]
 8008f42:	2201      	movs	r2, #1
 8008f44:	2109      	movs	r1, #9
 8008f46:	f7ff ff7d 	bl	8008e44 <std>
 8008f4a:	68e0      	ldr	r0, [r4, #12]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	2112      	movs	r1, #18
 8008f50:	f7ff ff78 	bl	8008e44 <std>
 8008f54:	2301      	movs	r3, #1
 8008f56:	61a3      	str	r3, [r4, #24]
 8008f58:	e7d2      	b.n	8008f00 <__sinit+0xc>
 8008f5a:	bf00      	nop
 8008f5c:	0800a360 	.word	0x0800a360
 8008f60:	08008e8d 	.word	0x08008e8d

08008f64 <__sfp>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	4607      	mov	r7, r0
 8008f68:	f7ff ffac 	bl	8008ec4 <__sfp_lock_acquire>
 8008f6c:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <__sfp+0x84>)
 8008f6e:	681e      	ldr	r6, [r3, #0]
 8008f70:	69b3      	ldr	r3, [r6, #24]
 8008f72:	b913      	cbnz	r3, 8008f7a <__sfp+0x16>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff ffbd 	bl	8008ef4 <__sinit>
 8008f7a:	3648      	adds	r6, #72	; 0x48
 8008f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	d503      	bpl.n	8008f8c <__sfp+0x28>
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	b30b      	cbz	r3, 8008fcc <__sfp+0x68>
 8008f88:	6836      	ldr	r6, [r6, #0]
 8008f8a:	e7f7      	b.n	8008f7c <__sfp+0x18>
 8008f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f90:	b9d5      	cbnz	r5, 8008fc8 <__sfp+0x64>
 8008f92:	4b16      	ldr	r3, [pc, #88]	; (8008fec <__sfp+0x88>)
 8008f94:	60e3      	str	r3, [r4, #12]
 8008f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f9c:	f000 f847 	bl	800902e <__retarget_lock_init_recursive>
 8008fa0:	f7ff ff96 	bl	8008ed0 <__sfp_lock_release>
 8008fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fac:	6025      	str	r5, [r4, #0]
 8008fae:	61a5      	str	r5, [r4, #24]
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fb8:	f7fb fd22 	bl	8004a00 <memset>
 8008fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc8:	3468      	adds	r4, #104	; 0x68
 8008fca:	e7d9      	b.n	8008f80 <__sfp+0x1c>
 8008fcc:	2104      	movs	r1, #4
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f7ff ff62 	bl	8008e98 <__sfmoreglue>
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	6030      	str	r0, [r6, #0]
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d1d5      	bne.n	8008f88 <__sfp+0x24>
 8008fdc:	f7ff ff78 	bl	8008ed0 <__sfp_lock_release>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	e7ee      	b.n	8008fc4 <__sfp+0x60>
 8008fe6:	bf00      	nop
 8008fe8:	0800a360 	.word	0x0800a360
 8008fec:	ffff0001 	.word	0xffff0001

08008ff0 <_fwalk_reent>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	4688      	mov	r8, r1
 8008ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ffc:	2700      	movs	r7, #0
 8008ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009002:	f1b9 0901 	subs.w	r9, r9, #1
 8009006:	d505      	bpl.n	8009014 <_fwalk_reent+0x24>
 8009008:	6824      	ldr	r4, [r4, #0]
 800900a:	2c00      	cmp	r4, #0
 800900c:	d1f7      	bne.n	8008ffe <_fwalk_reent+0xe>
 800900e:	4638      	mov	r0, r7
 8009010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009014:	89ab      	ldrh	r3, [r5, #12]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d907      	bls.n	800902a <_fwalk_reent+0x3a>
 800901a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800901e:	3301      	adds	r3, #1
 8009020:	d003      	beq.n	800902a <_fwalk_reent+0x3a>
 8009022:	4629      	mov	r1, r5
 8009024:	4630      	mov	r0, r6
 8009026:	47c0      	blx	r8
 8009028:	4307      	orrs	r7, r0
 800902a:	3568      	adds	r5, #104	; 0x68
 800902c:	e7e9      	b.n	8009002 <_fwalk_reent+0x12>

0800902e <__retarget_lock_init_recursive>:
 800902e:	4770      	bx	lr

08009030 <__retarget_lock_acquire_recursive>:
 8009030:	4770      	bx	lr

08009032 <__retarget_lock_release_recursive>:
 8009032:	4770      	bx	lr

08009034 <__swhatbuf_r>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	460e      	mov	r6, r1
 8009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903c:	2900      	cmp	r1, #0
 800903e:	b096      	sub	sp, #88	; 0x58
 8009040:	4614      	mov	r4, r2
 8009042:	461d      	mov	r5, r3
 8009044:	da08      	bge.n	8009058 <__swhatbuf_r+0x24>
 8009046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	061a      	lsls	r2, r3, #24
 8009050:	d410      	bmi.n	8009074 <__swhatbuf_r+0x40>
 8009052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009056:	e00e      	b.n	8009076 <__swhatbuf_r+0x42>
 8009058:	466a      	mov	r2, sp
 800905a:	f000 f903 	bl	8009264 <_fstat_r>
 800905e:	2800      	cmp	r0, #0
 8009060:	dbf1      	blt.n	8009046 <__swhatbuf_r+0x12>
 8009062:	9a01      	ldr	r2, [sp, #4]
 8009064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800906c:	425a      	negs	r2, r3
 800906e:	415a      	adcs	r2, r3
 8009070:	602a      	str	r2, [r5, #0]
 8009072:	e7ee      	b.n	8009052 <__swhatbuf_r+0x1e>
 8009074:	2340      	movs	r3, #64	; 0x40
 8009076:	2000      	movs	r0, #0
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	b016      	add	sp, #88	; 0x58
 800907c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009080 <__smakebuf_r>:
 8009080:	898b      	ldrh	r3, [r1, #12]
 8009082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009084:	079d      	lsls	r5, r3, #30
 8009086:	4606      	mov	r6, r0
 8009088:	460c      	mov	r4, r1
 800908a:	d507      	bpl.n	800909c <__smakebuf_r+0x1c>
 800908c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	2301      	movs	r3, #1
 8009096:	6163      	str	r3, [r4, #20]
 8009098:	b002      	add	sp, #8
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	ab01      	add	r3, sp, #4
 800909e:	466a      	mov	r2, sp
 80090a0:	f7ff ffc8 	bl	8009034 <__swhatbuf_r>
 80090a4:	9900      	ldr	r1, [sp, #0]
 80090a6:	4605      	mov	r5, r0
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff f957 	bl	800835c <_malloc_r>
 80090ae:	b948      	cbnz	r0, 80090c4 <__smakebuf_r+0x44>
 80090b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b4:	059a      	lsls	r2, r3, #22
 80090b6:	d4ef      	bmi.n	8009098 <__smakebuf_r+0x18>
 80090b8:	f023 0303 	bic.w	r3, r3, #3
 80090bc:	f043 0302 	orr.w	r3, r3, #2
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	e7e3      	b.n	800908c <__smakebuf_r+0xc>
 80090c4:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <__smakebuf_r+0x7c>)
 80090c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	6020      	str	r0, [r4, #0]
 80090cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	9b00      	ldr	r3, [sp, #0]
 80090d4:	6163      	str	r3, [r4, #20]
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	6120      	str	r0, [r4, #16]
 80090da:	b15b      	cbz	r3, 80090f4 <__smakebuf_r+0x74>
 80090dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 f8d1 	bl	8009288 <_isatty_r>
 80090e6:	b128      	cbz	r0, 80090f4 <__smakebuf_r+0x74>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f023 0303 	bic.w	r3, r3, #3
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	89a0      	ldrh	r0, [r4, #12]
 80090f6:	4305      	orrs	r5, r0
 80090f8:	81a5      	strh	r5, [r4, #12]
 80090fa:	e7cd      	b.n	8009098 <__smakebuf_r+0x18>
 80090fc:	08008e8d 	.word	0x08008e8d

08009100 <_malloc_usable_size_r>:
 8009100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009104:	1f18      	subs	r0, r3, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfbc      	itt	lt
 800910a:	580b      	ldrlt	r3, [r1, r0]
 800910c:	18c0      	addlt	r0, r0, r3
 800910e:	4770      	bx	lr

08009110 <_raise_r>:
 8009110:	291f      	cmp	r1, #31
 8009112:	b538      	push	{r3, r4, r5, lr}
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	d904      	bls.n	8009124 <_raise_r+0x14>
 800911a:	2316      	movs	r3, #22
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009126:	b112      	cbz	r2, 800912e <_raise_r+0x1e>
 8009128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800912c:	b94b      	cbnz	r3, 8009142 <_raise_r+0x32>
 800912e:	4620      	mov	r0, r4
 8009130:	f000 f830 	bl	8009194 <_getpid_r>
 8009134:	462a      	mov	r2, r5
 8009136:	4601      	mov	r1, r0
 8009138:	4620      	mov	r0, r4
 800913a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913e:	f000 b817 	b.w	8009170 <_kill_r>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d00a      	beq.n	800915c <_raise_r+0x4c>
 8009146:	1c59      	adds	r1, r3, #1
 8009148:	d103      	bne.n	8009152 <_raise_r+0x42>
 800914a:	2316      	movs	r3, #22
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	2001      	movs	r0, #1
 8009150:	e7e7      	b.n	8009122 <_raise_r+0x12>
 8009152:	2400      	movs	r4, #0
 8009154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009158:	4628      	mov	r0, r5
 800915a:	4798      	blx	r3
 800915c:	2000      	movs	r0, #0
 800915e:	e7e0      	b.n	8009122 <_raise_r+0x12>

08009160 <raise>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <raise+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f7ff bfd3 	b.w	8009110 <_raise_r>
 800916a:	bf00      	nop
 800916c:	20000034 	.word	0x20000034

08009170 <_kill_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	; (8009190 <_kill_r+0x20>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	4611      	mov	r1, r2
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f7fb f8f1 	bl	8004364 <_kill>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d102      	bne.n	800918c <_kill_r+0x1c>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	b103      	cbz	r3, 800918c <_kill_r+0x1c>
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	200003f4 	.word	0x200003f4

08009194 <_getpid_r>:
 8009194:	f7fb b8de 	b.w	8004354 <_getpid>

08009198 <__sread>:
 8009198:	b510      	push	{r4, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	f000 f894 	bl	80092cc <_read_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	bfab      	itete	ge
 80091a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091aa:	89a3      	ldrhlt	r3, [r4, #12]
 80091ac:	181b      	addge	r3, r3, r0
 80091ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091b2:	bfac      	ite	ge
 80091b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091b6:	81a3      	strhlt	r3, [r4, #12]
 80091b8:	bd10      	pop	{r4, pc}

080091ba <__swrite>:
 80091ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091be:	461f      	mov	r7, r3
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	05db      	lsls	r3, r3, #23
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	4616      	mov	r6, r2
 80091ca:	d505      	bpl.n	80091d8 <__swrite+0x1e>
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2302      	movs	r3, #2
 80091d2:	2200      	movs	r2, #0
 80091d4:	f000 f868 	bl	80092a8 <_lseek_r>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ee:	f000 b817 	b.w	8009220 <_write_r>

080091f2 <__sseek>:
 80091f2:	b510      	push	{r4, lr}
 80091f4:	460c      	mov	r4, r1
 80091f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fa:	f000 f855 	bl	80092a8 <_lseek_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	bf15      	itete	ne
 8009204:	6560      	strne	r0, [r4, #84]	; 0x54
 8009206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800920a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800920e:	81a3      	strheq	r3, [r4, #12]
 8009210:	bf18      	it	ne
 8009212:	81a3      	strhne	r3, [r4, #12]
 8009214:	bd10      	pop	{r4, pc}

08009216 <__sclose>:
 8009216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921a:	f000 b813 	b.w	8009244 <_close_r>
	...

08009220 <_write_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	; (8009240 <_write_r+0x20>)
 8009224:	4604      	mov	r4, r0
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	2200      	movs	r2, #0
 800922c:	602a      	str	r2, [r5, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7fb f8cf 	bl	80043d2 <_write>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_write_r+0x1e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_write_r+0x1e>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	200003f4 	.word	0x200003f4

08009244 <_close_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d06      	ldr	r5, [pc, #24]	; (8009260 <_close_r+0x1c>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7fb f8db 	bl	800440a <_close>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_close_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_close_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	200003f4 	.word	0x200003f4

08009264 <_fstat_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	; (8009284 <_fstat_r+0x20>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	4611      	mov	r1, r2
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	f7fb f8d6 	bl	8004422 <_fstat>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d102      	bne.n	8009280 <_fstat_r+0x1c>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	b103      	cbz	r3, 8009280 <_fstat_r+0x1c>
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	bf00      	nop
 8009284:	200003f4 	.word	0x200003f4

08009288 <_isatty_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d06      	ldr	r5, [pc, #24]	; (80092a4 <_isatty_r+0x1c>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7fb f8d5 	bl	8004442 <_isatty>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_isatty_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_isatty_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	200003f4 	.word	0x200003f4

080092a8 <_lseek_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d07      	ldr	r5, [pc, #28]	; (80092c8 <_lseek_r+0x20>)
 80092ac:	4604      	mov	r4, r0
 80092ae:	4608      	mov	r0, r1
 80092b0:	4611      	mov	r1, r2
 80092b2:	2200      	movs	r2, #0
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	f7fb f8ce 	bl	8004458 <_lseek>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_lseek_r+0x1e>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_lseek_r+0x1e>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200003f4 	.word	0x200003f4

080092cc <_read_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d07      	ldr	r5, [pc, #28]	; (80092ec <_read_r+0x20>)
 80092d0:	4604      	mov	r4, r0
 80092d2:	4608      	mov	r0, r1
 80092d4:	4611      	mov	r1, r2
 80092d6:	2200      	movs	r2, #0
 80092d8:	602a      	str	r2, [r5, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f7fb f85c 	bl	8004398 <_read>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_read_r+0x1e>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_read_r+0x1e>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200003f4 	.word	0x200003f4

080092f0 <cosf>:
 80092f0:	ee10 3a10 	vmov	r3, s0
 80092f4:	b507      	push	{r0, r1, r2, lr}
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <cosf+0x80>)
 80092f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092fc:	4293      	cmp	r3, r2
 80092fe:	dc06      	bgt.n	800930e <cosf+0x1e>
 8009300:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009374 <cosf+0x84>
 8009304:	b003      	add	sp, #12
 8009306:	f85d eb04 	ldr.w	lr, [sp], #4
 800930a:	f000 ba85 	b.w	8009818 <__kernel_cosf>
 800930e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009312:	db04      	blt.n	800931e <cosf+0x2e>
 8009314:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009318:	b003      	add	sp, #12
 800931a:	f85d fb04 	ldr.w	pc, [sp], #4
 800931e:	4668      	mov	r0, sp
 8009320:	f000 f93e 	bl	80095a0 <__ieee754_rem_pio2f>
 8009324:	f000 0003 	and.w	r0, r0, #3
 8009328:	2801      	cmp	r0, #1
 800932a:	d009      	beq.n	8009340 <cosf+0x50>
 800932c:	2802      	cmp	r0, #2
 800932e:	d010      	beq.n	8009352 <cosf+0x62>
 8009330:	b9b0      	cbnz	r0, 8009360 <cosf+0x70>
 8009332:	eddd 0a01 	vldr	s1, [sp, #4]
 8009336:	ed9d 0a00 	vldr	s0, [sp]
 800933a:	f000 fa6d 	bl	8009818 <__kernel_cosf>
 800933e:	e7eb      	b.n	8009318 <cosf+0x28>
 8009340:	eddd 0a01 	vldr	s1, [sp, #4]
 8009344:	ed9d 0a00 	vldr	s0, [sp]
 8009348:	f000 fd3c 	bl	8009dc4 <__kernel_sinf>
 800934c:	eeb1 0a40 	vneg.f32	s0, s0
 8009350:	e7e2      	b.n	8009318 <cosf+0x28>
 8009352:	eddd 0a01 	vldr	s1, [sp, #4]
 8009356:	ed9d 0a00 	vldr	s0, [sp]
 800935a:	f000 fa5d 	bl	8009818 <__kernel_cosf>
 800935e:	e7f5      	b.n	800934c <cosf+0x5c>
 8009360:	eddd 0a01 	vldr	s1, [sp, #4]
 8009364:	ed9d 0a00 	vldr	s0, [sp]
 8009368:	2001      	movs	r0, #1
 800936a:	f000 fd2b 	bl	8009dc4 <__kernel_sinf>
 800936e:	e7d3      	b.n	8009318 <cosf+0x28>
 8009370:	3f490fd8 	.word	0x3f490fd8
 8009374:	00000000 	.word	0x00000000

08009378 <sinf>:
 8009378:	ee10 3a10 	vmov	r3, s0
 800937c:	b507      	push	{r0, r1, r2, lr}
 800937e:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <sinf+0x84>)
 8009380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009384:	4293      	cmp	r3, r2
 8009386:	dc07      	bgt.n	8009398 <sinf+0x20>
 8009388:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009400 <sinf+0x88>
 800938c:	2000      	movs	r0, #0
 800938e:	b003      	add	sp, #12
 8009390:	f85d eb04 	ldr.w	lr, [sp], #4
 8009394:	f000 bd16 	b.w	8009dc4 <__kernel_sinf>
 8009398:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800939c:	db04      	blt.n	80093a8 <sinf+0x30>
 800939e:	ee30 0a40 	vsub.f32	s0, s0, s0
 80093a2:	b003      	add	sp, #12
 80093a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a8:	4668      	mov	r0, sp
 80093aa:	f000 f8f9 	bl	80095a0 <__ieee754_rem_pio2f>
 80093ae:	f000 0003 	and.w	r0, r0, #3
 80093b2:	2801      	cmp	r0, #1
 80093b4:	d00a      	beq.n	80093cc <sinf+0x54>
 80093b6:	2802      	cmp	r0, #2
 80093b8:	d00f      	beq.n	80093da <sinf+0x62>
 80093ba:	b9c0      	cbnz	r0, 80093ee <sinf+0x76>
 80093bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80093c0:	ed9d 0a00 	vldr	s0, [sp]
 80093c4:	2001      	movs	r0, #1
 80093c6:	f000 fcfd 	bl	8009dc4 <__kernel_sinf>
 80093ca:	e7ea      	b.n	80093a2 <sinf+0x2a>
 80093cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80093d0:	ed9d 0a00 	vldr	s0, [sp]
 80093d4:	f000 fa20 	bl	8009818 <__kernel_cosf>
 80093d8:	e7e3      	b.n	80093a2 <sinf+0x2a>
 80093da:	eddd 0a01 	vldr	s1, [sp, #4]
 80093de:	ed9d 0a00 	vldr	s0, [sp]
 80093e2:	2001      	movs	r0, #1
 80093e4:	f000 fcee 	bl	8009dc4 <__kernel_sinf>
 80093e8:	eeb1 0a40 	vneg.f32	s0, s0
 80093ec:	e7d9      	b.n	80093a2 <sinf+0x2a>
 80093ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80093f2:	ed9d 0a00 	vldr	s0, [sp]
 80093f6:	f000 fa0f 	bl	8009818 <__kernel_cosf>
 80093fa:	e7f5      	b.n	80093e8 <sinf+0x70>
 80093fc:	3f490fd8 	.word	0x3f490fd8
 8009400:	00000000 	.word	0x00000000

08009404 <tanf>:
 8009404:	ee10 3a10 	vmov	r3, s0
 8009408:	b507      	push	{r0, r1, r2, lr}
 800940a:	4a12      	ldr	r2, [pc, #72]	; (8009454 <tanf+0x50>)
 800940c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009410:	4293      	cmp	r3, r2
 8009412:	dc07      	bgt.n	8009424 <tanf+0x20>
 8009414:	eddf 0a10 	vldr	s1, [pc, #64]	; 8009458 <tanf+0x54>
 8009418:	2001      	movs	r0, #1
 800941a:	b003      	add	sp, #12
 800941c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009420:	f000 bd18 	b.w	8009e54 <__kernel_tanf>
 8009424:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009428:	db04      	blt.n	8009434 <tanf+0x30>
 800942a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800942e:	b003      	add	sp, #12
 8009430:	f85d fb04 	ldr.w	pc, [sp], #4
 8009434:	4668      	mov	r0, sp
 8009436:	f000 f8b3 	bl	80095a0 <__ieee754_rem_pio2f>
 800943a:	0040      	lsls	r0, r0, #1
 800943c:	f000 0002 	and.w	r0, r0, #2
 8009440:	eddd 0a01 	vldr	s1, [sp, #4]
 8009444:	ed9d 0a00 	vldr	s0, [sp]
 8009448:	f1c0 0001 	rsb	r0, r0, #1
 800944c:	f000 fd02 	bl	8009e54 <__kernel_tanf>
 8009450:	e7ed      	b.n	800942e <tanf+0x2a>
 8009452:	bf00      	nop
 8009454:	3f490fda 	.word	0x3f490fda
 8009458:	00000000 	.word	0x00000000

0800945c <atan2f>:
 800945c:	f000 b800 	b.w	8009460 <__ieee754_atan2f>

08009460 <__ieee754_atan2f>:
 8009460:	ee10 2a90 	vmov	r2, s1
 8009464:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009468:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800946c:	b510      	push	{r4, lr}
 800946e:	eef0 7a40 	vmov.f32	s15, s0
 8009472:	dc06      	bgt.n	8009482 <__ieee754_atan2f+0x22>
 8009474:	ee10 0a10 	vmov	r0, s0
 8009478:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800947c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009480:	dd04      	ble.n	800948c <__ieee754_atan2f+0x2c>
 8009482:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009486:	eeb0 0a67 	vmov.f32	s0, s15
 800948a:	bd10      	pop	{r4, pc}
 800948c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009490:	d103      	bne.n	800949a <__ieee754_atan2f+0x3a>
 8009492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009496:	f000 bdbd 	b.w	800a014 <atanf>
 800949a:	1794      	asrs	r4, r2, #30
 800949c:	f004 0402 	and.w	r4, r4, #2
 80094a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80094a4:	b943      	cbnz	r3, 80094b8 <__ieee754_atan2f+0x58>
 80094a6:	2c02      	cmp	r4, #2
 80094a8:	d05e      	beq.n	8009568 <__ieee754_atan2f+0x108>
 80094aa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800957c <__ieee754_atan2f+0x11c>
 80094ae:	2c03      	cmp	r4, #3
 80094b0:	bf08      	it	eq
 80094b2:	eef0 7a47 	vmoveq.f32	s15, s14
 80094b6:	e7e6      	b.n	8009486 <__ieee754_atan2f+0x26>
 80094b8:	b941      	cbnz	r1, 80094cc <__ieee754_atan2f+0x6c>
 80094ba:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009580 <__ieee754_atan2f+0x120>
 80094be:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009584 <__ieee754_atan2f+0x124>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	bfb8      	it	lt
 80094c6:	eef0 7a40 	vmovlt.f32	s15, s0
 80094ca:	e7dc      	b.n	8009486 <__ieee754_atan2f+0x26>
 80094cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80094d0:	d110      	bne.n	80094f4 <__ieee754_atan2f+0x94>
 80094d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80094da:	d107      	bne.n	80094ec <__ieee754_atan2f+0x8c>
 80094dc:	2c02      	cmp	r4, #2
 80094de:	d846      	bhi.n	800956e <__ieee754_atan2f+0x10e>
 80094e0:	4b29      	ldr	r3, [pc, #164]	; (8009588 <__ieee754_atan2f+0x128>)
 80094e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094e6:	edd4 7a00 	vldr	s15, [r4]
 80094ea:	e7cc      	b.n	8009486 <__ieee754_atan2f+0x26>
 80094ec:	2c02      	cmp	r4, #2
 80094ee:	d841      	bhi.n	8009574 <__ieee754_atan2f+0x114>
 80094f0:	4b26      	ldr	r3, [pc, #152]	; (800958c <__ieee754_atan2f+0x12c>)
 80094f2:	e7f6      	b.n	80094e2 <__ieee754_atan2f+0x82>
 80094f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094f8:	d0df      	beq.n	80094ba <__ieee754_atan2f+0x5a>
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009500:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009504:	da1a      	bge.n	800953c <__ieee754_atan2f+0xdc>
 8009506:	2a00      	cmp	r2, #0
 8009508:	da01      	bge.n	800950e <__ieee754_atan2f+0xae>
 800950a:	313c      	adds	r1, #60	; 0x3c
 800950c:	db19      	blt.n	8009542 <__ieee754_atan2f+0xe2>
 800950e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009512:	f000 fe53 	bl	800a1bc <fabsf>
 8009516:	f000 fd7d 	bl	800a014 <atanf>
 800951a:	eef0 7a40 	vmov.f32	s15, s0
 800951e:	2c01      	cmp	r4, #1
 8009520:	d012      	beq.n	8009548 <__ieee754_atan2f+0xe8>
 8009522:	2c02      	cmp	r4, #2
 8009524:	d017      	beq.n	8009556 <__ieee754_atan2f+0xf6>
 8009526:	2c00      	cmp	r4, #0
 8009528:	d0ad      	beq.n	8009486 <__ieee754_atan2f+0x26>
 800952a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009590 <__ieee754_atan2f+0x130>
 800952e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009532:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009594 <__ieee754_atan2f+0x134>
 8009536:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800953a:	e7a4      	b.n	8009486 <__ieee754_atan2f+0x26>
 800953c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009580 <__ieee754_atan2f+0x120>
 8009540:	e7ed      	b.n	800951e <__ieee754_atan2f+0xbe>
 8009542:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009598 <__ieee754_atan2f+0x138>
 8009546:	e7ea      	b.n	800951e <__ieee754_atan2f+0xbe>
 8009548:	ee17 3a90 	vmov	r3, s15
 800954c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009550:	ee07 3a90 	vmov	s15, r3
 8009554:	e797      	b.n	8009486 <__ieee754_atan2f+0x26>
 8009556:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009590 <__ieee754_atan2f+0x130>
 800955a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800955e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009594 <__ieee754_atan2f+0x134>
 8009562:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009566:	e78e      	b.n	8009486 <__ieee754_atan2f+0x26>
 8009568:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009594 <__ieee754_atan2f+0x134>
 800956c:	e78b      	b.n	8009486 <__ieee754_atan2f+0x26>
 800956e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800959c <__ieee754_atan2f+0x13c>
 8009572:	e788      	b.n	8009486 <__ieee754_atan2f+0x26>
 8009574:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009598 <__ieee754_atan2f+0x138>
 8009578:	e785      	b.n	8009486 <__ieee754_atan2f+0x26>
 800957a:	bf00      	nop
 800957c:	c0490fdb 	.word	0xc0490fdb
 8009580:	3fc90fdb 	.word	0x3fc90fdb
 8009584:	bfc90fdb 	.word	0xbfc90fdb
 8009588:	0800a804 	.word	0x0800a804
 800958c:	0800a810 	.word	0x0800a810
 8009590:	33bbbd2e 	.word	0x33bbbd2e
 8009594:	40490fdb 	.word	0x40490fdb
 8009598:	00000000 	.word	0x00000000
 800959c:	3f490fdb 	.word	0x3f490fdb

080095a0 <__ieee754_rem_pio2f>:
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	ee10 6a10 	vmov	r6, s0
 80095a6:	4b8e      	ldr	r3, [pc, #568]	; (80097e0 <__ieee754_rem_pio2f+0x240>)
 80095a8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80095ac:	429d      	cmp	r5, r3
 80095ae:	b087      	sub	sp, #28
 80095b0:	eef0 7a40 	vmov.f32	s15, s0
 80095b4:	4604      	mov	r4, r0
 80095b6:	dc05      	bgt.n	80095c4 <__ieee754_rem_pio2f+0x24>
 80095b8:	2300      	movs	r3, #0
 80095ba:	ed80 0a00 	vstr	s0, [r0]
 80095be:	6043      	str	r3, [r0, #4]
 80095c0:	2000      	movs	r0, #0
 80095c2:	e01a      	b.n	80095fa <__ieee754_rem_pio2f+0x5a>
 80095c4:	4b87      	ldr	r3, [pc, #540]	; (80097e4 <__ieee754_rem_pio2f+0x244>)
 80095c6:	429d      	cmp	r5, r3
 80095c8:	dc46      	bgt.n	8009658 <__ieee754_rem_pio2f+0xb8>
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80097e8 <__ieee754_rem_pio2f+0x248>
 80095d0:	4b86      	ldr	r3, [pc, #536]	; (80097ec <__ieee754_rem_pio2f+0x24c>)
 80095d2:	f025 050f 	bic.w	r5, r5, #15
 80095d6:	dd1f      	ble.n	8009618 <__ieee754_rem_pio2f+0x78>
 80095d8:	429d      	cmp	r5, r3
 80095da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095de:	d00e      	beq.n	80095fe <__ieee754_rem_pio2f+0x5e>
 80095e0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80097f0 <__ieee754_rem_pio2f+0x250>
 80095e4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80095e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095ec:	ed80 0a00 	vstr	s0, [r0]
 80095f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095f4:	2001      	movs	r0, #1
 80095f6:	edc4 7a01 	vstr	s15, [r4, #4]
 80095fa:	b007      	add	sp, #28
 80095fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80097f4 <__ieee754_rem_pio2f+0x254>
 8009602:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80097f8 <__ieee754_rem_pio2f+0x258>
 8009606:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800960a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800960e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009612:	edc0 6a00 	vstr	s13, [r0]
 8009616:	e7eb      	b.n	80095f0 <__ieee754_rem_pio2f+0x50>
 8009618:	429d      	cmp	r5, r3
 800961a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800961e:	d00e      	beq.n	800963e <__ieee754_rem_pio2f+0x9e>
 8009620:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80097f0 <__ieee754_rem_pio2f+0x250>
 8009624:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009628:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800962c:	ed80 0a00 	vstr	s0, [r0]
 8009630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	edc4 7a01 	vstr	s15, [r4, #4]
 800963c:	e7dd      	b.n	80095fa <__ieee754_rem_pio2f+0x5a>
 800963e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80097f4 <__ieee754_rem_pio2f+0x254>
 8009642:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80097f8 <__ieee754_rem_pio2f+0x258>
 8009646:	ee77 7a80 	vadd.f32	s15, s15, s0
 800964a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800964e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009652:	edc0 6a00 	vstr	s13, [r0]
 8009656:	e7eb      	b.n	8009630 <__ieee754_rem_pio2f+0x90>
 8009658:	4b68      	ldr	r3, [pc, #416]	; (80097fc <__ieee754_rem_pio2f+0x25c>)
 800965a:	429d      	cmp	r5, r3
 800965c:	dc72      	bgt.n	8009744 <__ieee754_rem_pio2f+0x1a4>
 800965e:	f000 fdad 	bl	800a1bc <fabsf>
 8009662:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009800 <__ieee754_rem_pio2f+0x260>
 8009666:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800966a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800966e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009676:	ee17 0a90 	vmov	r0, s15
 800967a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80097e8 <__ieee754_rem_pio2f+0x248>
 800967e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009682:	281f      	cmp	r0, #31
 8009684:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80097f0 <__ieee754_rem_pio2f+0x250>
 8009688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968c:	eeb1 6a47 	vneg.f32	s12, s14
 8009690:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009694:	ee16 2a90 	vmov	r2, s13
 8009698:	dc1c      	bgt.n	80096d4 <__ieee754_rem_pio2f+0x134>
 800969a:	495a      	ldr	r1, [pc, #360]	; (8009804 <__ieee754_rem_pio2f+0x264>)
 800969c:	1e47      	subs	r7, r0, #1
 800969e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80096a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80096a6:	428b      	cmp	r3, r1
 80096a8:	d014      	beq.n	80096d4 <__ieee754_rem_pio2f+0x134>
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	ed94 7a00 	vldr	s14, [r4]
 80096b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096ba:	ed84 0a01 	vstr	s0, [r4, #4]
 80096be:	da9c      	bge.n	80095fa <__ieee754_rem_pio2f+0x5a>
 80096c0:	eeb1 7a47 	vneg.f32	s14, s14
 80096c4:	eeb1 0a40 	vneg.f32	s0, s0
 80096c8:	ed84 7a00 	vstr	s14, [r4]
 80096cc:	ed84 0a01 	vstr	s0, [r4, #4]
 80096d0:	4240      	negs	r0, r0
 80096d2:	e792      	b.n	80095fa <__ieee754_rem_pio2f+0x5a>
 80096d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80096d8:	15eb      	asrs	r3, r5, #23
 80096da:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80096de:	2d08      	cmp	r5, #8
 80096e0:	dde3      	ble.n	80096aa <__ieee754_rem_pio2f+0x10a>
 80096e2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80097f4 <__ieee754_rem_pio2f+0x254>
 80096e6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80097f8 <__ieee754_rem_pio2f+0x258>
 80096ea:	eef0 6a40 	vmov.f32	s13, s0
 80096ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80096f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80096f6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80096fa:	eef0 7a40 	vmov.f32	s15, s0
 80096fe:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009702:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009706:	ee15 2a90 	vmov	r2, s11
 800970a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800970e:	1a5b      	subs	r3, r3, r1
 8009710:	2b19      	cmp	r3, #25
 8009712:	dc04      	bgt.n	800971e <__ieee754_rem_pio2f+0x17e>
 8009714:	edc4 5a00 	vstr	s11, [r4]
 8009718:	eeb0 0a66 	vmov.f32	s0, s13
 800971c:	e7c6      	b.n	80096ac <__ieee754_rem_pio2f+0x10c>
 800971e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009808 <__ieee754_rem_pio2f+0x268>
 8009722:	eeb0 0a66 	vmov.f32	s0, s13
 8009726:	eea6 0a25 	vfma.f32	s0, s12, s11
 800972a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800972e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800980c <__ieee754_rem_pio2f+0x26c>
 8009732:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009736:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800973a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800973e:	ed84 7a00 	vstr	s14, [r4]
 8009742:	e7b3      	b.n	80096ac <__ieee754_rem_pio2f+0x10c>
 8009744:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009748:	db06      	blt.n	8009758 <__ieee754_rem_pio2f+0x1b8>
 800974a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800974e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009752:	edc0 7a00 	vstr	s15, [r0]
 8009756:	e733      	b.n	80095c0 <__ieee754_rem_pio2f+0x20>
 8009758:	15ea      	asrs	r2, r5, #23
 800975a:	3a86      	subs	r2, #134	; 0x86
 800975c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009768:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009810 <__ieee754_rem_pio2f+0x270>
 800976c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009774:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009778:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800977c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009784:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009788:	ed8d 7a04 	vstr	s14, [sp, #16]
 800978c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009790:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009798:	edcd 7a05 	vstr	s15, [sp, #20]
 800979c:	d11e      	bne.n	80097dc <__ieee754_rem_pio2f+0x23c>
 800979e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	bf14      	ite	ne
 80097a8:	2302      	movne	r3, #2
 80097aa:	2301      	moveq	r3, #1
 80097ac:	4919      	ldr	r1, [pc, #100]	; (8009814 <__ieee754_rem_pio2f+0x274>)
 80097ae:	9101      	str	r1, [sp, #4]
 80097b0:	2102      	movs	r1, #2
 80097b2:	9100      	str	r1, [sp, #0]
 80097b4:	a803      	add	r0, sp, #12
 80097b6:	4621      	mov	r1, r4
 80097b8:	f000 f88e 	bl	80098d8 <__kernel_rem_pio2f>
 80097bc:	2e00      	cmp	r6, #0
 80097be:	f6bf af1c 	bge.w	80095fa <__ieee754_rem_pio2f+0x5a>
 80097c2:	edd4 7a00 	vldr	s15, [r4]
 80097c6:	eef1 7a67 	vneg.f32	s15, s15
 80097ca:	edc4 7a00 	vstr	s15, [r4]
 80097ce:	edd4 7a01 	vldr	s15, [r4, #4]
 80097d2:	eef1 7a67 	vneg.f32	s15, s15
 80097d6:	edc4 7a01 	vstr	s15, [r4, #4]
 80097da:	e779      	b.n	80096d0 <__ieee754_rem_pio2f+0x130>
 80097dc:	2303      	movs	r3, #3
 80097de:	e7e5      	b.n	80097ac <__ieee754_rem_pio2f+0x20c>
 80097e0:	3f490fd8 	.word	0x3f490fd8
 80097e4:	4016cbe3 	.word	0x4016cbe3
 80097e8:	3fc90f80 	.word	0x3fc90f80
 80097ec:	3fc90fd0 	.word	0x3fc90fd0
 80097f0:	37354443 	.word	0x37354443
 80097f4:	37354400 	.word	0x37354400
 80097f8:	2e85a308 	.word	0x2e85a308
 80097fc:	43490f80 	.word	0x43490f80
 8009800:	3f22f984 	.word	0x3f22f984
 8009804:	0800a81c 	.word	0x0800a81c
 8009808:	2e85a300 	.word	0x2e85a300
 800980c:	248d3132 	.word	0x248d3132
 8009810:	43800000 	.word	0x43800000
 8009814:	0800a89c 	.word	0x0800a89c

08009818 <__kernel_cosf>:
 8009818:	ee10 3a10 	vmov	r3, s0
 800981c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009820:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009824:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009828:	da05      	bge.n	8009836 <__kernel_cosf+0x1e>
 800982a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800982e:	ee17 2a90 	vmov	r2, s15
 8009832:	2a00      	cmp	r2, #0
 8009834:	d03d      	beq.n	80098b2 <__kernel_cosf+0x9a>
 8009836:	ee60 5a00 	vmul.f32	s11, s0, s0
 800983a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80098b8 <__kernel_cosf+0xa0>
 800983e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80098bc <__kernel_cosf+0xa4>
 8009842:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80098c0 <__kernel_cosf+0xa8>
 8009846:	4a1f      	ldr	r2, [pc, #124]	; (80098c4 <__kernel_cosf+0xac>)
 8009848:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800984c:	4293      	cmp	r3, r2
 800984e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80098c8 <__kernel_cosf+0xb0>
 8009852:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009856:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80098cc <__kernel_cosf+0xb4>
 800985a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800985e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80098d0 <__kernel_cosf+0xb8>
 8009862:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009866:	eeb0 7a66 	vmov.f32	s14, s13
 800986a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800986e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009872:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009876:	ee67 6a25 	vmul.f32	s13, s14, s11
 800987a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800987e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009882:	dc04      	bgt.n	800988e <__kernel_cosf+0x76>
 8009884:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009888:	ee36 0a47 	vsub.f32	s0, s12, s14
 800988c:	4770      	bx	lr
 800988e:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <__kernel_cosf+0xbc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	bfda      	itte	le
 8009894:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009898:	ee06 3a90 	vmovle	s13, r3
 800989c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80098a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80098a4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80098a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80098b0:	4770      	bx	lr
 80098b2:	eeb0 0a46 	vmov.f32	s0, s12
 80098b6:	4770      	bx	lr
 80098b8:	ad47d74e 	.word	0xad47d74e
 80098bc:	310f74f6 	.word	0x310f74f6
 80098c0:	3d2aaaab 	.word	0x3d2aaaab
 80098c4:	3e999999 	.word	0x3e999999
 80098c8:	b493f27c 	.word	0xb493f27c
 80098cc:	37d00d01 	.word	0x37d00d01
 80098d0:	bab60b61 	.word	0xbab60b61
 80098d4:	3f480000 	.word	0x3f480000

080098d8 <__kernel_rem_pio2f>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	ed2d 8b04 	vpush	{d8-d9}
 80098e0:	b0d9      	sub	sp, #356	; 0x164
 80098e2:	4688      	mov	r8, r1
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	49bb      	ldr	r1, [pc, #748]	; (8009bd4 <__kernel_rem_pio2f+0x2fc>)
 80098e8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80098f0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80098f4:	1e59      	subs	r1, r3, #1
 80098f6:	1d13      	adds	r3, r2, #4
 80098f8:	db27      	blt.n	800994a <__kernel_rem_pio2f+0x72>
 80098fa:	f1b2 0b03 	subs.w	fp, r2, #3
 80098fe:	bf48      	it	mi
 8009900:	f102 0b04 	addmi.w	fp, r2, #4
 8009904:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009908:	1c45      	adds	r5, r0, #1
 800990a:	00ec      	lsls	r4, r5, #3
 800990c:	1a47      	subs	r7, r0, r1
 800990e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009912:	9403      	str	r4, [sp, #12]
 8009914:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009918:	eb0a 0c01 	add.w	ip, sl, r1
 800991c:	ae1c      	add	r6, sp, #112	; 0x70
 800991e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009922:	2400      	movs	r4, #0
 8009924:	4564      	cmp	r4, ip
 8009926:	dd12      	ble.n	800994e <__kernel_rem_pio2f+0x76>
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	ac1c      	add	r4, sp, #112	; 0x70
 800992c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009930:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009934:	f04f 0c00 	mov.w	ip, #0
 8009938:	45d4      	cmp	ip, sl
 800993a:	dc27      	bgt.n	800998c <__kernel_rem_pio2f+0xb4>
 800993c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009940:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009944:	4627      	mov	r7, r4
 8009946:	2600      	movs	r6, #0
 8009948:	e016      	b.n	8009978 <__kernel_rem_pio2f+0xa0>
 800994a:	2000      	movs	r0, #0
 800994c:	e7dc      	b.n	8009908 <__kernel_rem_pio2f+0x30>
 800994e:	42e7      	cmn	r7, r4
 8009950:	bf5d      	ittte	pl
 8009952:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8009956:	ee07 3a90 	vmovpl	s15, r3
 800995a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800995e:	eef0 7a47 	vmovmi.f32	s15, s14
 8009962:	ece6 7a01 	vstmia	r6!, {s15}
 8009966:	3401      	adds	r4, #1
 8009968:	e7dc      	b.n	8009924 <__kernel_rem_pio2f+0x4c>
 800996a:	ecf9 6a01 	vldmia	r9!, {s13}
 800996e:	ed97 7a00 	vldr	s14, [r7]
 8009972:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009976:	3601      	adds	r6, #1
 8009978:	428e      	cmp	r6, r1
 800997a:	f1a7 0704 	sub.w	r7, r7, #4
 800997e:	ddf4      	ble.n	800996a <__kernel_rem_pio2f+0x92>
 8009980:	eceb 7a01 	vstmia	fp!, {s15}
 8009984:	f10c 0c01 	add.w	ip, ip, #1
 8009988:	3404      	adds	r4, #4
 800998a:	e7d5      	b.n	8009938 <__kernel_rem_pio2f+0x60>
 800998c:	ab08      	add	r3, sp, #32
 800998e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009992:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009be0 <__kernel_rem_pio2f+0x308>
 8009996:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009bdc <__kernel_rem_pio2f+0x304>
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80099a0:	4656      	mov	r6, sl
 80099a2:	00b3      	lsls	r3, r6, #2
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	ab58      	add	r3, sp, #352	; 0x160
 80099a8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80099ac:	ac08      	add	r4, sp, #32
 80099ae:	ab44      	add	r3, sp, #272	; 0x110
 80099b0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80099b4:	46a4      	mov	ip, r4
 80099b6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80099ba:	4637      	mov	r7, r6
 80099bc:	2f00      	cmp	r7, #0
 80099be:	f1a0 0004 	sub.w	r0, r0, #4
 80099c2:	dc4f      	bgt.n	8009a64 <__kernel_rem_pio2f+0x18c>
 80099c4:	4628      	mov	r0, r5
 80099c6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80099ca:	f000 fc41 	bl	800a250 <scalbnf>
 80099ce:	eeb0 8a40 	vmov.f32	s16, s0
 80099d2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80099d6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80099da:	f000 fbf7 	bl	800a1cc <floorf>
 80099de:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80099e2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80099ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80099f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80099f4:	ee17 9a90 	vmov	r9, s15
 80099f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80099fc:	dd44      	ble.n	8009a88 <__kernel_rem_pio2f+0x1b0>
 80099fe:	f106 3cff 	add.w	ip, r6, #4294967295
 8009a02:	ab08      	add	r3, sp, #32
 8009a04:	f1c5 0e08 	rsb	lr, r5, #8
 8009a08:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009a0c:	fa47 f00e 	asr.w	r0, r7, lr
 8009a10:	4481      	add	r9, r0
 8009a12:	fa00 f00e 	lsl.w	r0, r0, lr
 8009a16:	1a3f      	subs	r7, r7, r0
 8009a18:	f1c5 0007 	rsb	r0, r5, #7
 8009a1c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009a20:	4107      	asrs	r7, r0
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	dd3f      	ble.n	8009aa6 <__kernel_rem_pio2f+0x1ce>
 8009a26:	f04f 0e00 	mov.w	lr, #0
 8009a2a:	f109 0901 	add.w	r9, r9, #1
 8009a2e:	4673      	mov	r3, lr
 8009a30:	4576      	cmp	r6, lr
 8009a32:	dc6b      	bgt.n	8009b0c <__kernel_rem_pio2f+0x234>
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	dd04      	ble.n	8009a42 <__kernel_rem_pio2f+0x16a>
 8009a38:	2d01      	cmp	r5, #1
 8009a3a:	d078      	beq.n	8009b2e <__kernel_rem_pio2f+0x256>
 8009a3c:	2d02      	cmp	r5, #2
 8009a3e:	f000 8081 	beq.w	8009b44 <__kernel_rem_pio2f+0x26c>
 8009a42:	2f02      	cmp	r7, #2
 8009a44:	d12f      	bne.n	8009aa6 <__kernel_rem_pio2f+0x1ce>
 8009a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a4a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009a4e:	b353      	cbz	r3, 8009aa6 <__kernel_rem_pio2f+0x1ce>
 8009a50:	4628      	mov	r0, r5
 8009a52:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009a56:	f000 fbfb 	bl	800a250 <scalbnf>
 8009a5a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009a5e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009a62:	e020      	b.n	8009aa6 <__kernel_rem_pio2f+0x1ce>
 8009a64:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009a68:	3f01      	subs	r7, #1
 8009a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a72:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009a76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a7a:	ecac 0a01 	vstmia	ip!, {s0}
 8009a7e:	ed90 0a00 	vldr	s0, [r0]
 8009a82:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009a86:	e799      	b.n	80099bc <__kernel_rem_pio2f+0xe4>
 8009a88:	d105      	bne.n	8009a96 <__kernel_rem_pio2f+0x1be>
 8009a8a:	1e70      	subs	r0, r6, #1
 8009a8c:	ab08      	add	r3, sp, #32
 8009a8e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009a92:	11ff      	asrs	r7, r7, #7
 8009a94:	e7c5      	b.n	8009a22 <__kernel_rem_pio2f+0x14a>
 8009a96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa2:	da31      	bge.n	8009b08 <__kernel_rem_pio2f+0x230>
 8009aa4:	2700      	movs	r7, #0
 8009aa6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aae:	f040 809b 	bne.w	8009be8 <__kernel_rem_pio2f+0x310>
 8009ab2:	1e74      	subs	r4, r6, #1
 8009ab4:	46a4      	mov	ip, r4
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	45d4      	cmp	ip, sl
 8009aba:	da4a      	bge.n	8009b52 <__kernel_rem_pio2f+0x27a>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d07a      	beq.n	8009bb6 <__kernel_rem_pio2f+0x2de>
 8009ac0:	ab08      	add	r3, sp, #32
 8009ac2:	3d08      	subs	r5, #8
 8009ac4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8081 	beq.w	8009bd0 <__kernel_rem_pio2f+0x2f8>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009ad4:	00a5      	lsls	r5, r4, #2
 8009ad6:	f000 fbbb 	bl	800a250 <scalbnf>
 8009ada:	aa44      	add	r2, sp, #272	; 0x110
 8009adc:	1d2b      	adds	r3, r5, #4
 8009ade:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009be0 <__kernel_rem_pio2f+0x308>
 8009ae2:	18d1      	adds	r1, r2, r3
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	f280 80ae 	bge.w	8009c48 <__kernel_rem_pio2f+0x370>
 8009aec:	4622      	mov	r2, r4
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	f2c0 80cc 	blt.w	8009c8c <__kernel_rem_pio2f+0x3b4>
 8009af4:	a944      	add	r1, sp, #272	; 0x110
 8009af6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009afa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009bd8 <__kernel_rem_pio2f+0x300>
 8009afe:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009b02:	2000      	movs	r0, #0
 8009b04:	1aa1      	subs	r1, r4, r2
 8009b06:	e0b6      	b.n	8009c76 <__kernel_rem_pio2f+0x39e>
 8009b08:	2702      	movs	r7, #2
 8009b0a:	e78c      	b.n	8009a26 <__kernel_rem_pio2f+0x14e>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	b94b      	cbnz	r3, 8009b24 <__kernel_rem_pio2f+0x24c>
 8009b10:	b118      	cbz	r0, 8009b1a <__kernel_rem_pio2f+0x242>
 8009b12:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009b16:	6020      	str	r0, [r4, #0]
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f10e 0e01 	add.w	lr, lr, #1
 8009b1e:	3404      	adds	r4, #4
 8009b20:	4603      	mov	r3, r0
 8009b22:	e785      	b.n	8009a30 <__kernel_rem_pio2f+0x158>
 8009b24:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009b28:	6020      	str	r0, [r4, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	e7f5      	b.n	8009b1a <__kernel_rem_pio2f+0x242>
 8009b2e:	1e74      	subs	r4, r6, #1
 8009b30:	a808      	add	r0, sp, #32
 8009b32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009b36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009b3a:	f10d 0c20 	add.w	ip, sp, #32
 8009b3e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009b42:	e77e      	b.n	8009a42 <__kernel_rem_pio2f+0x16a>
 8009b44:	1e74      	subs	r4, r6, #1
 8009b46:	a808      	add	r0, sp, #32
 8009b48:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009b4c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009b50:	e7f3      	b.n	8009b3a <__kernel_rem_pio2f+0x262>
 8009b52:	ab08      	add	r3, sp, #32
 8009b54:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009b58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b5c:	4318      	orrs	r0, r3
 8009b5e:	e7ab      	b.n	8009ab8 <__kernel_rem_pio2f+0x1e0>
 8009b60:	f10c 0c01 	add.w	ip, ip, #1
 8009b64:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	d0f9      	beq.n	8009b60 <__kernel_rem_pio2f+0x288>
 8009b6c:	9b05      	ldr	r3, [sp, #20]
 8009b6e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009b72:	eb0d 0003 	add.w	r0, sp, r3
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	18f4      	adds	r4, r6, r3
 8009b7a:	ab1c      	add	r3, sp, #112	; 0x70
 8009b7c:	1c77      	adds	r7, r6, #1
 8009b7e:	384c      	subs	r0, #76	; 0x4c
 8009b80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b84:	4466      	add	r6, ip
 8009b86:	42be      	cmp	r6, r7
 8009b88:	f6ff af0b 	blt.w	80099a2 <__kernel_rem_pio2f+0xca>
 8009b8c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009b90:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b9c:	f04f 0c00 	mov.w	ip, #0
 8009ba0:	ece4 7a01 	vstmia	r4!, {s15}
 8009ba4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009ba8:	46a1      	mov	r9, r4
 8009baa:	458c      	cmp	ip, r1
 8009bac:	dd07      	ble.n	8009bbe <__kernel_rem_pio2f+0x2e6>
 8009bae:	ece0 7a01 	vstmia	r0!, {s15}
 8009bb2:	3701      	adds	r7, #1
 8009bb4:	e7e7      	b.n	8009b86 <__kernel_rem_pio2f+0x2ae>
 8009bb6:	9804      	ldr	r0, [sp, #16]
 8009bb8:	f04f 0c01 	mov.w	ip, #1
 8009bbc:	e7d2      	b.n	8009b64 <__kernel_rem_pio2f+0x28c>
 8009bbe:	ecfe 6a01 	vldmia	lr!, {s13}
 8009bc2:	ed39 7a01 	vldmdb	r9!, {s14}
 8009bc6:	f10c 0c01 	add.w	ip, ip, #1
 8009bca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009bce:	e7ec      	b.n	8009baa <__kernel_rem_pio2f+0x2d2>
 8009bd0:	3c01      	subs	r4, #1
 8009bd2:	e775      	b.n	8009ac0 <__kernel_rem_pio2f+0x1e8>
 8009bd4:	0800abe0 	.word	0x0800abe0
 8009bd8:	0800abb4 	.word	0x0800abb4
 8009bdc:	43800000 	.word	0x43800000
 8009be0:	3b800000 	.word	0x3b800000
 8009be4:	00000000 	.word	0x00000000
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	eeb0 0a48 	vmov.f32	s0, s16
 8009bee:	1a98      	subs	r0, r3, r2
 8009bf0:	f000 fb2e 	bl	800a250 <scalbnf>
 8009bf4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009bdc <__kernel_rem_pio2f+0x304>
 8009bf8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	db19      	blt.n	8009c36 <__kernel_rem_pio2f+0x35e>
 8009c02:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009be0 <__kernel_rem_pio2f+0x308>
 8009c06:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009c0a:	aa08      	add	r2, sp, #32
 8009c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c10:	1c74      	adds	r4, r6, #1
 8009c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c16:	3508      	adds	r5, #8
 8009c18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009c24:	ee10 3a10 	vmov	r3, s0
 8009c28:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009c2c:	ee17 3a90 	vmov	r3, s15
 8009c30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009c34:	e74b      	b.n	8009ace <__kernel_rem_pio2f+0x1f6>
 8009c36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009c3a:	aa08      	add	r2, sp, #32
 8009c3c:	ee10 3a10 	vmov	r3, s0
 8009c40:	4634      	mov	r4, r6
 8009c42:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009c46:	e742      	b.n	8009ace <__kernel_rem_pio2f+0x1f6>
 8009c48:	a808      	add	r0, sp, #32
 8009c4a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009c4e:	9001      	str	r0, [sp, #4]
 8009c50:	ee07 0a90 	vmov	s15, r0
 8009c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c58:	3a01      	subs	r2, #1
 8009c5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009c5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009c62:	ed61 7a01 	vstmdb	r1!, {s15}
 8009c66:	e73e      	b.n	8009ae6 <__kernel_rem_pio2f+0x20e>
 8009c68:	ecfc 6a01 	vldmia	ip!, {s13}
 8009c6c:	ecb6 7a01 	vldmia	r6!, {s14}
 8009c70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c74:	3001      	adds	r0, #1
 8009c76:	4550      	cmp	r0, sl
 8009c78:	dc01      	bgt.n	8009c7e <__kernel_rem_pio2f+0x3a6>
 8009c7a:	4288      	cmp	r0, r1
 8009c7c:	ddf4      	ble.n	8009c68 <__kernel_rem_pio2f+0x390>
 8009c7e:	a858      	add	r0, sp, #352	; 0x160
 8009c80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c84:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009c88:	3a01      	subs	r2, #1
 8009c8a:	e730      	b.n	8009aee <__kernel_rem_pio2f+0x216>
 8009c8c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009c8e:	2a02      	cmp	r2, #2
 8009c90:	dc09      	bgt.n	8009ca6 <__kernel_rem_pio2f+0x3ce>
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	dc2a      	bgt.n	8009cec <__kernel_rem_pio2f+0x414>
 8009c96:	d043      	beq.n	8009d20 <__kernel_rem_pio2f+0x448>
 8009c98:	f009 0007 	and.w	r0, r9, #7
 8009c9c:	b059      	add	sp, #356	; 0x164
 8009c9e:	ecbd 8b04 	vpop	{d8-d9}
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d1f5      	bne.n	8009c98 <__kernel_rem_pio2f+0x3c0>
 8009cac:	ab30      	add	r3, sp, #192	; 0xc0
 8009cae:	442b      	add	r3, r5
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f1a1 0104 	sub.w	r1, r1, #4
 8009cbc:	dc51      	bgt.n	8009d62 <__kernel_rem_pio2f+0x48a>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	2901      	cmp	r1, #1
 8009cc2:	f1a2 0204 	sub.w	r2, r2, #4
 8009cc6:	dc5c      	bgt.n	8009d82 <__kernel_rem_pio2f+0x4aa>
 8009cc8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009ccc:	3304      	adds	r3, #4
 8009cce:	2c01      	cmp	r4, #1
 8009cd0:	dc67      	bgt.n	8009da2 <__kernel_rem_pio2f+0x4ca>
 8009cd2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009cd6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009cda:	2f00      	cmp	r7, #0
 8009cdc:	d167      	bne.n	8009dae <__kernel_rem_pio2f+0x4d6>
 8009cde:	edc8 6a00 	vstr	s13, [r8]
 8009ce2:	ed88 7a01 	vstr	s14, [r8, #4]
 8009ce6:	edc8 7a02 	vstr	s15, [r8, #8]
 8009cea:	e7d5      	b.n	8009c98 <__kernel_rem_pio2f+0x3c0>
 8009cec:	aa30      	add	r2, sp, #192	; 0xc0
 8009cee:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009cf2:	4413      	add	r3, r2
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	da24      	bge.n	8009d44 <__kernel_rem_pio2f+0x46c>
 8009cfa:	b34f      	cbz	r7, 8009d50 <__kernel_rem_pio2f+0x478>
 8009cfc:	eef1 7a47 	vneg.f32	s15, s14
 8009d00:	edc8 7a00 	vstr	s15, [r8]
 8009d04:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d0c:	aa31      	add	r2, sp, #196	; 0xc4
 8009d0e:	2301      	movs	r3, #1
 8009d10:	429c      	cmp	r4, r3
 8009d12:	da20      	bge.n	8009d56 <__kernel_rem_pio2f+0x47e>
 8009d14:	b10f      	cbz	r7, 8009d1a <__kernel_rem_pio2f+0x442>
 8009d16:	eef1 7a67 	vneg.f32	s15, s15
 8009d1a:	edc8 7a01 	vstr	s15, [r8, #4]
 8009d1e:	e7bb      	b.n	8009c98 <__kernel_rem_pio2f+0x3c0>
 8009d20:	aa30      	add	r2, sp, #192	; 0xc0
 8009d22:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009be4 <__kernel_rem_pio2f+0x30c>
 8009d26:	4413      	add	r3, r2
 8009d28:	2c00      	cmp	r4, #0
 8009d2a:	da05      	bge.n	8009d38 <__kernel_rem_pio2f+0x460>
 8009d2c:	b10f      	cbz	r7, 8009d32 <__kernel_rem_pio2f+0x45a>
 8009d2e:	eef1 7a67 	vneg.f32	s15, s15
 8009d32:	edc8 7a00 	vstr	s15, [r8]
 8009d36:	e7af      	b.n	8009c98 <__kernel_rem_pio2f+0x3c0>
 8009d38:	ed33 7a01 	vldmdb	r3!, {s14}
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d42:	e7f1      	b.n	8009d28 <__kernel_rem_pio2f+0x450>
 8009d44:	ed73 7a01 	vldmdb	r3!, {s15}
 8009d48:	3a01      	subs	r2, #1
 8009d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d4e:	e7d2      	b.n	8009cf6 <__kernel_rem_pio2f+0x41e>
 8009d50:	eef0 7a47 	vmov.f32	s15, s14
 8009d54:	e7d4      	b.n	8009d00 <__kernel_rem_pio2f+0x428>
 8009d56:	ecb2 7a01 	vldmia	r2!, {s14}
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d60:	e7d6      	b.n	8009d10 <__kernel_rem_pio2f+0x438>
 8009d62:	edd1 7a00 	vldr	s15, [r1]
 8009d66:	edd1 6a01 	vldr	s13, [r1, #4]
 8009d6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d6e:	3801      	subs	r0, #1
 8009d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d74:	ed81 7a00 	vstr	s14, [r1]
 8009d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7c:	edc1 7a01 	vstr	s15, [r1, #4]
 8009d80:	e799      	b.n	8009cb6 <__kernel_rem_pio2f+0x3de>
 8009d82:	edd2 7a00 	vldr	s15, [r2]
 8009d86:	edd2 6a01 	vldr	s13, [r2, #4]
 8009d8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d8e:	3901      	subs	r1, #1
 8009d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d94:	ed82 7a00 	vstr	s14, [r2]
 8009d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009da0:	e78e      	b.n	8009cc0 <__kernel_rem_pio2f+0x3e8>
 8009da2:	ed33 7a01 	vldmdb	r3!, {s14}
 8009da6:	3c01      	subs	r4, #1
 8009da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dac:	e78f      	b.n	8009cce <__kernel_rem_pio2f+0x3f6>
 8009dae:	eef1 6a66 	vneg.f32	s13, s13
 8009db2:	eeb1 7a47 	vneg.f32	s14, s14
 8009db6:	edc8 6a00 	vstr	s13, [r8]
 8009dba:	ed88 7a01 	vstr	s14, [r8, #4]
 8009dbe:	eef1 7a67 	vneg.f32	s15, s15
 8009dc2:	e790      	b.n	8009ce6 <__kernel_rem_pio2f+0x40e>

08009dc4 <__kernel_sinf>:
 8009dc4:	ee10 3a10 	vmov	r3, s0
 8009dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009dd0:	da04      	bge.n	8009ddc <__kernel_sinf+0x18>
 8009dd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009dd6:	ee17 3a90 	vmov	r3, s15
 8009dda:	b35b      	cbz	r3, 8009e34 <__kernel_sinf+0x70>
 8009ddc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009de0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009e38 <__kernel_sinf+0x74>
 8009de4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009e3c <__kernel_sinf+0x78>
 8009de8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009dec:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009e40 <__kernel_sinf+0x7c>
 8009df0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009df4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009e44 <__kernel_sinf+0x80>
 8009df8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009dfc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009e48 <__kernel_sinf+0x84>
 8009e00:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009e04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e08:	b930      	cbnz	r0, 8009e18 <__kernel_sinf+0x54>
 8009e0a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009e4c <__kernel_sinf+0x88>
 8009e0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009e12:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009e16:	4770      	bx	lr
 8009e18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009e1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009e20:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009e24:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009e28:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009e50 <__kernel_sinf+0x8c>
 8009e2c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009e30:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	2f2ec9d3 	.word	0x2f2ec9d3
 8009e3c:	b2d72f34 	.word	0xb2d72f34
 8009e40:	3638ef1b 	.word	0x3638ef1b
 8009e44:	b9500d01 	.word	0xb9500d01
 8009e48:	3c088889 	.word	0x3c088889
 8009e4c:	be2aaaab 	.word	0xbe2aaaab
 8009e50:	3e2aaaab 	.word	0x3e2aaaab

08009e54 <__kernel_tanf>:
 8009e54:	b508      	push	{r3, lr}
 8009e56:	ee10 3a10 	vmov	r3, s0
 8009e5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e5e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8009e62:	eef0 7a40 	vmov.f32	s15, s0
 8009e66:	da17      	bge.n	8009e98 <__kernel_tanf+0x44>
 8009e68:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8009e6c:	ee17 1a10 	vmov	r1, s14
 8009e70:	bb41      	cbnz	r1, 8009ec4 <__kernel_tanf+0x70>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d108      	bne.n	8009e8a <__kernel_tanf+0x36>
 8009e78:	f000 f9a0 	bl	800a1bc <fabsf>
 8009e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009e84:	eeb0 0a67 	vmov.f32	s0, s15
 8009e88:	bd08      	pop	{r3, pc}
 8009e8a:	2801      	cmp	r0, #1
 8009e8c:	d0fa      	beq.n	8009e84 <__kernel_tanf+0x30>
 8009e8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009e92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009e96:	e7f5      	b.n	8009e84 <__kernel_tanf+0x30>
 8009e98:	494c      	ldr	r1, [pc, #304]	; (8009fcc <__kernel_tanf+0x178>)
 8009e9a:	428a      	cmp	r2, r1
 8009e9c:	db12      	blt.n	8009ec4 <__kernel_tanf+0x70>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	eef1 7a40 	vneglt.f32	s15, s0
 8009ea6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8009fd0 <__kernel_tanf+0x17c>
 8009eaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009eae:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8009fd4 <__kernel_tanf+0x180>
 8009eb2:	bfb8      	it	lt
 8009eb4:	eef1 0a60 	vneglt.f32	s1, s1
 8009eb8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8009ebc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8009ec0:	eddf 0a45 	vldr	s1, [pc, #276]	; 8009fd8 <__kernel_tanf+0x184>
 8009ec4:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fdc <__kernel_tanf+0x188>
 8009ec8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8009fe0 <__kernel_tanf+0x18c>
 8009ecc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8009fe4 <__kernel_tanf+0x190>
 8009ed0:	493e      	ldr	r1, [pc, #248]	; (8009fcc <__kernel_tanf+0x178>)
 8009ed2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009ed6:	428a      	cmp	r2, r1
 8009ed8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009edc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009ee0:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009fe8 <__kernel_tanf+0x194>
 8009ee4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ee8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009fec <__kernel_tanf+0x198>
 8009eec:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009ef0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ff0 <__kernel_tanf+0x19c>
 8009ef4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ef8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8009ff4 <__kernel_tanf+0x1a0>
 8009efc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009f00:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009ff8 <__kernel_tanf+0x1a4>
 8009f04:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009f08:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009ffc <__kernel_tanf+0x1a8>
 8009f0c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009f10:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800a000 <__kernel_tanf+0x1ac>
 8009f14:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009f18:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a004 <__kernel_tanf+0x1b0>
 8009f1c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009f20:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a008 <__kernel_tanf+0x1b4>
 8009f24:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009f28:	eeb0 7a46 	vmov.f32	s14, s12
 8009f2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009f30:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8009f34:	eeb0 6a60 	vmov.f32	s12, s1
 8009f38:	eea7 6a05 	vfma.f32	s12, s14, s10
 8009f3c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a00c <__kernel_tanf+0x1b8>
 8009f40:	eee6 0a26 	vfma.f32	s1, s12, s13
 8009f44:	eee5 0a07 	vfma.f32	s1, s10, s14
 8009f48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009f4c:	db1d      	blt.n	8009f8a <__kernel_tanf+0x136>
 8009f4e:	ee06 0a90 	vmov	s13, r0
 8009f52:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8009f56:	ee27 6a07 	vmul.f32	s12, s14, s14
 8009f5a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8009f5e:	179b      	asrs	r3, r3, #30
 8009f60:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	f1c3 0301 	rsb	r3, r3, #1
 8009f6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f70:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8009f74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009f78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009f88:	e77c      	b.n	8009e84 <__kernel_tanf+0x30>
 8009f8a:	2801      	cmp	r0, #1
 8009f8c:	d01b      	beq.n	8009fc6 <__kernel_tanf+0x172>
 8009f8e:	4b20      	ldr	r3, [pc, #128]	; (800a010 <__kernel_tanf+0x1bc>)
 8009f90:	ee17 2a10 	vmov	r2, s14
 8009f94:	401a      	ands	r2, r3
 8009f96:	ee06 2a10 	vmov	s12, r2
 8009f9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009f9e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009fa2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009fa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fae:	ee16 2a90 	vmov	r2, s13
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	ee07 3a90 	vmov	s15, r3
 8009fb8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009fbc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8009fc0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009fc4:	e75e      	b.n	8009e84 <__kernel_tanf+0x30>
 8009fc6:	eef0 7a47 	vmov.f32	s15, s14
 8009fca:	e75b      	b.n	8009e84 <__kernel_tanf+0x30>
 8009fcc:	3f2ca140 	.word	0x3f2ca140
 8009fd0:	3f490fda 	.word	0x3f490fda
 8009fd4:	33222168 	.word	0x33222168
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	b79bae5f 	.word	0xb79bae5f
 8009fe0:	38a3f445 	.word	0x38a3f445
 8009fe4:	37d95384 	.word	0x37d95384
 8009fe8:	3a1a26c8 	.word	0x3a1a26c8
 8009fec:	3b6b6916 	.word	0x3b6b6916
 8009ff0:	3cb327a4 	.word	0x3cb327a4
 8009ff4:	3e088889 	.word	0x3e088889
 8009ff8:	3895c07a 	.word	0x3895c07a
 8009ffc:	398137b9 	.word	0x398137b9
 800a000:	3abede48 	.word	0x3abede48
 800a004:	3c11371f 	.word	0x3c11371f
 800a008:	3d5d0dd1 	.word	0x3d5d0dd1
 800a00c:	3eaaaaab 	.word	0x3eaaaaab
 800a010:	fffff000 	.word	0xfffff000

0800a014 <atanf>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	ee10 5a10 	vmov	r5, s0
 800a01a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a01e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a022:	eef0 7a40 	vmov.f32	s15, s0
 800a026:	db10      	blt.n	800a04a <atanf+0x36>
 800a028:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a02c:	dd04      	ble.n	800a038 <atanf+0x24>
 800a02e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a032:	eeb0 0a67 	vmov.f32	s0, s15
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a170 <atanf+0x15c>
 800a03c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a174 <atanf+0x160>
 800a040:	2d00      	cmp	r5, #0
 800a042:	bfd8      	it	le
 800a044:	eef0 7a40 	vmovle.f32	s15, s0
 800a048:	e7f3      	b.n	800a032 <atanf+0x1e>
 800a04a:	4b4b      	ldr	r3, [pc, #300]	; (800a178 <atanf+0x164>)
 800a04c:	429c      	cmp	r4, r3
 800a04e:	dc10      	bgt.n	800a072 <atanf+0x5e>
 800a050:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a054:	da0a      	bge.n	800a06c <atanf+0x58>
 800a056:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a17c <atanf+0x168>
 800a05a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a062:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06a:	dce2      	bgt.n	800a032 <atanf+0x1e>
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e013      	b.n	800a09a <atanf+0x86>
 800a072:	f000 f8a3 	bl	800a1bc <fabsf>
 800a076:	4b42      	ldr	r3, [pc, #264]	; (800a180 <atanf+0x16c>)
 800a078:	429c      	cmp	r4, r3
 800a07a:	dc4f      	bgt.n	800a11c <atanf+0x108>
 800a07c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a080:	429c      	cmp	r4, r3
 800a082:	dc41      	bgt.n	800a108 <atanf+0xf4>
 800a084:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a088:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a08c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a090:	2300      	movs	r3, #0
 800a092:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a096:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a0a0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a184 <atanf+0x170>
 800a0a4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a188 <atanf+0x174>
 800a0a8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a18c <atanf+0x178>
 800a0ac:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a0b0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a0b4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a190 <atanf+0x17c>
 800a0b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a0bc:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a194 <atanf+0x180>
 800a0c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a0c4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a198 <atanf+0x184>
 800a0c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a0cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a19c <atanf+0x188>
 800a0d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a0d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a1a0 <atanf+0x18c>
 800a0d8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a0dc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a1a4 <atanf+0x190>
 800a0e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a0e4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a1a8 <atanf+0x194>
 800a0e8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a0ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a1ac <atanf+0x198>
 800a0f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a0f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a0f8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a0fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a100:	d121      	bne.n	800a146 <atanf+0x132>
 800a102:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a106:	e794      	b.n	800a032 <atanf+0x1e>
 800a108:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a10c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a110:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a114:	2301      	movs	r3, #1
 800a116:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a11a:	e7be      	b.n	800a09a <atanf+0x86>
 800a11c:	4b24      	ldr	r3, [pc, #144]	; (800a1b0 <atanf+0x19c>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	dc0b      	bgt.n	800a13a <atanf+0x126>
 800a122:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a12a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a12e:	2302      	movs	r3, #2
 800a130:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a138:	e7af      	b.n	800a09a <atanf+0x86>
 800a13a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a13e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a142:	2303      	movs	r3, #3
 800a144:	e7a9      	b.n	800a09a <atanf+0x86>
 800a146:	4a1b      	ldr	r2, [pc, #108]	; (800a1b4 <atanf+0x1a0>)
 800a148:	491b      	ldr	r1, [pc, #108]	; (800a1b8 <atanf+0x1a4>)
 800a14a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a14e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a152:	ed93 0a00 	vldr	s0, [r3]
 800a156:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a15a:	ed92 0a00 	vldr	s0, [r2]
 800a15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a162:	2d00      	cmp	r5, #0
 800a164:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a168:	bfb8      	it	lt
 800a16a:	eef1 7a67 	vneglt.f32	s15, s15
 800a16e:	e760      	b.n	800a032 <atanf+0x1e>
 800a170:	3fc90fdb 	.word	0x3fc90fdb
 800a174:	bfc90fdb 	.word	0xbfc90fdb
 800a178:	3edfffff 	.word	0x3edfffff
 800a17c:	7149f2ca 	.word	0x7149f2ca
 800a180:	3f97ffff 	.word	0x3f97ffff
 800a184:	3c8569d7 	.word	0x3c8569d7
 800a188:	3d4bda59 	.word	0x3d4bda59
 800a18c:	bd6ef16b 	.word	0xbd6ef16b
 800a190:	3d886b35 	.word	0x3d886b35
 800a194:	3dba2e6e 	.word	0x3dba2e6e
 800a198:	3e124925 	.word	0x3e124925
 800a19c:	3eaaaaab 	.word	0x3eaaaaab
 800a1a0:	bd15a221 	.word	0xbd15a221
 800a1a4:	bd9d8795 	.word	0xbd9d8795
 800a1a8:	bde38e38 	.word	0xbde38e38
 800a1ac:	be4ccccd 	.word	0xbe4ccccd
 800a1b0:	401bffff 	.word	0x401bffff
 800a1b4:	0800abec 	.word	0x0800abec
 800a1b8:	0800abfc 	.word	0x0800abfc

0800a1bc <fabsf>:
 800a1bc:	ee10 3a10 	vmov	r3, s0
 800a1c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1c4:	ee00 3a10 	vmov	s0, r3
 800a1c8:	4770      	bx	lr
	...

0800a1cc <floorf>:
 800a1cc:	ee10 3a10 	vmov	r3, s0
 800a1d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a1d4:	3a7f      	subs	r2, #127	; 0x7f
 800a1d6:	2a16      	cmp	r2, #22
 800a1d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1dc:	dc2a      	bgt.n	800a234 <floorf+0x68>
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	da11      	bge.n	800a206 <floorf+0x3a>
 800a1e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a244 <floorf+0x78>
 800a1e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a1ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f2:	dd05      	ble.n	800a200 <floorf+0x34>
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	da23      	bge.n	800a240 <floorf+0x74>
 800a1f8:	4a13      	ldr	r2, [pc, #76]	; (800a248 <floorf+0x7c>)
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	bf18      	it	ne
 800a1fe:	4613      	movne	r3, r2
 800a200:	ee00 3a10 	vmov	s0, r3
 800a204:	4770      	bx	lr
 800a206:	4911      	ldr	r1, [pc, #68]	; (800a24c <floorf+0x80>)
 800a208:	4111      	asrs	r1, r2
 800a20a:	420b      	tst	r3, r1
 800a20c:	d0fa      	beq.n	800a204 <floorf+0x38>
 800a20e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a244 <floorf+0x78>
 800a212:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a216:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	ddef      	ble.n	800a200 <floorf+0x34>
 800a220:	2b00      	cmp	r3, #0
 800a222:	bfbe      	ittt	lt
 800a224:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a228:	fa40 f202 	asrlt.w	r2, r0, r2
 800a22c:	189b      	addlt	r3, r3, r2
 800a22e:	ea23 0301 	bic.w	r3, r3, r1
 800a232:	e7e5      	b.n	800a200 <floorf+0x34>
 800a234:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a238:	d3e4      	bcc.n	800a204 <floorf+0x38>
 800a23a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a23e:	4770      	bx	lr
 800a240:	2300      	movs	r3, #0
 800a242:	e7dd      	b.n	800a200 <floorf+0x34>
 800a244:	7149f2ca 	.word	0x7149f2ca
 800a248:	bf800000 	.word	0xbf800000
 800a24c:	007fffff 	.word	0x007fffff

0800a250 <scalbnf>:
 800a250:	ee10 3a10 	vmov	r3, s0
 800a254:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a258:	d025      	beq.n	800a2a6 <scalbnf+0x56>
 800a25a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a25e:	d302      	bcc.n	800a266 <scalbnf+0x16>
 800a260:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a264:	4770      	bx	lr
 800a266:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a26a:	d122      	bne.n	800a2b2 <scalbnf+0x62>
 800a26c:	4b2a      	ldr	r3, [pc, #168]	; (800a318 <scalbnf+0xc8>)
 800a26e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a31c <scalbnf+0xcc>
 800a272:	4298      	cmp	r0, r3
 800a274:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a278:	db16      	blt.n	800a2a8 <scalbnf+0x58>
 800a27a:	ee10 3a10 	vmov	r3, s0
 800a27e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a282:	3a19      	subs	r2, #25
 800a284:	4402      	add	r2, r0
 800a286:	2afe      	cmp	r2, #254	; 0xfe
 800a288:	dd15      	ble.n	800a2b6 <scalbnf+0x66>
 800a28a:	ee10 3a10 	vmov	r3, s0
 800a28e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a320 <scalbnf+0xd0>
 800a292:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a324 <scalbnf+0xd4>
 800a296:	2b00      	cmp	r3, #0
 800a298:	eeb0 7a67 	vmov.f32	s14, s15
 800a29c:	bfb8      	it	lt
 800a29e:	eef0 7a66 	vmovlt.f32	s15, s13
 800a2a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a2a6:	4770      	bx	lr
 800a2a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a328 <scalbnf+0xd8>
 800a2ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2b0:	4770      	bx	lr
 800a2b2:	0dd2      	lsrs	r2, r2, #23
 800a2b4:	e7e6      	b.n	800a284 <scalbnf+0x34>
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	dd06      	ble.n	800a2c8 <scalbnf+0x78>
 800a2ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a2c2:	ee00 3a10 	vmov	s0, r3
 800a2c6:	4770      	bx	lr
 800a2c8:	f112 0f16 	cmn.w	r2, #22
 800a2cc:	da1a      	bge.n	800a304 <scalbnf+0xb4>
 800a2ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a2d2:	4298      	cmp	r0, r3
 800a2d4:	ee10 3a10 	vmov	r3, s0
 800a2d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2dc:	dd0a      	ble.n	800a2f4 <scalbnf+0xa4>
 800a2de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a320 <scalbnf+0xd0>
 800a2e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a324 <scalbnf+0xd4>
 800a2e6:	eef0 7a40 	vmov.f32	s15, s0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bf18      	it	ne
 800a2ee:	eeb0 0a47 	vmovne.f32	s0, s14
 800a2f2:	e7db      	b.n	800a2ac <scalbnf+0x5c>
 800a2f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a328 <scalbnf+0xd8>
 800a2f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a32c <scalbnf+0xdc>
 800a2fc:	eef0 7a40 	vmov.f32	s15, s0
 800a300:	2b00      	cmp	r3, #0
 800a302:	e7f3      	b.n	800a2ec <scalbnf+0x9c>
 800a304:	3219      	adds	r2, #25
 800a306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a30a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a30e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a330 <scalbnf+0xe0>
 800a312:	ee07 3a10 	vmov	s14, r3
 800a316:	e7c4      	b.n	800a2a2 <scalbnf+0x52>
 800a318:	ffff3cb0 	.word	0xffff3cb0
 800a31c:	4c000000 	.word	0x4c000000
 800a320:	7149f2ca 	.word	0x7149f2ca
 800a324:	f149f2ca 	.word	0xf149f2ca
 800a328:	0da24260 	.word	0x0da24260
 800a32c:	8da24260 	.word	0x8da24260
 800a330:	33000000 	.word	0x33000000

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
